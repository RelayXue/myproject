
function SVendorPrefix() { }
SVendorPrefix.VendorPrefixes = ["", "O", "ms", "Moz", "Webkit"];
SVendorPrefix.CssCache = {};
SVendorPrefix.JsCache = {};
SVendorPrefix.FunCss = function (property) {
    if (SVendorPrefix.CssCache[property] === undefined) {
        var domProperty = property.
                replace(/(-[\s\S])/g, function (c) { return c.charAt(1).toUpperCase(); });
        var prefixedDom = SVendorPrefix.FunStyle(domProperty);
        SVendorPrefix.CssCache[property] = SVendorPrefix.DomToCss(prefixedDom);
    }
    return SVendorPrefix.CssCache[property];
}
SVendorPrefix.FunJs = function (obj, property) {
    if (SVendorPrefix.JsCache[property] === undefined) {
        var tmpProp,
                i = 0,
                l = SVendorPrefix.VendorPrefixes.length,
                prefix,
                isStyleObj = (typeof obj.cssText !== "undefined");

        SVendorPrefix.JsCache[property] = null;
        for (; i < l; i++) {
            prefix = SVendorPrefix.VendorPrefixes[i];
            if (prefix) {
                if (!isStyleObj) {
                    prefix = prefix.toLowerCase();
                }
                tmpProp = prefix + property.charAt(0).toUpperCase() + property.slice(1);
            } else {
                tmpProp = property;
            }

            if (obj[tmpProp] !== undefined) {
                SVendorPrefix.JsCache[property] = tmpProp;
                break;
            }
        }
    }
    return SVendorPrefix.JsCache[property];
}
SVendorPrefix.FunStyle = function (property) {
    return SVendorPrefix.FunJs(divStyle, property);
}
SVendorPrefix.DomToCss = function (prefixedDom) {
    if (!prefixedDom) { return null; }
    return prefixedDom.
            replace(/([A-Z])/g, function (c) { return "-" + c.toLowerCase(); }).
            replace(/^ms-/, "-ms-");
};

var SAnimation = (function (window) {
    var requestAnimationFrame = SVendorPrefix.FunJs(window, "requestAnimationFrame");
    var isNative = !!(requestAnimationFrame);

    var requestFrame = (function () {
        var request = window[requestAnimationFrame] ||
            function (callback, element) {
                window.setTimeout(callback, 16);
            };
        return function (callback, element) {
            request.apply(window, [callback, element]);
        };
    })();

    var counter = 0;
    var loops = {};


    function start(callback, duration, element) {
        duration = duration > 0 ? duration : Number.POSITIVE_INFINITY;
        var id = ++counter;
        var start = +new Date;
        loops[id] = function () {
            if (loops[id] && +new Date - start <= duration) {
                callback();
                if (loops[id]) {
                    requestFrame(loops[id], element);
                }
            } else {
                delete loops[id];
            }
        };
        requestFrame(loops[id], element);
        return id;
    }

    function stop(id) {
        delete loops[id];
    }

    return {
        isNative: isNative,
        requestFrame: requestFrame,
        start: start,
        stop: stop
    };
})(window);


function JSecurity() { }
JSecurity.IsValid = function () { try { if (SMap) { if (SMap._iux != null) { return true; } } return true; } catch (efvd) { return false } }
function SEnumEvent() { }
SEnumEvent.OnMouseover = "mouseover"; SEnumEvent.OnMouseout = "mouseout"; SEnumEvent.OnClick = "click"; SEnumEvent.OnDBClick = "dbclick"; function SEnumCursor() { }
SEnumCursor._Move = "move"; SEnumCursor._Pointer = "pointer"; SEnumCursor._Auto = "auto"; SEnumCursor._Default = "default"; SEnumCursor._Hand = "hand"; SEnumCursor._Text = "text"; function SEnumZIndex() { }
SEnumZIndex.ZLayer = 1; SEnumZIndex.ZIcon = 200; SEnumZIndex.ZMarkerLayer = 500; SEnumZIndex._ZVectorLayer = 200; SEnumZIndex.ZLabel = 310; SEnumZIndex._ZOVBase = 309; SEnumZIndex.ZControl = 400; SEnumZIndex.ZInfoWindow = 1000; function EnumLayerType() { }
EnumLayerType.LTTileLayer = 1; EnumLayerType.LTMarkerLayer = 2; EnumLayerType.LTVectorLayer = 3; function SMapEType() { }
SMapEType.AddLayer = "addlayer"; SMapEType.RemoveLayer = "removelayer"; SMapEType.ChangeLayer = "changelayer"; SMapEType.MoveStart = "movestart"; SMapEType.Moving = "move"; SMapEType.MoveEnd = "moveend"; SMapEType.OpenPopup = "popupopen"; SMapEType.ClosePopup = "popupclose"; SMapEType.AddMarker = "addmarker"; SMapEType.ClearMarkers = "clearmarkers"; SMapEType.MouseOver = "mouseover"; SMapEType.MouseOut = "mouseout"; SMapEType.MouseMove = "mousemove"; SMapEType.DragStart = "dragstart"; SMapEType.Draging = "drag"; SMapEType.DragEnd = "dragend"; SMapEType.MouseClick = "click"; SMapEType.SwitchLayer = "SwitchLayer"; SMapEType.KeyUp = "keyup"; SMapEType.ZoomEnd = "zoomend"; function SLayerBaseEType() { }
SLayerBaseEType.LoadStart = "loadstart"; SLayerBaseEType.LoadEnd = "loadend"; SLayerBaseEType.LoadCancel = "loadcancel"; SLayerBaseEType.VisibilityChanged = "visibilitychanged"; function STileEType() { }
STileEType.LoadStart = "loadstart"; STileEType.LoadEnd = "loadend"; STileEType.ReLoad = "reload"; function SDrawEventType() { }
SDrawEventType.SCompleteMonitor = "Complete"; SDrawEventType.MouseMoveMonitor = "DrawMoveMonitor"; SDrawEventType.MouseDownMonitor = "DrawMouseDownMonitor"; SDrawEventType.MouseUpMonitor = "DrawMouseUpMonitor"; SDrawEventType.DBClickMonitor = "DrawDBClickMonitor"; SDrawEventType.DrawFinalize = "DrawFinalize"; function SSystem() { }
SSystem.PointRadius = 6; SSystem.PerMapUnitMi = 94690.206; SSystem.PerDpiUnitPx = 2; SSystem.TileAttemptsCount = 3; function SObserver(QQ, RQ, SQ, tQ) { this.qO = QQ; this.FName = RQ == null ? "" : RQ; this.So = SQ; this.FUseCapture = tQ; }
SObserver.prototype.GetElement = function () { return this.qO; }
SObserver.prototype.GetName = function () { return this.FName; }
SObserver.prototype.GetObserver = function () { return this.So; }
SObserver.prototype.GetUseCapture = function () { return this.FUseCapture; }
function SMapParamOption() { this.Zoom = -1; this.FallThrough = false; this.Name = ""; this.Size = null; this.Center = null; this.TileSize = new SSize(256, 256); this.Resolutions = []; this.NumZoomLevels = 0; this.MaxExtent = new SBounds(); }
function SLayerBaseOptions() { this.IsMainLayer = null; this.Visibility = null; this.Attribute = null; this.TileSize = null; this.Projection = null; this.Resolutions = null; this.MaxExtent = null; this.NumZoomLevels = null; }
function STileLayerBaseOptions() { }
STileLayerBaseOptions.prototype = new SLayerBaseOptions();
function STileLayerOptions() { this.TileUrl = null; this.TileType = "png"; }
STileLayerOptions.prototype = new STileLayerBaseOptions();
function SFunction() { }
SFunction.Bind = function (vQ, FQ) { var wQ = Array.prototype.slice.apply(arguments, [2]); if (vQ != null) return function () { var lq = wQ.concat(Array.prototype.slice.apply(arguments, [0])); return vQ.apply(FQ, lq); } }
SFunction.BindAsEventListener = function (xQ, yQ) { return function (pEvt) { return xQ.call(yQ, pEvt || window.event); } }
function SString() { }
SString.StartsWith = function (Hq, ZR) { return (Hq.indexOf(ZR) == 0); }
SString.Contains = function (nR, ur) { return (nR.indexOf(ur) != -1); }
SString.Trim = function (DR) { return DR.replace(/^\s*(.*?)\s*$/, "$1"); }
SString.Camelize = function (or) { var cR = or.split('-'); var gR = cR[0]; for (var kr = 1; kr < cR.length; kr++) { var Mr = cR[kr]; gR += Mr.charAt(0).toUpperCase() + Mr.substring(1); } return gR; }
function SNumber() { }
SNumber.LimitSigDigs = function (Pr, qR) { var Tr; if (qR > 0) { Tr = parseFloat(Pr.toPrecision(qR)); } else { Tr = 0; } return Tr; }
function SElement() { }
SElement.Visible = function (Vr) { return SUtil.GetElement(pElement).style.display != 'none'; }
SElement.Hide = function () { for (var i = 0; i < arguments.length; i++) { var fr = SUtil.GetElement(arguments[i]); fr.style.display = 'none'; } }
SElement.Show = function () { for (var i = 0; i < arguments.length; i++) { var Wr = SUtil.GetElement(arguments[i]); Wr.style.display = ''; } }
SElement.Remove = function (lR) { var XR = SUtil.GetElement(lR); XR.parentNode.removeChild(XR); XR = null; }
SElement.RemoveAllChild = function (YR) { if (YR) { if (YR.childNodes) { while (YR.childNodes.length) { YR.removeChild(YR.childNodes[0]); } } } }
SElement.GetHeight = function (Hr) { pElement = SUtil.GetElement(pElement); return pElement.offsetHeight; }
SElement.GetStyle = function (zS, style) { zS = SUtil.GetElement(zS); var value = zS.style[SString.Camelize(style)]; if (!value) { if (document.defaultView && document.defaultView.getComputedStyle) { var ns = document.defaultView.getComputedStyle(zS, null); value = ns ? ns.getPropertyValue(style) : null; } else if (zS.currentStyle) { value = zS.currentStyle[SString.Camelize(style)]; } } var Bs = ['pLeft', 'pTop', 'pRight', 'pBottom']; if (window.opera && (SUtil.IndexOf(Bs, style) != -1) && (SElement.GetStyle(zS, 'pPosition') == 'static')) { value = 'auto'; } return value == 'auto' ? null : value; }
SElement.GetDimensions = function (us) { us = SUtil.GetElement(us); if (SElement.GetStyle(us, 'display') != 'none') { return { width: us.offsetWidth, height: us.offsetHeight }; } var Ds = us.style; var os = Ds.FVisibility; var cS = Ds.FPosition; Ds.FVisibility = 'hidden'; Ds.FPosition = 'absolute'; Ds.display = ''; var es = us.clientWidth; var gS = us.clientHeight; Ds.display = 'none'; Ds.FPosition = cS; Ds.FVisibility = os; return { width: es, height: gS }; }
SElement.GetElementBlankWidth = function (Ks) { if (Ks != null) { return Ks.style.paddingLeft + Ks.style.paddingRight; } return 0; }
SElement.GetElementBlankHeight = function (Ms) { if (Ms != null) { return Ms.style.paddingTop + Ms.style.paddingBottom; } return 0; }
function SUtil() { }
SUtil.__GSeqId = 1; SUtil.OnImageLoadErrorColor = "pink"; SUtil.__ThemeUrl = "Resource/Theme/StyleDefault/"; SUtil.CreateUid = function (PS) { if (PS == null) { PS = "pId"; } SUtil.__GSeqId += 1; return PS + SUtil.__GSeqId; }
SUtil.GetElement = function () { var Qs = []; for (var i = 0; i < arguments.length; i++) { var RS = arguments[i]; if (typeof RS == "string") { RS = document.getElementById(RS); } if (arguments.length == 1) { return RS; } Qs.push(RS); } return Qs; }
SUtil.Extend = function (Ss, tS) { if (Ss && tS) { for (var vs in tS) { Ss[vs] = tS[vs]; } if (tS.hasOwnProperty && tS.hasOwnProperty) { Ss.toString = tS.toString; } } return Ss; }
SUtil.RemoveItem = function (array, FS) { if (array == null) return; var WS = array.length - 1; for (var i = WS; i >= 0; i--) { if (array[i] == FS) { array.splice(i, 1); } } return array; }
SUtil.ClearArray = function (array) { array.length = 0; }
SUtil.IndexOf = function (array, lS) { for (var i = 0; i < array.length; i++) { if (array[i] == lS) return i; } return -1; }
SUtil.ModifyDOMElement = function (XS, YS, Hs, Zt, bt, Ut, CT, eT, GT) { if (YS) { XS.id = YS; } if (Hs) { XS.style.left = Hs.FX + "px"; XS.style.top = Hs.FY + "px"; } if (Zt) { if (Zt.FW != null) { XS.style.width = Zt.FW + "px"; } if (Zt.FH != null) { XS.style.height = Zt.FH + "px"; } } if (bt) { XS.style.position = bt; } if (Ut) { XS.style.border = Ut; } if (CT) { XS.style.overflow = CT; } if (parseFloat(eT) >= 0.0 && parseFloat(eT) < 1.0) { XS.style.filter += ' alpha(eT=' + (eT * 100) + ')'; XS.style.opacity = eT; } else if (parseFloat(eT) == 1.0) { XS.style.filter = ""; XS.style.opacity = ""; } if (GT != null) { XS.style.cursor = GT; } }
SUtil.CreateDiv = function (KT, Mt, pt, QT, Rt, fT, wT, Lt) { var YT = document.createElement("div"); if (QT) { YT.style.backgroundImage = "url(" + QT + ")"; } if (!KT) { KT = SUtil.CreateUid("s"); } if (!Rt) { Rt = "absolute"; } SUtil.ModifyDOMElement(YT, KT, Mt, pt, Rt, fT, wT, Lt); return YT; }
SUtil.CreateImage = function (zV, nv, BV, Uv, Dv, Ov, Cv, Gv) { var kv = document.createElement("img"); if (!zV) { zV = SUtil.CreateUid("s"); } if (!Dv) { Dv = "relative"; } SUtil.ModifyDOMElement(kv, zV, nv, BV, Dv, Ov, null, Cv); if (Gv) { kv.style.display = "none"; SEvent.Observe(kv, "load", SFunction.Bind(SUtil.OnImageLoad, kv)); SEvent.Observe(kv, "error", SFunction.Bind(SUtil.OnImageLoadError, kv)); } else { kv.style.display = "inline"; } kv.style.alt = zV; kv.galleryImg = "no"; if (Uv) { kv.src = Uv; } return kv; }
SUtil.SetOpacity = function (Mv, pV) { SUtil.ModifyDOMElement(Mv, null, null, null, null, null, null, pV); }
SUtil.OnImageLoad = function () { if (!this.FViewRequestID || (this.FMap && this.FViewRequestID == this.FMap.FViewRequestID)) { this.style.backgroundColor = "transparent"; this.style.display = ""; } }
SUtil.OnImageLoadError = function () { this._attemptsCount = (this._attemptsCount) ? (this._attemptsCount + 1) : 1; if (this._attemptsCount <= SSystem.TileAttemptsCount) { var qV = this.urls; if (qV && qV instanceof Array && qV.length > 1) { var src = this.src.toString(); var Rv, k; for (k = 0; Rv = qV[k]; k++) { if (src.indexOf(Rv) != -1) { break; } } var SV = Math.floor(qV.length * Math.random()); var TV = qV[SV]; k = 0; while (TV == Rv && k++ < 4) { SV = Math.floor(qV.length * Math.random()); TV = qV[SV]; } this.src = src.replace(Rv, TV); } else { this.src = this.src; } } else { this.src = SUtil.GetImagesLocation() + "noTileImg.png"; } this.style.display = ""; }
SUtil.BrowserType = function () { if (SBrowser.FType == SBrowserType.IE) { return true; } else if (SBrowser.FType == SBrowserType.FireFox) { return false; } else { return true; } }
SUtil.ModifyAlphaImageDiv = function (Vv, FV, wv, lV, XV, Yv, Hv, zf, NF, bf) { SUtil.ModifyDOMElement(Vv, FV, wv, lV, null, null, null, NF, bf); if (XV) { if (SBrowser.IsIE() && SBrowser.GetVersion() != 10) { if (zf == null) { zf = "scale"; } Vv.style.filter = "progid:DXImageTransform.Microsoft" + ".AlphaImageLoader(src='" + XV + "', " + "sizingMethod='" + zf + "')"; if (parseFloat(Vv.style.opacity) >= 0.0 && parseFloat(Vv.style.opacity) < 1.0) { Vv.style.filter += " alpha(NF=" + Vv.style.opacity * 100 + ")"; } } else { Vv.style.backgroundImage = "url(" + XV + ")"; Vv.className = "DivBgAuto"; } } }
SUtil.ModifyAlphaImageDiv2 = function (uF, DF, Of, Cf, gf, kf, Mf, PF, Qf) { SUtil.ModifyDOMElement(uF, DF, Of, Cf, null, null, null, Qf); if (SBrowser.FType == SBrowseType.FireFox) { } else if (SBrowser.FType == SBrowserType.IE) { } }
SUtil.CreateAlphaImageDiv = function (rf, sF, Tf, vf, fF, wF, lF, xF, Yf) { var hF = SUtil.CreateDiv(rf, sF, Tf, vf); SUtil.ModifyAlphaImageDiv(hF, rf, sF, Tf, vf, fF, wF, lF, xF); return hF; }
SUtil.CreateAlphaImageDiv3 = function (ZW, Nw, bW, Uw, DW, cW, GW, Kw, mW) { var pW = SUtil.CreateDiv(ZW, Nw, bW, Uw); if (Uw != null && Uw != "") { var qW = SUtil.CreateImage(null, null, null, null, null, null, null, false); qW.src = Uw; pW.appendChild(qW); } SUtil.ModifyDOMElement(pW, ZW, Nw, bW, DW, cW, GW, Kw, mW); return pW; }
SUtil.UpperCaseObject = function (RW) { var SW = {}; for (var TW in RW) { SW[TW.toUpperCase()] = RW[TW]; } return SW; }
SUtil.ApplyDefaults = function (to, Vw) { to = to || {}; for (var FW in Vw) { if (to[FW] === null || (Vw.hasOwnProperty && Vw.hasOwnProperty(FW) && !to.hasOwnProperty(FW))) { to[FW] = Vw[FW]; } } if (Vw.hasOwnProperty && Vw.hasOwnProperty("toString") && !to.hasOwnProperty("toString")) { to.toString = Vw.toString; } return to; }
SUtil.CloneObject = function (WW) { var Lw = {}; for (var XW in WW) { Lw[XW] = WW[XW]; } return Lw; }
SUtil.GetParameterString = function (yw) { var hw = []; for (var Zl in yw) { var value = yw[Zl]; if ((value != null) && (typeof value != 'function')) { var nl; if (typeof value == 'object' && value.constructor == Array) { var bL = []; for (var dL = 0, len = value.length; dL < len; dL++) { bL.push(encodeURIComponent(value[dL])); } nl = bL.join(","); } else { nl = encodeURIComponent(value); } hw.push(encodeURIComponent(Zl) + "=" + nl); } } return hw.join("&"); }
SUtil.Try = function () { var Ol = null; for (var i = 0; i < arguments.length; i++) { var cL = arguments[i]; try { Ol = cL(); } catch (e) { } } return Ol; }
SUtil.GetNodes = function (p, EL) { var GL = SUtil.Try(function () { return SUtil._getNodes(p.documentElement.childNodes, EL); }, function () { return SUtil._getNodes(p.childNodes, EL); }); return GL; }
SUtil._getNodes = function (kL, Ml) { var pl = []; for (var i = 0; i < kL.length; i++) { if (kL[i].nodeName == Ml) { pl.push(kL[i]); } } return pl; }
SUtil.MouseLeft = function (qL, rl) { var Sl = qL.relatedTarget ? qL.relatedTarget : qL.toElement; while (Sl != rl && Sl != null) { Sl = Sl.parentNode; } return Sl != rl; }
SUtil.Rad = function (tL) { return (tL * Math.PI / 180); }
SUtil.DistVincenty = function (VL, fl) { var a = 6378137, b = 6356752.3142, f = 1 / 298.257223563; var L = SUtil.Rad(fl.FLon - VL.FLon); var Wl = Math.atan((1 - f) * Math.tan(SUtil.Rad(VL.FLat))); var xL = Math.atan((1 - f) * Math.tan(SUtil.Rad(fl.FLat))); var HL = Math.sin(Wl), cosU1 = Math.cos(Wl); var zX = Math.sin(xL), cosU2 = Math.cos(xL); var NX = L, lambdaP = 2 * Math.PI; var bx = 20; while (Math.abs(NX - lambdaP) > 1e-12 && --bx > 0) { var ux = Math.sin(NX), cosLambda = Math.cos(NX); var Dx = Math.sqrt((cosU2 * ux) * (cosU2 * ux) + (cosU1 * zX - HL * cosU2 * cosLambda) * (cosU1 * zX - HL * cosU2 * cosLambda)); if (Dx == 0) { return 0; } var oX = HL * zX + cosU1 * cosU2 * cosLambda; var cX = Math.atan2(Dx, oX); var Gx = Math.asin(cosU1 * cosU2 * ux / Dx); var kx = Math.cos(Gx) * Math.cos(Gx); var MX = oX - 2 * HL * zX / kx; var qx = f / 16 * kx * (4 + f * (4 - 3 * kx)); lambdaP = NX; NX = L + (1 - qx) * f * Math.sin(Gx) * (cX + qx * Dx * (MX + qx * oX * (-1 + 2 * MX * MX))); } if (bx == 0) { return NaN; } var rx = kx * (a * a - b * b) / (b * b); var SX = 1 + rx / 16384 * (4096 + rx * (-768 + rx * (320 - 175 * rx))); var tx = rx / 1024 * (256 + rx * (-128 + rx * (74 - 47 * rx))); var vx = tx * Dx * (MX + tx / 4 * (oX * (-1 + 2 * MX * MX) - tx / 6 * MX * (-3 + 4 * Dx * Dx) * (-3 + 4 * MX * MX))); var s = b * SX * (cX - vx); var d = s.toFixed(3) / 1000; return d; }
SUtil.GetParameters = function (fx) { fx = fx || window.location.href; var Wx = ""; if (SString.contains(fx, '?')) { var LX = fx.indexOf('?') + 1; var Xx = SString.Contains(fx, "#") ? fx.indexOf('#') : fx.length; Wx = fx.substring(LX, Xx); } var YX = {}; var hX = Wx.split(/[&;]/); for (var i = 0, len = hX.length; i < len; ++i) { var ZY = hX[i].split('='); if (ZY[0]) { var Ny = decodeURIComponent(ZY[0]); var value = ZY[1] || ''; value = value.split(","); for (var BY = 0, jlen = value.length; BY < jlen; BY++) { value[BY] = decodeURIComponent(value[BY]); } if (value.length == 1) { value = value[0]; } YX[Ny] = value; } } return YX; }
SUtil.GetBrowserName = function () { var UY = ""; var dY = navigator.userAgent.toLowerCase(); if (dY.indexOf("opera") != -1) { UY = "opera"; } else if (dY.indexOf("msie") != -1) { UY = "msie"; } else if (dY.indexOf("safari") != -1) { UY = "safari"; } else if (dY.indexOf("mozilla") != -1) { if (dY.indexOf("firefox") != -1) { UY = "firefox"; } else { UY = "mozilla"; } } return UY; }
SUtil.GetScaleFromResolution = function (oy, cy) { if (cy == null) { cy = "degrees"; } var eY = oy * GlobeVar.INCHES_PER_UNIT[cy] * GlobeVar.DOTS_PER_INCH; return eY; }
SUtil.PagePosition = function (gy) { var Ky = 0, valueL = 0; var mY = gy; var pY = gy; while (mY) { if (mY == document.body) { if (pY && pY.style && pY.style.position == 'absolute') { break; } } Ky += mY.offsetTop || 0; valueL += mY.offsetLeft || 0; pY = mY; try { mY = mY.offsetParent; } catch (e) { break; } } mY = gy; while (mY) { Ky -= mY.scrollTop || 0; valueL -= mY.scrollLeft || 0; mY = mY.parentNode; } return [valueL, Ky]; }
SUtil.GetImagesLocation = function () { return SUtil.__ThemeUrl; }
SUtil.SetImagesLocation = function (QY) { if (QY) { SUtil.__ThemeUrl = QY; } }
SUtil.SetElementSize = function (ry, sy) { if (sy != null && ry != null) { if (ry.style) { ry.style.width = sy.FW + "px"; ry.style.height = sy.FH + "px"; } } }
SUtil.SetElementPosition = function (vY, fy) { if (fy != null && vY != null) { if (vY.style) { vY.style.top = fy.FY + "px"; vY.style.left = fy.FX + "px"; } } }
SUtil.GrayDom = function (Wy) { if (Wy != null) { if (Wy.getAttribute) { if (Wy.getAttribute("_gK") != null) { return; } } var LY = SUtil.CreateUid("G"); var xY = document.createAttribute("_gK"); xY.value = LY; Wy.setAttributeNode(xY); var yy = SUtil.CreateDiv(LY, new SPixel(0, 0), null, null, "absolute", 0, null, 0.7); yy.style.backgroundColor = "Gray"; yy.style.zIndex = GlobeVar.ZIndex.GrayDom; yy.style.width = "100%"; yy.style.height = "100%"; if (Wy.appendChild) { Wy.appendChild(yy); } LY = null; xY = null; yy = null; } Wy = null; }
SUtil.UnGrayDom = function (hY) { if (hY != null) { var zH = hY.getAttribute("_gK"); if (zH != null && zH != "") { var Nh = document.getElementById(zH); if (Nh != null) { if (hY.removeChild) { hY.removeChild(Nh); } } if (hY.removeAttribute) { hY.removeAttribute("_gK"); } Nh = null; } zH = null; } hY = null; }
SUtil.ObjectToArray = function (bH) { var Uh = []; if (bH != null) { var dh = typeof (bH); if (dh == "object" || dh == "function") { for (var Oh in bH) { var eh = bH[Oh]; if (typeof (eh) == "string" || typeof (eh) == "number") { Uh.push(eh); } eh = null; } } else if (dh == "string" || dh == "number") { Uh.push(bH); } } return Uh; }
SUtil.GetAdaptiveSize = function (kH, MH) { try { if (kH != null && MH != null && SString.Trim(MH) != "") { var PH = SUtil.CreateDiv(); PH.innerHTML = MH; PH.style.FVisibility = "hidden"; PH.style.wordBreak = "break-all"; document.body.appendChild(PH); var Qh = PH.clientHeight | PH.scrollHeight; var rh = PH.clientWidth | PH.scrollWidth; document.body.removeChild(PH); PH.style.width = "220px"; document.body.appendChild(PH); var SH = PH.clientHeight | PH.scrollHeight; document.body.removeChild(PH); PH = null; if (rh > 220) { return new SSize(rh, Qh); } else { var vh = Math.sqrt(Qh * rh / (kH.FW * kH.FH)); return new SSize(Math.ceil(kH.FW * vh) + 10, Math.ceil(kH.FH * vh) + 10); } } } catch (ee) { } return kH; }
SUtil.GetMaxBounds = function (Fh) { var lH = null; if (Fh != null && Fh instanceof Array && Fh.length > 0) { var xh = Fh[0].GetLon(); var bottom = Fh[0].GetLat(); var yh = Fh[0].GetLon(); var top = Fh[0].GetLat(); for (var m = 1; m < Fh.length; m++) { var x = Fh[m].GetLon(); var y = Fh[m].GetLat(); if (x < xh) { xh = x; } else if (x > yh) { yh = x; } if (y < bottom) { bottom = y; } else if (y > top) { top = y; } } lH = new SBounds(xh, bottom, yh, top); } return lH; }
SUtil.SetElementCssStyle = function (Hh, ZZn) { try { Hh.className = ZZn; } catch (_vvc) { } }
SUtil.SetElementZIndex = function (nZn, bzn) { try { nZn.style.zIndex = bzn; } catch (_vvc) { } }
SUtil.CreateElement = function (Uzn) { if (Uzn != null && Uzn != "") { return document.createElement(Uzn); } return null; }
SUtil.AssignElementBackground = function (dZN, OZN) { if (dZN != null && OZN != null) { try { dZN.style.background = "url(" + OZN + ")"; } catch (efdd) { } } }
SUtil.RandomBy = function (cZN, ezn) { switch (arguments.length) { case 1: return parseInt(Math.random() * cZN + 1); case 2: return parseInt(Math.random() * (ezn - cZN + 1) + cZN); default: return 0; } }
SUtil.GetAliquotsPointS = function (GZn, kzn) { var mZN = []; var PzN = new SPoint(0, 0); if (GZn != null) { var Qzn = kzn; var k = 0, b = 0; var x, y; if (GZn.length > 1) { for (var u = 0; u < GZn.length - 1; u++) { var Rzn = GZn[u]; if (u == 0) { mZN.push(Rzn); } if (GZn.length > u) { var Szn = GZn[u + 1]; var tzn = 0; var vZN = SPoint.CalcuDistance(Rzn, Szn); k = SUtil.GetSlope(Rzn, Szn); b = Rzn.GetY() - k * Rzn.GetX(); if (vZN > kzn) { while (vZN > kzn) { if (k != null) { if (Rzn.GetX() < Szn.GetX()) { x = Math.sqrt(kzn * kzn / (k * k + 1)) + Rzn.GetX(); } else if (Rzn.GetX() > Szn.GetX()) { x = -Math.sqrt(kzn * kzn / (k * k + 1)) + Rzn.GetX(); } else { x = Rzn.GetX(); } if (Rzn.GetY() < Szn.GetY()) { if (k == 0) { y = Rzn.GetY() + kzn; } else { y = k * x + b; } } else if (Rzn.GetY() > Szn.GetY()) { if (k == 0) { y = Rzn.GetY() - kzn; } else { y = k * x + b; } } else { y = Rzn.GetY(); } } else { x = Rzn.GetX(); if (Rzn.GetY() < Szn.GetY()) { y = Rzn.GetY() + kzn; } else { y = Rzn.GetY() - kzn; } } Rzn = new SPoint(x, y); mZN.push(Rzn); vZN = vZN - kzn; if (vZN <= kzn) { mZN.push(Szn); break; } } } else { mZN.push(Szn); } } } } } return mZN; }
SUtil.GetSlope = function (FZN, WZn) { if (FZN != null && WZn != null && (FZN.GetX() - WZn.GetX()) != 0) { return (FZN.GetY() - WZn.GetY()) / (FZN.GetX() - WZn.GetX()); } return null; }
SUtil.AddVectorStartUp = function () { if (!document.namespaces['v']) { if (!document.documentMode || document.documentMode < 7) { document.writeln('<xml:namespace ns="urn:schemas-microsoft-com:vml" prefix="v"/>\n'); document.writeln('<style type="text/css"> v\\:* { behavior: url(#default#VML);} </style>\n'); } else if (document.documentMode == 7) { var lzN; var xZN; document.namespaces.add('v'); lzN = document.createElement('object'); lzN.id = 'VMLRender'; lzN.codebase = 'vgx.dll'; lzN.classid = 'CLSID:10072CEC-8CC1-11D1-986E-00A0C955B42E'; document.body.appendChild(lzN); xZN = document.createStyleSheet(); xZN.addRule('v\\:*', "behavior: url(#default#VML);"); } else if (document.documentMode && document.documentMode >= 8) { var s = '<xml:namespace ns="urn:schemas-microsoft-com:vml" prefix="v"/>'; document.body.insertAdjacentHTML("afterbegin", s); try { addToDynamicStyleSheet('v\\:*', 'behavior: url(#default#VML)'); } catch (evsdf) { } } } }
function SEventTypes() { }
SEventTypes.SLayerBase = ["loadstart", "loadend", "loadcancel", "visibilitychanged"]; SEventTypes.SMapControl = ["addlayer", "removelayer", "changelayer", "movestart", "move", "moveend", "zoomend", "popupopen", "popupclose", "addmarker", "removemarker", "clearmarkers", "mouseover", "mouseout", "mousemove", "dragstart", "drag", "dragend", "changebaselayer"]; function GlobeVar() { }
GlobeVar.INCHES_PER_UNIT = { 'inches': 1.0, 'ft': 12.0, 'mi': 63360.0, 'm': 39.3701, 'km': 39370.1, 'dd': 4374754 }; GlobeVar.DOTS_PER_INCH = 72; GlobeVar.SMapETypeS = SUtil.ObjectToArray(SMapEType); GlobeVar.SLayerBaseETypeS = SUtil.ObjectToArray(SLayerBaseEType); GlobeVar.STileETypeS = SUtil.ObjectToArray(STileEType); GlobeVar.SFunctionName = "function"; GlobeVar.ZIndex = function () { }
function SResource() { }
SResource.SPopup = function () { }
SResource.SScale = function () { }
function mN() { }
mN.S___GridMap___SMarker_SIcon_MouseoveryO = function () { this.FIcon.ReDraw(this.FHoverIcon.FUrl, this.FHoverIcon.FSize, this.FHoverIcon.FOffset); }
mN.S___GridMap___SMarker_SIcon_MouseoutHo = function () { this.FIcon.ReDraw(this.FSourceIcon.FUrl, this.FSourceIcon.FSize, this.FSourceIcon.FOffset); }
mN.S___GridMap___SLabel_MouseoverZC = function () { SUtil.SetElementCssStyle(this.FDiv, this.FHoverCssStyle); }
mN.S___GridMap___SLabel_MouseoutNc = function () { SUtil.SetElementCssStyle(this.FDiv, this.FCssStyle); }
function SClassName() { }
SClassName.SBounds = "SBounds"; SClassName.SPixel = "SPixel"; SClassName.SSize = "SSize"; SClassName.SLonLat = "SLonLat"; SClassName.SElement = "SElement"; SClassName.STileLayer = "STileLayer"; SClassName.SNavigation = "SNavigation"; SClassName.SDrawControl = "SDrawControl"; SClassName.SDrawPointControl = "SDrawPointControl"; SClassName.SMeasure = "SMeasure"; SClassName.SPanDrag = "SPanDrag"; SClassName.SPanel = "SPanel"; SClassName.SPanZoom = "SPanZoom"; SClassName.SPanZoomBar = "SPanZoomBar"; SClassName.SPanZoomBar2 = "SPanZoomBar2"; SClassName.SToolBar = "toolbar"; SClassName.SToolBar2 = "SToolBar2"; SClassName.SZoomBox = "SZoomBox"; SClassName.SControlBase = "SControlBase"; SClassName.SEvent = "SEvent"; SClassName.SEvents = "SEvents"; SClassName.STileLayerBase = "STileLayerBase"; SClassName.SImage = "SImage"; SClassName.SLayerBase = "SDrawControl"; SClassName.SMap = "SDrawControl"; SClassName.SStyle = "SDrawControl"; SClassName.STile = "SDrawControl"; SClassName.SCircle = "SDrawControl"; SClassName.SCollection = "SCollection"; SClassName.SCurve = "SCurve"; SClassName.SGeometry = "SGeometry"; SClassName.SLinearRing = "SLinearRing"; SClassName.SLineString = "SLineString"; SClassName.SMultiLineString = "SMultiLineString"; SClassName.SMultiPolygon = "SMultiPolygon"; SClassName.SPoint = "SPoint"; SClassName.SPolygon = "SPolygon"; SClassName.SRectangle = "SRectangle"; SClassName.SHandler = "SHandler"; SClassName.SHBox = "SHBox"; SClassName.SHCircle = "SHCircle"; SClassName.SHPath = "SHPath"; SClassName.SHPoint = "SHPoint"; SClassName.SHPolygon = "SHPolygon"; SClassName.SHRectangle = "SHRectangle"; SClassName.SHRegularPolygon = "SHRegularPolygon"; SClassName.SHDrag = "SHDrag"; SClassName.SMMouseWheel = "SMMouseWheel"; SClassName.SMPanDrag = "SMPanDrag"; SClassName.SKeyEffect = "SKeyEffect"; SClassName.SMouseWheelEffect = "SMouseWheelEffect"; SClassName.S51Ditu = "S51Ditu"; SClassName.SDingTu = "SDingTu"; SClassName.SEdushi = "SEdushi"; SClassName.SGo2Map = "SGo2Map"; SClassName.SGoogle = "SGoogle"; SClassName.SMapabc = "SMapabc"; SClassName.SMapbar = "SMapbar"; SClassName.SVirtualEarth = "SVirtualEarth"; SClassName.SYahoo = "SYahoo"; SClassName.SAnchored = "SAnchored"; SClassName.SAnchoredBubble = "SAnchoredBubble"; SClassName.SFeatureVector = "SFeatureVector"; SClassName.SIcon = "SIcon"; SClassName.SInfoWindow = "SInfoWindow"; SClassName.SLabel = "SLabel"; SClassName.SMarker = "SMarker"; SClassName.SMarkerLayer = "SMarkerLayer"; SClassName.SVectorLayer = "SVectorLayer"; SClassName.SOVBase = "SOVBase"; SClassName.SWinPopupLO1 = "SWinPopupLO1"; SClassName.SGlobeVar = "SGlobeVar"; SClassName.SBrowser = "SBrowser"; SClassName.SJSExtend = "SJSExtend"; SClassName.SFeature = "SFeature"; SClassName.SFeatureDefaultEvents = "SFeatureDefaultEvents"; SClassName.SRenderer = "SRenderer"; SClassName.SVectorElement = "SVectorElement"; SClassName.SVectorSVG = "SVectorSVG"; SClassName.SVectorVML = "SVectorVML"; SClassName.SMultiPoint = "SMultiPoint"; SClassName.SOVMap = "SOVMap"; SClassName.SMPinch = "SMPinch"; SClassName.SPinch = "SPinch"; SClassName.SHKinetic = "SHKinetic"; function SBounds(yzN, hzN, zNn, NNN) { this.FLeft = null; this.FTop = null; this.FBottom = null; this.FRight = null; if (JSecurity.IsValid()) { this.Reset(yzN, NNN, zNn, hzN); } }
SBounds.prototype.ClassName = SClassName.SBounds; SBounds.prototype.GetLeft = function () { return this.FLeft; }
SBounds.prototype.GetRight = function () { return this.FRight; }
SBounds.prototype.GetBottom = function () { return this.FBottom; }
SBounds.prototype.GetTop = function () { return this.FTop; }
SBounds.prototype.Clone = function () { return new SBounds(this.FLeft, this.FBottom, this.FRight, this.FTop); }
SBounds.prototype.Equals = function (Bnn) { var uNn = false; if (Bnn != null) { uNn = (this.FLeft == Bnn.FLeft) && (this.FRight == Bnn.FRight) && (this.FTop == Bnn.FTop) && (this.FBottom == Bnn.FBottom); } return uNn; }
SBounds.prototype.Equals2 = function (DnN, oNN, cnN, enn) { return this.Equals(new SBounds(DnN, oNN, cnN, enn)); }
SBounds.prototype.ToString = function () { return "l:" + this.FLeft + " t:" + this.FTop + " r:" + this.FRight + " b:" + this.FBottom; }
SBounds.prototype.ToArray = function () { }
SBounds.prototype.GetWidth = function () { return Math.abs(this.FRight - this.FLeft); }
SBounds.prototype.SetLeft = function (gnN) { this.FLeft = gnN; }
SBounds.prototype.SetTop = function (KNN) { this.FTop = KNN; }
SBounds.prototype.SetBottom = function (mNN) { this.FBottom = mNN; }
SBounds.prototype.SetRight = function (PNn) { this.FRight = PNn; }
SBounds.prototype.GetHeight = function () { return Math.abs(this.FTop - this.FBottom); }
SBounds.prototype.GetSize = function () { return new SSize(this.GetWidth(), this.GetHeight()); }
SBounds.prototype.GetCPixel = function () { return new SPixel((this.FLeft + this.FRight) / 2, (this.FBottom + this.FTop) / 2); }
SBounds.prototype.GetCLonLat = function () { return new SLonLat((this.FLeft + this.FRight) / 2, (this.FBottom + this.FTop) / 2); }
SBounds.prototype.Extend2 = function (QNn, rNn) { if (QNn == null || isNaN(QNn) == false || isNaN(rNn) == false || rNn == null) { return; } if (QNn < this.FLeft) { this.FLeft = QNn; } else if (QNn > this.FRight) { this.FRight = QNn; } if (rNn < this.FBottom) { this.FBottom = rNn; } else if (rNn > this.FTop) { this.FTop = rNn; } }
SBounds.prototype.Move = function (width, height) { if (width == null || isNaN(width) == false || isNaN(height) == false || height == null) { return; } this.FLeft = this.FLeft + width; this.FBottom = this.FBottom + height; this.FRight = this.FRight + width; this.FTop = this.FTop + height; }
SBounds.prototype.Extend = function (Snn) { var tnN = null; if (Snn) { switch (Snn.ClassName) { case SClassName.SLonLat: tnN = new SBounds(Snn.GetLon(), Snn.GetLat(), Snn.GetLon(), Snn.GetLat()); break; case SClassName.SPoint: tnN = new SBounds(Snn.GetX(), Snn.GetY(), Snn.GetX(), Snn.GetY()); break; case SClassName.SBounds: tnN = Snn; break; } if (tnN) { if ((this.FLeft == null) || (tnN.FLeft < this.FLeft)) { this.FLeft = tnN.FLeft; } if (this.FBottom == null || (tnN.FBottom < this.FBottom)) { this.FBottom = tnN.FBottom; } if (this.FRight == null || (tnN.FRight > this.FRight)) { this.FRight = tnN.FRight; } if (this.FTop == null || (tnN.FTop > this.FTop)) { this.FTop = tnN.FTop; } } } }
SBounds.prototype.Inclusive = function (vNN, fnn) { if (vNN == null) return false; if (fnn == null) { fnn = true; } var WNn = vNN; var Lnn = false; if (vNN.ClassName == SClassName.SPixel) { WNn = vNN; } else if (vNN.ClassName == SClassName.LonLat) { WNn = new SPixel(vNN.FLon, vNN.FLat); } if (fnn) { Lnn = (WNn.GetX() >= this.FLeft) && (WNn.GetX() <= this.FRight) && (WNn.GetY() >= this.FBottom) && (WNn.GetY() <= this.FTop); } else { Lnn = (WNn.GetX() > this.FLeft) && (WNn.GetX() < this.FRight) && (WNn.GetY() > this.FBottom) && (WNn.GetY() < this.FTop); } return Lnn; }
SBounds.prototype.CrossBnd = function (XNN, YNn) { if (YNn == null) { YNn = true; } var hnn = ((XNN.FBottom == this.FBottom) && (XNN.FTop == this.FTop)) ? true : ((XNN.FBottom > this.FBottom) && (XNN.FBottom < this.FTop)) || ((this.FBottom > XNN.FBottom) && (this.FBottom < XNN.FTop)); var zBN = ((XNN.FBottom == this.FBottom) && (XNN.FTop == this.FTop)) ? true : ((XNN.FTop > this.FBottom) && (XNN.FTop < this.FTop)) || ((this.FTop > XNN.FBottom) && (this.FTop < XNN.FTop)); var nbn = ((XNN.FRight == this.FRight) && (XNN.FLeft == this.FLeft)) ? true : ((XNN.FRight > this.FLeft) && (XNN.FLeft < this.FRight)) || ((this.FRight > XNN.FLeft) && (this.FRight < XNN.FRight)); var BBn = ((XNN.FRight == this.FRight) && (XNN.FLeft == this.FLeft)) ? true : ((XNN.FLeft < this.FLeft) && (XNN.FLeft < this.FRight)) || ((this.FLeft > XNN.FLeft) && (this.FLeft < XNN.FRight)); var Ubn = this.Inclusive(XNN, YNn, true); var Dbn = XNN.Inclusive(this, YNn, true); return (Ubn || Dbn || ((zBN || hnn) && (BBn || nbn))); }
SBounds.prototype.CalcQuadrant = function (obN) { var CBn = ""; var EBn = this.GetCLonLat(); CBn = CBn + (obN.GetLat() < EBn.GetLat()) ? "b" : "t"; CBn = CBn + (obN.GetLon() < EBn.GetLon()) ? "l" : "r"; return CBn; }
SBounds.prototype.Reset = function (GbN, kbn, mBN, pBn) { this.FLeft = null; this.FTop = null; this.FBottom = null; this.FRight = null; if (GbN != null) { this.FLeft = parseFloat(GbN); } if (pBn != null) { this.FBottom = parseFloat(pBn); } if (mBN != null) { this.FRight = parseFloat(mBN); } if (kbn != null) { this.FTop = parseFloat(kbn); } }
SBounds.prototype.FromString = function (QBn) { }
SBounds.prototype.FromArray = function (arr) { }
SBounds.prototype.ContainsPixel = function (rbN, sbn) { return this.Contains(rbN.FX, rbN.FY, sbn); }
SBounds.prototype.ContainsLonLat = function (ll, tbN) { return this.Contains(ll.FLon, ll.FLat, tbN); }
SBounds.prototype.Contains = function (VbN, FBN, WBN) { if (WBN == null) { WBN = true; } var lBN = false; if (WBN) { lBN = ((VbN >= this.FLeft) && (VbN <= this.FRight) && (FBN >= this.FBottom) && (FBN <= this.FTop)); } else { lBN = ((VbN > this.FLeft) && (VbN < this.FRight) && (FBN > this.FBottom) && (FBN < this.FTop)); } return lBN; }
SBounds.prototype.GetCenterLonLat = function () { return new SLonLat((this.FLeft + this.FRight) / 2, (this.FBottom + this.FTop) / 2); }
SBounds.prototype.GetCenterPixel = function () { return new SPixel((this.FLeft + this.FRight) / 2, (this.FBottom + this.FTop) / 2); }
SBounds.prototype.IntersectsBounds = function (xbn, yBn) { if (yBn == null) { yBn = true; } var hBN = (xbn.FBottom == this.FBottom && xbn.FTop == this.FTop) ? true : (((xbn.FBottom > this.FBottom) && (xbn.FBottom < this.FTop)) || ((this.FBottom > xbn.FBottom) && (this.FBottom < xbn.FTop))); var zuN = (xbn.FBottom == this.FBottom && xbn.FTop == this.FTop) ? true : (((xbn.FTop > this.FBottom) && (xbn.FTop < this.FTop)) || ((this.FTop > xbn.FBottom) && (this.FTop < xbn.FTop))); var nUn = (xbn.FRight == this.FRight && xbn.FLeft == this.FLeft) ? true : (((xbn.FRight > this.FLeft) && (xbn.FRight < this.FRight)) || ((this.FRight > xbn.FLeft) && (this.FRight < xbn.FRight))); var buN = (xbn.FRight == this.FRight && xbn.FLeft == this.FLeft) ? true : (((xbn.FLeft > this.FLeft) && (xbn.FLeft < this.FRight)) || ((this.FLeft > xbn.FLeft) && (this.FLeft < xbn.FRight))); return (this.ContainsBounds(xbn, true, yBn) || xbn.ContainsBounds(this, true, yBn) || ((zuN || hBN) && (buN || nUn))); }
SBounds.prototype.ContainsBounds = function (uUn, dUN, oUn) { if (dUN == null) { dUN = false; } if (oUn == null) { oUn = true; } var cuN = this.Contains(uUn.FLeft, uUn.FBottom, oUn); var euN = this.Contains(uUn.FRight, uUn.FBottom, oUn); var gUn = this.Contains(uUn.FLeft, uUn.FTop, oUn); var kUN = this.Contains(uUn.FRight, uUn.FTop, oUn); return (dUN) ? (cuN || euN || gUn || kUN) : (cuN && euN && gUn && kUN); }
SBounds.prototype.MoveToContainsTheBound = function (mUn) { this.MoveToContainsTheLonLat(new SLonLat(mUn.FLeft, mUn.FBottom)); this.MoveToContainsTheLonLat(new SLonLat(mUn.FRight, mUn.FTop)); }
SBounds.prototype.MoveToContainsThePixel = function (PuN) { if (PuN) { if (PuN.FX < this.FLeft) { this.FRight = this.FRight - (this.FLeft - PuN.FX); this.FLeft = PuN.FX; } else if (PuN.FX > this.FRight) { this.FLeft = this.FLeft + PuN.FX - this.FRight; this.FRight = PuN.FX; } if (PuN.FY < this.FBottom) { this.FTop = this.FTop - (this.FBottom - PuN.FY); this.FBottom = PuN.FY; } else if (PuN.FY > this.FTop) { this.FBottom = this.FBottom + PuN.FY - this.FTop; this.FTop = PuN.FY; } } }
SBounds.prototype.MoveToContainsTheLonLat = function (quN) { if (quN) { this.MoveToContainsThePixel(new SPixel(quN.FLon, quN.FLat)); } }
SBounds.OppositeQuadrant = function (rUn) { var sun = ""; sun += (rUn.charAt(0) == 't') ? 'b' : 't'; sun += (rUn.charAt(1) == 'l') ? 'r' : 'l'; return sun; }
SBounds.CreateByLonLatArray = function (TUn) { var VUN = new SBounds(10000, 10000, -10000, -10000); if (TUn != null) { for (var m = 0; m < TUn.length; m++) { var FUn = TUn[m].FLon; var WUn = TUn[m].FLat; if (VUN.FLeft > FUn) { VUN.FLeft = FUn; } else if (VUN.FRight < FUn) { VUN.FRight = FUn; } if (VUN.FTop < WUn) { VUN.FTop = WUn; } else if (VUN.FBottom > WUn) { VUN.FBottom = WUn; } } } return VUN; }
function SPixel(LuN, xUn) { this.FX = 0; this.FY = 0; this.Reset(LuN, xUn); }
SPixel.prototype.ClassName = SClassName.SPixel; SPixel.prototype.Reset = function (yUN, HUn) { if (JSecurity.IsValid()) { if (yUN != null) { this.FX = yUN; } if (HUn != null) { this.FY = HUn; } } }
SPixel.prototype.Add = function (Zdn, nDN) { if (Zdn != null && nDN != null) { return new SPixel(this.FX + Zdn, this.FY + nDN); } return SPixel(this.FX, this.FY); }
SPixel.prototype.Reduce = function (bdN, Udn) { if (bdN) { this.FX = this.FX - bdN; } if (Udn) { this.FY = this.FY - Udn; } }
SPixel.prototype.GetX = function () { return this.FX; }
SPixel.prototype.GetY = function () { return this.FY; }
SPixel.prototype.Clone = function () { return new SPixel(this.FX, this.FY); }
SPixel.prototype.Equals = function (DDn) { var Odn = false; if (DDn != null) { Odn = ((this.FX == DDn.FX && this.FY == DDn.FY) || (isNaN(this.FX) && isNaN(this.FY) && isNaN(DDn.FX) && isNaN(DDn.FY))); } return Odn; }
SPixel.prototype.Equals2 = function (cDN, EDN) { return this.Equals(new SPixel(cDN, EDN)); }
SPixel.prototype.Offset = function (gdN) { var kdN = this.Clone(); if (gdN) { kdN = this.Add(gdN.FX, gdN.FY); } return kdN; }
SPixel.prototype.FromString = function (mdn) { var PDn = mdn.split(","); return new SPixel(parseFloat(PDn[0]), parseFloat(PDn[1])); }
SPixel.prototype.FromStringBySplitChar = function (qDn, RDN) { var sDN = qDn.split(RDN); return new SPixel(parseFloat(sDN[0]), parseFloat(sDN[1])); }
SPixel.prototype.FromStringBySpace = function (TDn) { var vdN = TDn.split(" "); return new SPixel(parseFloat(vdN[0]), parseFloat(vdN[1])); }
SPixel.prototype.FromStringByComma = function (FDN) { return this.FromString(FDN); }
function SLonLat(WDN, LdN) { this.FLon = 0.0; this.FLat = 0.0; if (JSecurity.IsValid()) { this.Reset(WDN, LdN); } }
SLonLat.prototype.ClassName = SClassName.SLonLat; SLonLat.prototype.GetLat = function () { return this.FLat; }
SLonLat.prototype.GetLon = function () { return this.FLon; }
SLonLat.prototype.Reset = function (xdN, yDn) { if (xdN != null) { this.FLon = parseFloat(xdN); } if (yDn != null) { this.FLat = parseFloat(yDn); } }
SLonLat.prototype.SetLon = function (HDn) { this.Reset(HDn, null); }
SLonLat.prototype.SetLat = function (Zon) { this.Reset(null, Zon); }
SLonLat.prototype.Clone = function () { return new SLonLat(this.FLon, this.FLat); }
SLonLat.prototype.Add = function (NOn, BON) { if (NOn != null) { this.FLon = this.FLon + NOn; } if (BON != null) { this.FLat = this.FLat + BON; } }
SLonLat.prototype.Reduce = function (uoN, dON) { if (uoN) { this.FLon = this.FLon - uoN; } if (dON) { this.FLat = this.FLat - dON; } }
SLonLat.prototype.Equals = function (oON) { if (oON) { if (this.FLon == oON.FLon && this.FLat == oON.FLat && !isNaN(oON.FLon) && !isNaN(oON.FLat)) { return true; } } return false; }
SLonLat.prototype.Equals2 = function (eON, gon) { return this.Equals(new SLonLat(eON, gon)); }
SLonLat.prototype.FromString = function (KOn) { var mON = KOn.split(","); return new SLonLat(parseFloat(mON[0]), parseFloat(mON[1])); }
SLonLat.prototype.FromStringBySplitChar = function (pon, qON) { var ROn = pon.split(qON); return new SLonLat(parseFloat(ROn[0]), parseFloat(ROn[1])); }
SLonLat.prototype.FromStringBySpace = function (soN) { var tOn = soN.split(" "); return new SLonLat(parseFloat(tOn[0]), parseFloat(tOn[1])); }
SLonLat.prototype.FromStringByComma = function (voN) { return this.FromString(voN); }
function SSize(FoN, wOn) { this.FW = 0; this.FH = 0; this.Reset(FoN, wOn); }
SSize.prototype.ClassName = SClassName.SSize; SSize.prototype.Reset = function (LOn, XoN) { if (JSecurity.IsValid()) { if (LOn != null) { this.FW = LOn; } if (XoN != null) { this.FH = XoN; } } }
SSize.prototype.Add = function (YON, HoN) { if (YON) { this.FW = this.FW + YON; } if (HoN) { this.FH = this.FH + HoN; } }
SSize.prototype.Reduce = function (Zcn, NCn) { if (Zcn) { this.FW = this.FW - Zcn; } if (NCn) { this.FH = this.FH - NCn; } }
SSize.prototype.Clone = function () { return new SSize(this.FW, this.FH); }
SSize.prototype.GetWidth = function () { return this.FW; }
SSize.prototype.GetHeight = function () { return this.FH; }
SSize.prototype.Equals = function (Bcn) { var uCn = false; if (Bcn != null) { uCn = ((this.FW == Bcn.FW && this.FH == Bcn.FH) || (isNaN(this.FW) && isNaN(this.FH) && isNaN(Bcn.FW) && isNaN(Bcn.FH))); } return uCn; }
SSize.prototype.Equals2 = function (dCN, ocn) { return this.Equals(new SSize(dCN, ocn)); }
SSize.prototype.FromString = function (cCN) { var EcN = cCN.split(","); return new SSize(parseFloat(EcN[0]), parseFloat(EcN[1])); }
SSize.prototype.FromStringBySplitChar = function (GCN, kcN) { var mCn = GCN.split(kcN); return new SSize(parseFloat(mCn[0]), parseFloat(mCn[1])); }
SSize.prototype.FromStringBySpace = function (PcN) { var QcN = PcN.split(" "); return new SSize(parseFloat(QcN[0]), parseFloat(QcN[1])); }
SSize.prototype.FromStringByComma = function (rCn) { return this.FromString(rCn); }
function vn() { this.FType = 0; this.FVersion = 0; this.FName = "IE"; this.FOS = null; var SCn = navigator.userAgent.toLowerCase(); if (SCn.indexOf("opera") != -1) { this.FType = 4; if (SCn.indexOf("opera/7") != -1 || SCn.indexOf("opera 7") != -1) { this.FVersion = 7; } else if (SCn.indexOf("opera/8") != -1 || SCn.indexOf("opera 8") != -1) { this.FVersion = 8; }; this.FName = "opera"; } else if (SCn.indexOf("msie") != -1 && document.all) { this.FType = 1; if (SCn.indexOf("msie 8") != -1) { this.FVersion = 8; } else if (SCn.indexOf("msie 10") != -1) { this.FVersion = 10; } else if (SCn.indexOf("msie 7") != -1) { this.FVersion = 7; } else if (SCn.indexOf("msie 6") != -1) { this.FVersion = 6; } else if (SCn.indexOf("msie 5") != -1) { this.FVersion = 5; } this.FName = "msie"; } else if (SCn.indexOf("safari") != -1) { this.FType = 3; this.FName = "safari"; } else if (SCn.indexOf("mozilla") != -1) { this.FType = 2; this.FName = "mozilla"; }; if (SCn.indexOf("x11;") != -1) { this.FOS = 1; } else if (SCn.indexOf("macintosh") != -1) { this.FOS = 2; this.FName = "mac"; }; }
vn.prototype.GetType = function () { return this.FType; }
vn.prototype.GetOS = function () { return this.FOS; }
vn.prototype.GetName = function () { return this.FName; }
vn.prototype.GetVersion = function () { return this.FVersion; }
vn.prototype.IsIE = function () { if (this.FType == SBrowserType.IE) { return true; } return false; }
vn.prototype.GetOffsetX = function (evt) { if (this.FType == SBrowserType.IE) { return evt.offsetX; } return evt.layerX; }
vn.prototype.GetOffsetY = function (evt) { if (this.FType == SBrowserType.IE) { return evt.offsetY; } return evt.layerY; }
function SBrowserType() { }
SBrowserType.IE = 1; SBrowserType.FireFox = 2; SBrowserType.Safari = 3; SBrowserType.Opera = 4; SBrowserType.Null = 10; function SEvent() { }
SEvent.Observers = null; SEvent.KEY_BACKSPACE = 8; SEvent.KEY_TAB = 9; SEvent.KEY_RETURN = 13; SEvent.KEY_ESC = 27; SEvent.KEY_LEFT = 37; SEvent.KEY_UP = 38; SEvent.KEY_DOWN = 40; SEvent.KEY_DELETE = 46; SEvent.Element = function (TCn) { return TCn.target || TCn.srcElement; }
SEvent.IsLeftClick = function (Vcn) { return ((Vcn.which && Vcn.which == 1) || (Vcn.button & Vcn.button == 1)); }
SEvent.Stop = function (fCN, wCN) { if (!wCN) { if (fCN.preventDefault) { fCN.preventDefault(); } else { fCN.returnValue = false; } } if (fCN.stopPropagation) { fCN.stopPropagation(); } else { fCN.cancelBubble = true; } }
SEvent.Stop2 = function (lCn, Xcn) { if (!Xcn) { if (lCn.preventDefault) { lCn.preventDefault(); } else { lCn.returnValue = false; } } if (lCn.stopPropagation) { lCn.stopPropagation(); } else { lCn.cancelBubble = true; } }
SEvent.FindElement = function (YCn, hCn) { var ZEn = SEvent.Element(YCn); while (ZEn.parentNode && (!ZEn.tagName || (ZEn.tagName.toUpperCase() != hCn.toUpperCase()))) { ZEn = ZEn.parentNode; } return ZEn; }
SEvent.Observe = function (NEn, BEN, UEn, DEn) { var oEN = SUtil.GetElement(NEn); DEn = DEn || false; if (BEN == "keypress" && (navigator.appVersion.match(/ Konqueror | Safari | KHTML /) || oEN.attachEvent)) { BEN = "keydown"; } if (!this.Observers) { this.Observers = {}; } if (!oEN.evtCacheId) { var CeN = "evtCacheId"; if (oEN.FId) { CeN = oEN.FId + CeN; } oEN.evtCacheId = SUtil.CreateUid(CeN); } var een = oEN.evtCacheId; if (!this.Observers[een]) { this.Observers[een] = []; } var geN = new SObserver(oEN, BEN, UEn, DEn); this.Observers[een].push(geN); if (oEN.addEventListener) { oEN.addEventListener(BEN, UEn, DEn); } else if (oEN.attachEvent) { oEN.attachEvent("on" + BEN, UEn); } }
SEvent.StopObservingEle = function (keN) { var MEn = SUtil.GetElement(keN); var PEN = MEn.evtCacheId; this.RemoveEleObservers(SEvent.Observers[PEN]); }
SEvent.RemoveEleObservers = function (qeN) { if (qeN) { for (var i = qeN.length - 1; i >= 0; i--) { var rEn = qeN[i]; var sen = new Array(rEn.qO, rEn.FName, rEn.pObserver, rEn.pUseCapture); var teN = SEvent.Stop.apply(this, sen); } } }
SEvent.StopObserving = function (vEn, fen, WEn, Len) { Len = Len || false; var XEN = SUtil.GetElement(vEn); var yeN = XEN.evtCacheId; if (fen == "keypress" && (navigator.appVersion.match(/ Konqueror | Safari | KHTML /) || pEle.attachEvent)) { fen = "keydown"; } var zGn = false; var nGN = SEvent.Observers[yeN]; if (nGN) { var i = 0; while (!zGn && i < nGN.length) { var bgN = nGN[i]; if (bgN.FName = fen && bgN.pObserver == WEn && bgN.pUseCapture == Len) { nGN.splice(i, 1); if (nGN.length == 0) { delete SEvent.Observers[yeN]; } zGn = true; break; } i++; } } if (XEN.removeEventListener) { XEN.removeEventListener(fen, WEn, Len); } else if (XEN && XEN.detachEvent) { XEN.detachEvent("on" + fen, WEn); } return zGn; }
SEvent.UnloadCache = function () { if (SEvent.Observers) { for (cacheId in SEvent.Observers) { var ugn = SEvent.Observers[cacheId]; SEvent.RemoveEleObservers.apply(this, [ugn]); } SEvent.Observers = false; } }
SEvent.IsSingleTouch = function (dGn) { return dGn.touches && dGn.touches.length == 1; }
SEvent.IsMultiTouch = function (OgN) { return OgN.touches && OgN.touches.length > 1; }
function SEvents(CGn, egn, gGn) { this.FListeners = null; this.FObject = CGn; this.qO = egn; this.FEvtTypes = gGn; this.FFallThrough = false; this.FDisable = false; this.FListeners = {}; this.FEvtHandler = SFunction.BindAsEventListener(this.HandleBrowserEvent, this); if (this.FEvtTypes != null) { for (var i = 0; i < this.FEvtTypes.length; i++) { this.AddEvtType(this.FEvtTypes[i]); } } if (this.qO != null) { this.AttachToElement(egn); } }
SEvents.prototype.DOMEvents = ["mouseover", "mouseout", "mousedown", "mouseup", "mousemove", "click", "dblclick", "resize", "focus", "blur", "mousewheel", "DOMMouseScroll", "touchstart", "touchmove", "touchend"]; SEvents.prototype.ClassName = SClassName.SEvents; SEvents.prototype.TriggerEventListener = SEvents.prototype.TriggerEvent; SEvents.prototype.Disable = function (kGn) { if (kGn != null) { if (kGn) { this.FDisable = true; } else { this.FDisable = false; } } }
SEvents.prototype.SetFallThrough = function (mgn) { if (mgn) { this.FFallThrough = mgn; } }
SEvents.prototype.Destroy = function () { this.qO = null; this.FListeners = null; this.FObject = null; this.FEvtTypes = null; this.FFallThrough = null; this.FEvtHandler = null; }
SEvents.prototype.AddEvtType = function (PGN) { if (!this.FListeners[PGN]) { this.FListeners[PGN] = []; } }
SEvents.prototype.AttachToElement = function (Qgn) { for (var i = 0; i < this.DOMEvents.length; i++) { var rgn = this.DOMEvents[i]; this.AddEvtType(rgn); SEvent.Observe(Qgn, rgn, this.FEvtHandler); } SEvent.Observe(Qgn, "dragstart", SEvent.Stop); }
SEvents.prototype.Register = function (sGn, tGN, vgN) { if (vgN != null) { if (tGN == null) { tGN = this.FObject; } var fgN = this.FListeners[sGn]; if (fgN != null) { var wgn = new SObserver(tGN, sGn, vgN); fgN.push(wgn); } } }
SEvents.prototype.RegisterPriority = function (lGN, Xgn, YGn) { if (YGn != null) { if (Xgn == null) { Xgn = this.FObject; } var Hgn = this.FListeners[lGN]; if (Hgn != null) { var zkn = new SObserver(Xgn, lGN, YGn); Hgn.unshift(zkn); } } }
SEvents.prototype.AddEventListener = function (nkn, BKN, ukn, DKN) { if (DKN == null) { DKN = false; } if (DKN) { this.Register(nkn, BKN, ukn); } else { this.RegisterPriority(nkn, BKN, ukn); } }
SEvents.prototype.ReleaseEventListener = function (OKn, cKn, ekN) { this.UnRegister(OKn, cKn, ekN); }
SEvents.prototype.UnRegister = function (GKn, kKN, Mkn) { if (kKN == null) { kKN = this.FObject; } var pKn = this.FListeners[GKn]; if (pKn != null) { for (var i = 0; i < pKn.length; i++) { if (pKn[i].qO == kKN && pKn[i].So == Mkn) { pKn.splice(i, 1); break; } } } }
SEvents.prototype.Remove = function (QKN) { if (this.FListeners[QKN] != null) { this.FListeners[QKN] = []; } }
SEvents.prototype.TriggerEvent = function (Rkn, SkN, tkn) { if (this.FDisable) { return false; } if (SkN == null) { SkN = {}; } SkN.FObject = this.FObject; SkN.qO = this.qO; if (!tkn) { tkn = [SkN]; } else { tkn.unshift(SkN); } if (Rkn == "touchend") { var a = ""; } var VKn = this.FListeners[Rkn] ? this.FListeners[Rkn].slice() : null; if (VKn != null && VKn.length > 0) { for (var i = 0; i < VKn.length; i++) { var FKn = VKn[i]; var WkN; if (FKn.qO != null) { if (tkn.length == 1) { WkN = FKn.So.call(FKn.qO, tkn[0]); } else { WkN = FKn.So.call(FKn.qO, tkn); } } else { if (tkn.length == 1) { WkN = FKn.So(SkN); } else { WkN = FKn.So(tkn); } } if (WkN != null && WkN == false) { break; } } if (!this.FFallThrough) { } } }
SEvents.prototype.HandleBrowserEvent = function (LKN) { var xKn = LKN.touches; if (xKn && xKn[0]) { var x = 0; var y = 0; var ykN = xKn.length; var HkN; for (var i = 0; i < ykN; ++i) { HkN = this._GetTouchClientXY(xKn[i]); x += HkN.clientX; y += HkN.clientY; } LKN.clientX = x / ykN; LKN.clientY = y / ykN; } LKN.pXY = this.GetMousePosition(LKN); if (isNaN(LKN.pXY.FX)) { var zmn = "aa"; } if (xKn && xKn[0]) { var x = 0; var y = 0; var ykN = xKn.length; var HkN; for (var i = 0; i < ykN; ++i) { HkN = this._GetTouchClientXY(xKn[i]); x += HkN.clientX; y += HkN.clientY; } LKN.clientX = x / ykN; LKN.clientY = y / ykN; } LKN.pXY = this.GetMousePosition(LKN); if (isNaN(LKN.pXY.FX)) { var zmn = "aa"; } LKN.RelativeXY = LKN.pXY; if (LKN.pXY.GetX() < 50 && LKN.type == "click") { var t = 1; } this.TriggerEvent(LKN.type, LKN) }
SEvents.prototype._GetTouchClientXY = function (evt) { var NMn = window.olMockWin || window, winPageX = NMn.pageXOffset, winPageY = NMn.pageYOffset, x = evt.clientX, y = evt.clientY; if (evt.pageY === 0 && Math.floor(y) > Math.floor(evt.pageY) || evt.pageX === 0 && Math.floor(x) > Math.floor(evt.pageX)) { x = x - winPageX; y = y - winPageY; } else if (y < (evt.pageY - winPageY) || x < (evt.pageX - winPageX)) { x = evt.pageX - winPageX; y = evt.pageY - winPageY; } evt.olClientX = x; evt.olClientY = y; return { clientX: x, clientY: y }; }
SEvents.prototype.GetMousePosition = function (bMN) { if (!this.qO.offsets) { this.qO.offsets = SUtil.PagePosition(this.qO); this.qO.offsets[0] += (document.documentElement.scrollLeft || document.body.scrollLeft); this.qO.offsets[1] += (document.documentElement.scrollTop || document.body.scrollTop); } var UmN = this.qO.offsets[0]; var dMn = this.qO.offsets[1]; return new SPixel((bMN.clientX + (document.documentElement.scrollLeft || document.body.scrollLeft)) - UmN - (document.documentElement.clientLeft || 0), (bMN.clientY + (document.documentElement.scrollTop || document.body.scrollTop)) - dMn - (document.documentElement.clientTop || 0)); }
SEvents.CancelBubble = function (OMN) { var CMN = SEvents.prototype.DOMEvents; }
function SInfoWindow(emn, GMN, kMn, innerHTML) { this.FIsMove = false; this.FMapCenter = null; this.FAutoSize = false; this.FSize = null; this.FPosition = null; this.FDiv = null; this.FContentDiv = null; this.FShadow = true; this.FShadowDiv = null; this.FCloseImg = null; this.FCloseAttachCallBack = null; this.innerHTML = ''; this.FMap = null; this.FEvents = null; if (kMn != null) { this.FPosition = kMn; } else { this.FPosition = new SPixel(0, 0); } if (GMN != null) { this.FSize = GMN; } else { this.FSize = new SSize(300, 160); } if (emn == null) { this.FId = SUtil.CreateUid(this.ClassName); } else { this.FId = emn; } if (innerHTML != null) { this.innerHTML = innerHTML; } this.FOffset = new SSize(0, 0); this.FLonLat = null; this.FDiv = SUtil.CreateDiv(this.FId, this.FPosition, this.FSize, null, "absolute", null, null, 0.9); this.FContentDiv = SUtil.CreateDiv(this.FId + "content", null, null, null, "absolute", null, null, null); this.FShadowDiv = SUtil.CreateDiv(this.FId + "shadow", null, this.FSize, null, null, null, null, null); this.RegisterEvents(); }
SInfoWindow.prototype.ClassName = SClassName.SInfoWindow; SInfoWindow.prototype.Draw = function () { this.FDiv.innerHTML = ""; SUtil.SetElementSize(this.FDiv, this.FSize); SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); this.FDiv.backgroundColor = "White"; this.FDiv.style.zIndex = 3000; var MMN = new SPixel(0, 0); var pmn = new SPixel(0, 0); var qmN = new SSize(690, 786); var rMn = new SSize(25, 25); var sMn = SUtil.GetImagesLocation() + "popup/pp.png"; var TMN = SUtil.GetImagesLocation() + "popup/transparent.png"; var vmn = SUtil.GetImagesLocation() + "popup/v_close2.png"; var fMN = SUtil.CreateAlphaImageDiv3(null, MMN, qmN, sMn, "absolute", null, "hidden", 1, true); var wmn = SUtil.CreateAlphaImageDiv3(null, pmn, rMn, null, "absolute", null, "hidden", 1, true); wmn.appendChild(fMN); MMN.FX = -665; MMN.FY = 0; pmn.FX = this.FSize.FW - 25; var LMn = SUtil.CreateAlphaImageDiv3(null, MMN, qmN, sMn, "absolute", null, "hidden", 1, true); var xmn = SUtil.CreateAlphaImageDiv3(null, pmn, rMn, null, "absolute", null, "hidden", 1, true); xmn.appendChild(LMn); MMN.FX = 0; MMN.FY = -665; pmn.FX = 0; pmn.FY = this.FSize.FH - 25; var YmN = SUtil.CreateAlphaImageDiv3(null, MMN, qmN, sMn, "absolute", null, "hidden", 1, true); var HMn = SUtil.CreateAlphaImageDiv3(null, pmn, rMn, null, "absolute", null, "hidden", 1, true); HMn.appendChild(YmN); MMN.FX = -665; MMN.FY = -665; pmn.FX = this.FSize.FW - 25; pmn.FY = this.FSize.FH - 25; var ZPN = SUtil.CreateAlphaImageDiv3(null, MMN, qmN, sMn, "absolute", null, "hidden", 1, true); var NPn = SUtil.CreateAlphaImageDiv3(null, pmn, rMn, null, "absolute", null, "hidden", 1, true); NPn.appendChild(ZPN); rMn.FW = 67; rMn.FH = 67; MMN.FX = -547; MMN.FY = -690; pmn.FX = this.FSize.FW / 2 - 50; pmn.FY = this.FSize.FH - 25; var Bpn = SUtil.CreateAlphaImageDiv3(null, MMN, qmN, sMn, "absolute", null, "hidden", 1, true); var upN = SUtil.CreateAlphaImageDiv3(null, pmn, rMn, null, "absolute", null, "hidden", 1, true); upN.style.zIndex = 2; upN.appendChild(Bpn); MMN.FX = 0; MMN.FY = 25; rMn.FW = this.FSize.FW - 2; rMn.FH = this.FSize.FH - 50; var DPn = SUtil.CreateDiv(null, MMN, rMn, null, "absolute", null, null, null); DPn.style.borderRightColor = "#ababab"; DPn.style.borderRightStyle = "solid"; DPn.style.borderRightWidth = "1px"; DPn.style.borderLeftColor = "#ababab"; DPn.style.borderLeftStyle = "solid"; DPn.style.borderLeftWidth = "1px"; DPn.style.backgroundColor = "White"; MMN.FX = 25; MMN.FY = 0; rMn.FW = this.FSize.FW - 50; if (SBrowser.IsIE()) { rMn.FH = 25 - 1; } else { rMn.FH = 25; } var opN = SUtil.CreateDiv(null, MMN, rMn, null, "absolute", null, null, null); opN.style.borderTopColor = "#ababab"; opN.style.borderTopStyle = "solid"; opN.style.borderTopWidth = "1px"; opN.style.backgroundColor = "White"; MMN.FX = 25; MMN.FY = this.FSize.FH - 25; rMn.FW = this.FSize.FW - 50; rMn.FH = 25 - 1; var cpn = SUtil.CreateDiv(null, MMN, rMn, null, "absolute", null, null, null); cpn.style.borderBottomColor = "#ababab"; cpn.style.borderBottomStyle = "solid"; cpn.style.borderBottomWidth = "1px"; cpn.style.backgroundColor = "White"; MMN.FX = 15; MMN.FY = 20; rMn.FW = this.FSize.FW - 30; rMn.FH = this.FSize.FH - 30; SUtil.ModifyDOMElement(this.FContentDiv, null, MMN, rMn, null, null, null); this.FContentDiv.style.zIndex = 32; this.FContentDiv.style.overflow = "auto"; this.FContentDiv.innerHTML = this.innerHTML; this.FContentDiv.style.backgroundColor = "White"; rMn.FW =  30; rMn.FH = 30; MMN.FX = this.FSize.FW - 38 - 7; MMN.FY = 13; this.FCloseImg = document.createElement("img"); SUtil.ModifyDOMElement(this.FCloseImg, null, MMN, rMn, "absolute", null, null); this.FCloseImg.style.zIndex = 500; this.FCloseImg.src = vmn; this.FCloseImg.style.cursor = "hand"; this.FDiv.appendChild(wmn); this.FDiv.appendChild(xmn); this.FDiv.appendChild(HMn); this.FDiv.appendChild(NPn); this.FDiv.appendChild(upN); this.FDiv.appendChild(DPn); this.FDiv.appendChild(opN); this.FDiv.appendChild(cpn); this.FDiv.appendChild(this.FContentDiv); this.FDiv.appendChild(this.FCloseImg); wmn = null; xmn = null; cpn = null; opN = null; DPn = null; upN = null; NPn = null; NPn = null; vmn = null; TMN = null; sMn = null; MMN = null; pmn = null; rMn = null; qmN = null; this.Hide(); this.FCloseImg._mp = this.FMap; this.FCloseImg.onclick = function () { this._mp.SInfoWindow.Hide(); if (this.FIsMove) { this.FMap.SetCenter(this.FMapCenter); this.FIsMove = false; this.FMapCenter = null; } }; return this.FDiv; }
SInfoWindow.prototype.Destroy = function () { this.FSize = null; this.FPosition = null; this.innerHTML = null; this.FCloseImg = null; this.FShadowDiv = null; this.FShadow = null; this.FContentDiv = null; this.FCloseAttachCallBack = null; this.FId = null; this.Div = null; }
SInfoWindow.prototype.GetId = function () { }
SInfoWindow.prototype.GetSize = function () { }
SInfoWindow.prototype.GetPosition = function () { }
SInfoWindow.prototype.GetContainerPosition = function () { var epN = new SPixel(0, 0); epN.FX = this.FPosition.FX - this.FSize.FW / 2 + 40 + parseInt(this.FOffset.FW); epN.FY = this.FPosition.FY - this.FSize.FH - 41 + parseInt(this.FOffset.FH); return epN; }
SInfoWindow.prototype.GetInnerHTML = function () { }
SInfoWindow.prototype.GetAutoSize = function () { }
SInfoWindow.prototype.SetSize = function (GPn) { this.FSize = GPn; this.Draw(); }
SInfoWindow.prototype.SetInnerHTML = function (innerHTML) { this.innerHTML = innerHTML; this.FContentDiv.innerHTML = innerHTML; }
SInfoWindow.prototype.SetPosition = function (kpn) { if (kpn) { this.FPosition = kpn; SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); } }
SInfoWindow.prototype.SetAutoSize = function (mPn) { if (mPn != null) { this.FAutoSize = mPn; } else { this.FAutoSize = false; } }
SInfoWindow.prototype.GetContainer = function () { return this.FDiv; }
SInfoWindow.prototype.AddClosingListener = function (pPN, Qpn) { }
SInfoWindow.prototype.AddClosedListener = function (RPN, Spn) { }
SInfoWindow.prototype.SetOpacity = function (TPn) { if (TPn != null) { } }
SInfoWindow.prototype.SetBackgroundColor = function (VpN) { }
SInfoWindow.prototype.SetContentPadding = function (fPn, wpn, LpN, XpN) { }
SInfoWindow.prototype.SetShadow = function (yPn) { }
SInfoWindow.prototype.Show = function () { this.FDiv.style.display = ""; this.FDiv.style.FVisibility = "visible"; this.MoveInCurrentExtent(); }
SInfoWindow.prototype.IsShow = function () { if (this.FDiv.style.display == "none") { return false; } return true; }
SInfoWindow.prototype.GetDiv = function () { return this.FDiv; }
SInfoWindow.prototype.Hide = function () { this.FDiv.style.display = "none"; this.FDiv.style.FVisibility = "hidden"; }
SInfoWindow.prototype.SetLonLat = function (ll) { this.FPosition = this.FMap.GetMapPxFromLonLat(ll); this.FLonLat = ll; SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); }
SInfoWindow.prototype.GetLonLat = function () { return this.FLonLat; }
SInfoWindow.prototype.UpdatePosition = function () { if (this.FLonLat) { this.SetLonLat(this.FLonLat); } }
SInfoWindow.prototype._SetLonLat = function (hpn) { if (hpn) { this.FLonLat = hpn; this.FPosition = this.FMap.GetMapPxFromLonLat(this.FLonLat); SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); } }
SInfoWindow.prototype.ReWriteInfoClose = function (ZQn) { this.FIsReWriteClosedListener = true; this.FCloseImg.onclick = ZQn; }
SInfoWindow.prototype.RegisterEvents = function () { this.FEvents = new SEvents(this, this.FDiv, null, true); this.FEvents.Register("mousedown", this, this._DefaultEvent); this.FEvents.Register("mousemove", this, this._DefaultEvent); this.FEvents.Register("mouseup", this, this._DefaultEvent); this.FEvents.Register("click", this, this._DefaultEvent); this.FEvents.Register("mouseout", this, this._DefaultEvent); this.FEvents.Register("DOMMouseScroll", this, this._DefaultEvent); this.FEvents.Register("mousewheel", this, this._DefaultEvent); this.FEvents.Register("dblclick", this, this._DefaultEvent); this.FEvents.Register("touchstart", this, this._DefaultEvent); this.FEvents.Register("touchmove", this, this._DefaultEvent); this.FEvents.Register("touchend", this, this._DefaultEvent); }
SInfoWindow.prototype._DefaultEvent = function (nQN) { SEvent.Stop(nQN, true); }
SInfoWindow.prototype.GetOffset = function () { return this.FOffset; }
SInfoWindow.prototype.SetOffset = function (bqn) { if (bqn && !isNaN(bqn.FW) && !isNaN(bqn.FH)) { this.FOffset = bqn; SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); } }
SInfoWindow.prototype.GetAreaBound = function () { var uqn = (this.FSize.FW) * this.FMap.GetResolution(); var dqN = (this.FSize.FH + 67 + 16) * this.FMap.GetResolution(); var oqn = -(this.FSize.FW / 2 - 60 + 20) * this.FMap.GetResolution(); var cqn = this.FLonLat.Clone(); var eQn = this.FLonLat.Clone(); cqn.Add(uqn, dqN); cqn.Add(oqn, 0); eQn.Add(oqn, 0); return new SBounds(eQn.FLon, eQn.FLat, cqn.FLon, cqn.FLat); }
SInfoWindow.prototype.MoveInCurrentExtent = function () { var gqn = this.FMap.GetExtent2(); var KQN = this.GetAreaBound(); if (gqn.ContainsBounds(KQN, false, true) == false) { this.FIsMove = true; this.FMapCenter = this.FMap.GetCenter(); gqn.MoveToContainsTheBound(KQN); this.FMap.SetCenterMoveSlowing(gqn.GetCenterLonLat()); } }
SInfoWindow.prototype.MoveInExtent = function (mqn) { if (mqn != null) { try { var PqN = this.GetAreaBound(); if (mqn.ContainsBounds(PqN, false, true) == false) { mqn.MoveToContainsTheBound(PqN); this.FMap.SetCenterMoveSlowing(mqn.GetCenterLonLat()); } } catch (ecdes) { } } }
function SInfoWindow2(QQN, Rqn, sqn, innerHTML, Tqn, VQn, fqn) { this.FEvents = null; this.FStyleIndex = 1; this.FAutoSize = false; this.FSize = null; this.FPosition = null; this.FDiv = null; this.FContentDiv = null; this.FShadow = true; this.FShadowDiv = null; this.FCloseImg = null; this.FCloseAttachCallBack = null; this.innerHTML = ''; this.FMap = null; this.FLonLat = null; this.FAdaptive = false; this._size = new SSize(180, 120); this.FType = null; if (Tqn) { this.FAdaptive = true; } if (sqn != null) { this.FPosition = sqn; } else { this.FPosition = new SPixel(0, 0); } if (Rqn != null) { this.FSize = Rqn; } else { this.FSize = new SSize(300, 160); } if (QQN == null) { this.FId = SUtil.CreateUid(this.ClassName); } else { this.FId = QQN; } if (innerHTML != null) { this.innerHTML = innerHTML; } if (fqn != null) { this.FType = fqn; } else { this.FType = 1; } this.FDiv = SUtil.CreateDiv(this.FId, this.FPosition, this.FSize, null, "absolute", null, null, null); this.FContentDiv = SUtil.CreateDiv(this.FId + "content", null, null, null, "relative", null, null, null); this.FContentDiv.style.wordBreak = "break-all"; this.FContentDiv.style.padding = "1px"; this.FShadowDiv = SUtil.CreateDiv(this.FId + "shadow", null, this.FSize, null, null, null, null, null); this.FDiv.className = "tJInfoWin"; this.FContentDiv.className = "tJInfoWinContent"; this.FOffset = new SSize(0, 0); if (VQn != null && !isNaN(VQn.FW) && !isNaN(VQn.FH)) { this.FOffset = VQn; } this.FIsReWriteClosedListener = false; this.RegisterEvents(); this.FCloseImg = document.createElement("img"); SUtil.SetElementZIndex(this.FDiv, SEnumZIndex.ZInfoWindow); }
SInfoWindow2.prototype.ClassName = SClassName.SInfoWindow2; SInfoWindow2.prototype.GetStyleIndex = function () { return this.FStyleIndex; }
SInfoWindow2.prototype.SetStyleIndex = function (wqN) { if (wqN != null) { this.FStyleIndex = wqN; } }
SInfoWindow2.prototype.ReWriteInfoClose = function (lqN) { this.FIsReWriteClosedListener = true; this.FCloseImg.onclick = lqN; }
SInfoWindow2.prototype.Draw = function () { this.FDiv.innerHTML = ""; if (this.FAdaptive) { this.FSize = SUtil.GetAdaptiveSize(this._size, this.innerHTML); this.FSize.Add(20, 26); SUtil.SetElementSize(this.FDiv, this.FSize); } else { SUtil.SetElementSize(this.FDiv, this.FSize); } if (this.FMap) { } SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); if (this.FStyleIndex == 1) { this.FDiv.backgroundColor = "#f3fbfd"; this.FContentDiv.style.backgroundColor = "#f3fbfd"; this.FContentDiv.innerHTML = this.innerHTML; var XqN = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_nw.png"; var yqN = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_sw.png"; var hQN = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_ne.png"; var zRN = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_se.png"; var nrN = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_n.png"; var brn = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_e.png"; var URN = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_w.png"; var dRN = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_s.png"; var orN = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_tap.png"; var CRn = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/close2.png"; var eRN = this.FCloseImg; eRN.src = CRn; eRN.style.position = "absolute"; eRN.style.right = "8px"; eRN.style.cursor = "hand"; eRN.style.top = "8px"; eRN._GGC = this; eRN.style.zIndex = 4000; if (this.FIsReWriteClosedListener == false) { eRN.onclick = function () { this._GGC.Hide(); }; } this.FDiv.appendChild(eRN); var gRN = document.createElement("table"); gRN.id = this.FId + "_tb"; gRN.style.width = "100%"; gRN.cellSpacing = "0px"; gRN.cellPadding = "0px"; var kRn = document.createElement("tbody"); var mrN = document.createElement("tr"); var pRN = document.createElement("td"); pRN.style.width = "9px"; pRN.style.height = "9px"; pRN.style.background = "url(" + XqN + ") no-repeat"; var QRN = document.createElement("td"); QRN.style.width = this.FSize.FW + "px"; QRN.id = this.FId + "_t"; QRN.style.height = "9px"; QRN.colSpan = 2; QRN.style.background = "url(" + nrN + ") repeat-x"; var rrN = document.createElement("td"); rrN.style.width = "9px"; rrN.style.height = "9px"; rrN.style.background = "url(" + hQN + ") no-repeat"; mrN.appendChild(pRN); mrN.appendChild(QRN); mrN.appendChild(rrN); var srn = document.createElement("tr"); var Trn = document.createElement("td"); Trn.style.width = "9px"; Trn.id = this.FId + "_l"; Trn.style.height = this.FSize.FH + "px"; Trn.style.background = "url(" + URN + ") repeat-y"; var VrN = document.createElement("td"); VrN.colSpan = 2; VrN.vAlign = "top"; VrN.appendChild(this.FContentDiv); var FRN = document.createElement("td"); FRN.style.width = "9px"; FRN.style.height = this.FSize.FH + "px"; FRN.id = this.FId + "_r"; FRN.style.background = "url(" + brn + ") repeat-y"; srn.appendChild(Trn); srn.appendChild(VrN); srn.appendChild(FRN); var Wrn = document.createElement("tr"); var lrN = document.createElement("td"); lrN.style.width = "9px"; lrN.style.height = "18px"; lrN.style.background = "url(" + yqN + ") no-repeat"; var xRN = document.createElement("td"); xRN.style.width = "38px"; xRN.style.height = "18px"; xRN.style.background = "url(" + orN + ") no-repeat"; var YRn = document.createElement("td"); YRn.style.width = (this.FSize.FW - 38) + "px"; YRn.style.height = "18px"; YRn.id = this.FId + "_b"; YRn.style.background = "url(" + dRN + ") repeat-x"; var hrn = document.createElement("td"); hrn.style.width = "9px"; hrn.style.height = "18px"; hrn.style.background = "url(" + zRN + ") no-repeat"; Wrn.appendChild(lrN); Wrn.appendChild(xRN); Wrn.appendChild(YRn); Wrn.appendChild(hrn); kRn.appendChild(mrN); kRn.appendChild(srn); kRn.appendChild(Wrn); gRN.appendChild(kRn); this.FDiv.appendChild(gRN); } else { this.FDiv.backgroundColor = "#f3fbfd"; this.FContentDiv.style.backgroundColor = "#f3fbfd"; this.FContentDiv.innerHTML = this.innerHTML; var XqN = SUtil.GetImagesLocation() + "pushpin/3/topleft.png"; var yqN = SUtil.GetImagesLocation() + "pushpin/3/bottomleft.png"; var hQN = SUtil.GetImagesLocation() + "pushpin/3/topright.png"; var zRN = SUtil.GetImagesLocation() + "pushpin/3/bottomright.png"; var nrN = SUtil.GetImagesLocation() + "pushpin/3/topmiddle.png"; var brn = SUtil.GetImagesLocation() + "pushpin/3/right.png"; var zSN = SUtil.GetImagesLocation() + "pushpin/3/jiantou.png"; var nsN = SUtil.GetImagesLocation() + "pushpin/3/left.png"; var BSN = SUtil.GetImagesLocation() + "pushpin/3/bottommiddle.png"; var CRn = SUtil.GetImagesLocation() + "pushpin/3/close.png"; var eRN = document.createElement("img"); eRN.src = CRn; eRN.style.position = "absolute"; eRN.style.right = "12px"; eRN.style.cursor = "hand"; eRN.style.top = "13px"; eRN._GGC = this; eRN.style.zIndex = 4000; eRN.onclick = function () { this._GGC.Hide(); }; this.FCloseImg = eRN; this.FDiv.appendChild(eRN); var gRN = document.createElement("table"); gRN.id = this.FId + "_tb"; gRN.style.width = "100%"; gRN.cellSpacing = "0px"; gRN.cellPadding = "0px"; var kRn = document.createElement("tbody"); var uSn = document.createElement("tr"); var dSN = document.createElement("td"); var osN = document.createElement("div"); osN.style.width = 2; osN.style.height = 32; osN.style.background = "url(" + XqN + ") repeat-x"; osN.style.paddingLeft = 42; dSN.appendChild(osN); uSn.appendChild(dSN); this.FDiv.appendChild(gRN); } return this.FDiv; }
SInfoWindow2.prototype.IsShow = function () { if (this.FDiv.style.display == "none") { return false; } return true; }
SInfoWindow2.prototype.GetDiv = function () { return this.FDiv; }
SInfoWindow2.prototype.GetOffset = function () { return this.FOffset; }
SInfoWindow2.prototype.SetOffset = function (CSN) { if (CSN && !isNaN(CSN.FW) && !isNaN(CSN.FH)) { this.FOffset = CSN; SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); } }
SInfoWindow2.prototype.Destroy = function () { if (this.FEvents) { this.FEvents.Destroy(); this.FEvents = null; } this.FSize = null; this.FPosition = null; this.innerHTML = null; this.FCloseImg = null; this.FShadowDiv = null; this.FShadow = null; this.FContentDiv = null; this.FCloseAttachCallBack = null; this.FId = null; this.Div = null; }
SInfoWindow2.prototype.GetId = function () { return this.FId; }
SInfoWindow2.prototype.GetSize = function () { return this.FSize; }
SInfoWindow2.prototype._SetSize = function () { var ESN = document.getElementById(this.FId + "_t"); var gsn = document.getElementById(this.FId + "_b"); var kSn = document.getElementById(this.FId + "_l"); var msn = document.getElementById(this.FId + "_r"); ESN.style.width = (this.FSize.FW - 18) + "px"; gsn.style.width = (this.FSize.FW - 56) + "px"; msn.style.height = (this.FSize.FH - 27) + "px"; kSn.style.height = (this.FSize.FH - 27) + "px"; this.FDiv.style.height = this.FSize.FH + "px"; this.FDiv.style.width = this.FSize.FW + "px"; }
SInfoWindow2.prototype.GetPosition = function () { }
SInfoWindow2.prototype.GetContainerPosition = function () { var pSN = new SPixel(0, 0); pSN.FX = this.FPosition.FX - 22 + this.FOffset.FW; pSN.FY = this.FPosition.FY - this.FSize.FH + this.FOffset.FH; return pSN; }
SInfoWindow2.prototype.GetInnerHTML = function () { return this.FContentDiv.innerHTML; }
SInfoWindow2.prototype.GetAutoSize = function () { }
SInfoWindow2.prototype.SetSize = function (qSn) { this.FSize = qSn; this._SetSize(); }
SInfoWindow2.prototype.SetAdaptive = function (rSN) { if (rSN != null && rSN == true) { this.FAdaptive = true; } else { this.FAdaptive = false; } }
SInfoWindow2.prototype.GetAdaptive = function () { return this.FAdaptive; }
SInfoWindow2.prototype.SetInnerHTML = function (innerHTML) { if (innerHTML != null) { this.innerHTML = innerHTML; this.FContentDiv.innerHTML = innerHTML; } this.Draw(); }
SInfoWindow2.prototype.SetPosition = function (SSn) { if (SSn) { this.FPosition = SSn; this.FLonLat = this.FMap.GetLonLatFromMapPx(this.FPosition); SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); this.MoveInCurrentExtent(); } }
SInfoWindow2.prototype.SetLonLat = function (tsn, VSN, FSN) { if (tsn) { if (VSN && !isNaN(VSN.FW) && !isNaN(VSN.FH)) { this.FOffset = VSN; } this.FLonLat = tsn; this.FPosition = this.FMap.GetMapPxFromLonLat(this.FLonLat); SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); if (FSN == false) { } } }
SInfoWindow2.prototype.UpdatePosition = function () { if (this.FLonLat) { this._SetLonLat(this.FLonLat); } }
SInfoWindow2.prototype._SetLonLat = function (wsN) { if (wsN) { this.FLonLat = wsN; this.FPosition = this.FMap.GetMapPxFromLonLat(this.FLonLat); SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); } }
SInfoWindow2.prototype.SetAutoSize = function (LSn) { if (LSn != null) { this.FAutoSize = LSn; } else { this.FAutoSize = false; } }
SInfoWindow2.prototype.GetContainer = function () { return this.FDiv; }
SInfoWindow2.prototype.AddClosingListener = function (xSn, ySn) { }
SInfoWindow2.prototype.AddClosedListener = function (hSN, ztn) { }
SInfoWindow2.prototype.SetOpacity = function (ntN) { if (ntN != null) { } }
SInfoWindow2.prototype.SetBackgroundColor = function (btN) { }
SInfoWindow2.prototype.SetContentPadding = function (utn, dtN, OTN, CTn) { }
SInfoWindow2.prototype.SetShadow = function (ETn) { }
SInfoWindow2.prototype.RegisterEvents = function () { this.FEvents = new SEvents(this, this.FDiv, null, true); this.FEvents.Register("mousedown", this, SEvent.Stop); this.FEvents.Register("mouseup", this, SEvent.Stop); this.FEvents.Register("click", this, SEvent.Stop); this.FEvents.Register("mouseout", this, SEvent.Stop); this.FEvents.Register("dblclick", this, SEvent.Stop); this.FEvents.Register("DOMMouseScroll", this, SEvent.Stop); this.FEvents.Register("mousewheel", this, SEvent.Stop); }
SInfoWindow2.prototype.Show = function () { if (JSecurity.IsValid()) { this.MoveInCurrentExtent(); this.FDiv.style.display = ""; this.FDiv.style.FVisibility = "visible"; } }
SInfoWindow2.prototype.Hide = function () { this.FDiv.style.display = "none"; this.FDiv.style.FVisibility = "hidden"; }
SInfoWindow2.prototype.GetAreaBound = function () { var gtn = (this.FSize.FW + 250) * this.FMap.GetResolution(); var ktn = (this.FSize.FH + 109) * this.FMap.GetResolution(); var mtn = -50 * this.FMap.GetResolution(); var pTn = this.FLonLat.Clone(); var qtN = this.FLonLat.Clone(); pTn.Add(gtn, ktn); qtN.Add(mtn, 0); return new SBounds(qtN.FLon, qtN.FLat, pTn.FLon, pTn.FLat); }
SInfoWindow2.prototype.MoveInCurrentExtent = function () { var Rtn = this.FMap.GetExtent2(); var sTN = this.GetAreaBound(); if (Rtn.ContainsBounds(sTN, false, true) == false) { Rtn.MoveToContainsTheBound(sTN); this.FMap.SetCenterMoveSlowing(Rtn.GetCenterLonLat()); } }
SInfoWindow2.prototype.SetCursor = function (Ttn) { if (Ttn != null) { this.FContentDiv.style.cursor = Ttn; } }
function SInfoWindow3(vTn, ftN, WtN, innerHTML, lTn, xTN, YTn) { SInfoWindow2.apply(this, [vTn, ftN, WtN, innerHTML, lTn, xTN, YTn]); this.FContentDiv = SUtil.CreateDiv(this.FId + "content", null, null, null, "relative", null, null, null); }
SInfoWindow3.prototype = new SInfoWindow2();
SInfoWindow3.prototype.Draw = function () { this.FDiv.innerHTML = ""; if (this.FAdaptive) { this.FSize = SUtil.GetAdaptiveSize(this._size, this.innerHTML); SUtil.SetElementSize(this.FDiv, new SSize(this.FSize.FW + 37 + 47, this.FSize.FH + 38)); } else { SUtil.SetElementSize(this.FDiv, new SSize(this.FSize.FW + 37 + 47, this.FSize.FH + 38)); } if (this.FMap) { } this.FContentDiv.innerHTML = this.innerHTML; var HTn = SUtil.GetImagesLocation() + "pushpin/3/top1.png"; var Zvn = SUtil.GetImagesLocation() + "pushpin/3/bottom1.png"; var nvN = SUtil.GetImagesLocation() + "pushpin/3/top3.png"; var bvN = SUtil.GetImagesLocation() + "pushpin/3/bottom3.png"; var uVN = SUtil.GetImagesLocation() + "pushpin/3/top2.png"; var dvN = SUtil.GetImagesLocation() + "pushpin/3/right1.png"; var OvN = SUtil.GetImagesLocation() + "pushpin/3/left1.png"; var cVn = SUtil.GetImagesLocation() + "pushpin/3/di.png"; var EvN = SUtil.GetImagesLocation() + "pushpin/3/bottom2.png"; var Gvn = SUtil.GetImagesLocation() + "pushpin/3/jiantou1.png"; var kVN = SUtil.GetImagesLocation() + "pushpin/3/close.png"; var mVn = SUtil.GetImagesLocation() + "pushpin/3/close2.png"; var PVn = this.FCloseImg; PVn.src = mVn; PVn.style.position = "absolute"; PVn.style.right = "18px"; PVn.style.cursor = "hand"; PVn.style.top = "12px"; PVn._GGC = this; PVn.style.zIndex = 4000; PVn.__sr1 = kVN; PVn.__sr2 = mVn; if (this.FIsReWriteClosedListener == false) { PVn.onclick = function () { this._GGC.Hide(); }; } PVn.onmouseover = function () { this.src = this.__sr1; }; PVn.onmouseout = function () { this.src = this.__sr2; }; this.FDiv.appendChild(PVn); var qvn = SUtil.CreateElement("table"); qvn.cellSpacing = "0px"; qvn.cellPadding = "0px"; var RVN = SUtil.CreateElement("tbody"); var SVn = SUtil.CreateElement("tr"); var tvn = SUtil.CreateElement("td"); tvn.style.width = 47; var vvN = SUtil.CreateElement("td"); vvN.style.width = 18; vvN.style.height = 22; SUtil.AssignElementBackground(vvN, HTn); var fVn = SUtil.CreateElement("td"); fVn.style.width = this.FSize.FW; fVn.style.height = 22; fVn.id = this.FId + "t"; SUtil.AssignElementBackground(fVn, uVN); var WVn = SUtil.CreateElement("td"); WVn.style.width = 16; WVn.style.height = 22; SUtil.AssignElementBackground(WVn, nvN); SVn.appendChild(tvn); SVn.appendChild(vvN); SVn.appendChild(fVn); SVn.appendChild(WVn); var LvN = SUtil.CreateElement("tr"); var XVN = SUtil.CreateElement("td"); var YvN = SUtil.CreateElement("td"); YvN.style.width = 18; YvN.style.height = 50; SUtil.AssignElementBackground(YvN, OvN); var HvN = SUtil.CreateElement("td"); HvN.style.width = this.FSize.FW; HvN.id = this.FId + "c"; SUtil.AssignElementBackground(HvN, cVn); HvN.rowSpan = 3; HvN.appendChild(this.FContentDiv); var zfN = SUtil.CreateElement("td"); zfN.id = this.FId + "r"; SUtil.AssignElementBackground(zfN, dvN); zfN.rowSpan = 3; LvN.appendChild(XVN); LvN.appendChild(YvN); LvN.appendChild(HvN); LvN.appendChild(zfN); var NfN = SUtil.CreateElement("tr"); var Bfn = SUtil.CreateElement("td"); Bfn.colSpan = 2; Bfn.valign = "top"; var uFn = SUtil.CreateElement("div"); uFn.style.width = 43; uFn.style.height = 55; SUtil.AssignElementBackground(uFn, Gvn); uFn.style.marginLeft = 22; Bfn.appendChild(uFn); NfN.appendChild(Bfn); var Dfn = SUtil.CreateElement("tr"); var ofn = SUtil.CreateElement("td"); var CFn = SUtil.CreateElement("td"); CFn.style.width = 18; if (this.FSize.FH > 88) { CFn.style.height = (this.FSize.FH - 88); } else { CFn.style.height = 88; } CFn.id = this.FId + "l"; SUtil.AssignElementBackground(CFn, OvN); Dfn.appendChild(ofn); Dfn.appendChild(CFn); var efN = SUtil.CreateElement("tr"); var GfN = SUtil.CreateElement("td"); var KFN = SUtil.CreateElement("td"); KFN.style.width = 18; KFN.style.height = 19; SUtil.AssignElementBackground(KFN, Zvn); var Mfn = SUtil.CreateElement("td"); Mfn.style.width = this.FSize.FW; Mfn.style.height = 19; Mfn.id = this.FId + "b"; SUtil.AssignElementBackground(Mfn, EvN); var PFN = SUtil.CreateElement("td"); PFN.style.width = 16; PFN.style.height = 19; SUtil.AssignElementBackground(PFN, bvN); efN.appendChild(GfN); efN.appendChild(KFN); efN.appendChild(Mfn); efN.appendChild(PFN); RVN.appendChild(SVn); RVN.appendChild(LvN); RVN.appendChild(NfN); RVN.appendChild(Dfn); RVN.appendChild(efN); qvn.appendChild(RVN); this.FDiv.appendChild(qvn); return this.FDiv; }
SInfoWindow3.prototype._SetSize = function () { var qFN = document.getElementById(this.FId + "t"); var rfn = document.getElementById(this.FId + "b"); var SfN = document.getElementById(this.FId + "l"); var tfN = document.getElementById(this.FId + "r"); var vFN = document.getElementById(this.FId + "c"); qFN.style.width = (this.FSize.FW - 81) + "px"; rfn.style.width = (this.FSize.FW - 81) + "px"; tfN.style.height = (this.FSize.FH - 41) + "px"; SfN.style.height = (this.FSize.FH - 19 - 22 - 50 - 55) + "px"; vFN.style.height = (this.FSize.FH - 41) + "px"; vFN.style.width = (this.FSize.FW - 81) + "px"; this.FDiv.style.height = this.FSize.FH + "px"; this.FDiv.style.width = this.FSize.FW + "px"; }
SInfoWindow3.prototype.GetContainerPosition = function () { var ffn = new SPixel(0, 0); ffn.FX = this.FPosition.FX - 22 + this.FOffset.FW; ffn.FY = this.FPosition.FY - (22 + 55 + 50 - 3) + this.FOffset.FH; return ffn; }
SInfoWindow3.prototype.ReWriteInfoClose = function (WfN) { this.FIsReWriteClosedListener = true; this.FCloseImg.onclick = WfN; }
function SInfoWindow4(Lfn, xFN, YFn, innerHTML, Hfn, ZwN, NwN) { this.FEvents = null; this.FStyleIndex = 4; this.FAutoSize = false; this.FSize = null; this.FPosition = null; this.FDiv = null; this.FContentDiv = null; this.FShadow = true; this.FShadowDiv = null; this.FCloseImg = null; this.FCloseAttachCallBack = null; this.innerHTML = ''; this.FMap = null; this.FLonLat = null; this.FAdaptive = false; this._size = new SSize(180, 120); this.FType = null; if (Hfn) { this.FAdaptive = true; } if (YFn != null) { this.FPosition = YFn; } else { this.FPosition = new SPixel(0, 0); } if (xFN != null) { this.FSize = xFN; } else { this.FSize = new SSize(300, 160); } if (Lfn == null) { this.FId = SUtil.CreateUid(this.ClassName); } else { this.FId = Lfn; } if (innerHTML != null) { this.innerHTML = innerHTML; } if (NwN != null) { this.FType = NwN; } else { this.FType = 1; } this.FDiv = SUtil.CreateDiv(this.FId, this.FPosition, this.FSize, null, "absolute", null, null, null); this.FContentDiv = SUtil.CreateDiv(this.FId + "content", null, null, null, "relative", null, null, null); this.FContentDiv.style.wordBreak = "break-all"; this.FContentDiv.style.padding = "1px"; this.FShadowDiv = SUtil.CreateDiv(this.FId + "shadow", null, this.FSize, null, null, null, null, null); this.FDiv.className = "tJInfoWin"; this.FContentDiv.className = "tJInfoWinContent"; this.FOffset = new SSize(0, 0); if (ZwN != null && !isNaN(ZwN.FW) && !isNaN(ZwN.FH)) { this.FOffset = ZwN; } this.FIsReWriteClosedListener = false; this.RegisterEvents(); this.FCloseImg = document.createElement("img"); SUtil.SetElementZIndex(this.FDiv, SEnumZIndex.ZInfoWindow); }
SInfoWindow4.prototype.ClassName = SClassName.SInfoWindow4; SInfoWindow4.prototype.GetStyleIndex = function () { return this.FStyleIndex; }
SInfoWindow4.prototype.SetStyleIndex = function (Bwn) { if (Bwn != null) { this.FStyleIndex = Bwn; } }
SInfoWindow4.prototype.ReWriteInfoClose = function (Uwn) { this.FIsReWriteClosedListener = true; this.FCloseImg.onclick = Uwn; }
SInfoWindow4.prototype.Draw = function () { this.FDiv.innerHTML = ""; if (this.FAdaptive) { this.FSize = SUtil.GetAdaptiveSize(this._size, this.innerHTML); this.FSize.Add(20, 26); SUtil.SetElementSize(this.FDiv, this.FSize); } else { SUtil.SetElementSize(this.FDiv, this.FSize); } if (this.FMap) { } SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); if (this.FStyleIndex == 4) { this.FDiv.backgroundColor = "#f3fbfd"; this.FContentDiv.style.backgroundColor = "#f3fbfd"; this.FContentDiv.innerHTML = this.innerHTML; var dwN = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_nw.png"; var Own = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_sw.png"; var cWN = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_ne.png"; var Ewn = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_se.png"; var GwN = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_n.png"; var KwN = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_e.png"; var MWn = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_w.png"; var pWN = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_s.png"; var qWN = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/iw_tap.png"; var Rwn = SUtil.GetImagesLocation() + "pushpin/" + this.FStyleIndex + "/close2.png"; var SWn = this.FCloseImg; SWn.src = Rwn; SWn.style.position = "absolute"; SWn.style.right = "8px"; SWn.style.cursor = "hand"; SWn.style.top = "8px"; SWn._GGC = this; SWn.style.zIndex = 4000; if (this.FIsReWriteClosedListener == false) { SWn.onclick = function () { this._GGC.Hide(); }; } this.FDiv.appendChild(SWn); var tWn = document.createElement("table"); tWn.id = this.FId + "_tb"; tWn.style.width = "100%"; tWn.cellSpacing = "0px"; tWn.cellPadding = "0px"; var VWn = document.createElement("tbody"); var fWn = document.createElement("tr"); var WwN = document.createElement("td"); WwN.style.width = "9px"; WwN.style.height = "9px"; WwN.style.background = "url(" + dwN + ") no-repeat"; var lwn = document.createElement("td"); lwn.style.width = this.FSize.FW + "px"; lwn.id = this.FId + "_t"; lwn.style.height = "9px"; lwn.colSpan = 2; lwn.style.background = "url(" + GwN + ") repeat-x"; var XWN = document.createElement("td"); XWN.style.width = "9px"; XWN.style.height = "9px"; XWN.style.background = "url(" + cWN + ") no-repeat"; fWn.appendChild(WwN); fWn.appendChild(lwn); fWn.appendChild(XWN); var ywn = document.createElement("tr"); var HwN = document.createElement("td"); HwN.style.width = "9px"; HwN.id = this.FId + "_l"; HwN.style.height = this.FSize.FH + "px"; HwN.style.background = "url(" + MWn + ") repeat-y"; var zLn = document.createElement("td"); zLn.colSpan = 2; zLn.vAlign = "top"; zLn.appendChild(this.FContentDiv); var NlN = document.createElement("td"); NlN.style.width = "9px"; NlN.style.height = this.FSize.FH + "px"; NlN.id = this.FId + "_r"; NlN.style.background = "url(" + KwN + ") repeat-y"; ywn.appendChild(HwN); ywn.appendChild(zLn); ywn.appendChild(NlN); var bLn = document.createElement("tr"); var uln = document.createElement("td"); uln.style.width = "9px"; uln.style.height = "18px"; uln.style.background = "url(" + Own + ") no-repeat"; var dLN = document.createElement("td"); dLN.style.width = "38px"; dLN.style.height = "18px"; dLN.style.background = "url(" + qWN + ") no-repeat"; var OlN = document.createElement("td"); OlN.style.width = (this.FSize.FW - 38) + "px"; OlN.style.height = "18px"; OlN.id = this.FId + "_b"; OlN.style.background = "url(" + pWN + ") repeat-x"; var CLn = document.createElement("td"); CLn.style.width = "9px"; CLn.style.height = "18px"; CLn.style.background = "url(" + Ewn + ") no-repeat"; bLn.appendChild(uln); bLn.appendChild(dLN); bLn.appendChild(OlN); bLn.appendChild(CLn); VWn.appendChild(fWn); VWn.appendChild(ywn); VWn.appendChild(bLn); tWn.appendChild(VWn); this.FDiv.appendChild(tWn); } else { this.FDiv.backgroundColor = "#f3fbfd"; this.FContentDiv.style.backgroundColor = "#f3fbfd"; this.FContentDiv.innerHTML = this.innerHTML; var dwN = SUtil.GetImagesLocation() + "pushpin/3/topleft.png"; var Own = SUtil.GetImagesLocation() + "pushpin/3/bottomleft.png"; var cWN = SUtil.GetImagesLocation() + "pushpin/3/topright.png"; var Ewn = SUtil.GetImagesLocation() + "pushpin/3/bottomright.png"; var GwN = SUtil.GetImagesLocation() + "pushpin/3/topmiddle.png"; var KwN = SUtil.GetImagesLocation() + "pushpin/3/right.png"; var ElN = SUtil.GetImagesLocation() + "pushpin/3/jiantou.png"; var GLn = SUtil.GetImagesLocation() + "pushpin/3/left.png"; var kLN = SUtil.GetImagesLocation() + "pushpin/3/bottommiddle.png"; var Rwn = SUtil.GetImagesLocation() + "pushpin/3/close.png"; var SWn = document.createElement("img"); SWn.src = Rwn; SWn.style.position = "absolute"; SWn.style.right = "12px"; SWn.style.cursor = "hand"; SWn.style.top = "13px"; SWn._GGC = this; SWn.style.zIndex = 4000; SWn.onclick = function () { this._GGC.Hide(); }; this.FCloseImg = SWn; this.FDiv.appendChild(SWn); var tWn = document.createElement("table"); tWn.id = this.FId + "_tb"; tWn.style.width = "100%"; tWn.cellSpacing = "0px"; tWn.cellPadding = "0px"; var VWn = document.createElement("tbody"); var MlN = document.createElement("tr"); var pLn = document.createElement("td"); var QLn = document.createElement("div"); QLn.style.width = 2; QLn.style.height = 32; QLn.style.background = "url(" + dwN + ") repeat-x"; QLn.style.paddingLeft = 42; pLn.appendChild(QLn); MlN.appendChild(pLn); this.FDiv.appendChild(tWn); } return this.FDiv; }
SInfoWindow4.prototype.GetOffset = function () { return this.FOffset; }
SInfoWindow4.prototype.SetOffset = function (rlN) { if (rlN && !isNaN(rlN.FW) && !isNaN(rlN.FH)) { this.FOffset = rlN; SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); } }
SInfoWindow4.prototype.Destroy = function () { if (this.FEvents) { this.FEvents.Destroy(); this.FEvents = null; } this.FSize = null; this.FPosition = null; this.innerHTML = null; this.FCloseImg = null; this.FShadowDiv = null; this.FShadow = null; this.FContentDiv = null; this.FCloseAttachCallBack = null; this.FId = null; this.Div = null; }
SInfoWindow4.prototype.GetId = function () { return this.FId; }
SInfoWindow4.prototype.GetSize = function () { return this.FSize; }
SInfoWindow4.prototype._SetSize = function () { var SLN = document.getElementById(this.FId + "_t"); var Tln = document.getElementById(this.FId + "_b"); var vLN = document.getElementById(this.FId + "_l"); var FlN = document.getElementById(this.FId + "_r"); SLN.style.width = (this.FSize.FW - 18) + "px"; Tln.style.width = (this.FSize.FW - 56) + "px"; FlN.style.height = (this.FSize.FH - 27) + "px"; vLN.style.height = (this.FSize.FH - 27) + "px"; this.FDiv.style.height = this.FSize.FH + "px"; this.FDiv.style.width = this.FSize.FW + "px"; }
SInfoWindow4.prototype.GetPosition = function () { }
SInfoWindow4.prototype.GetContainerPosition = function () { var Wln = new SPixel(0, 0); Wln.FX = this.FPosition.FX - 22 + this.FOffset.FW; Wln.FY = this.FPosition.FY - this.FSize.FH + this.FOffset.FH; return Wln; }
SInfoWindow4.prototype.GetInnerHTML = function () { return this.FContentDiv.innerHTML; }
SInfoWindow4.prototype.GetAutoSize = function () { }
SInfoWindow4.prototype.SetSize = function (LLN) { this.FSize = LLN; this._SetSize(); }
SInfoWindow4.prototype.SetAdaptive = function (XLN) { if (XLN != null && XLN == true) { this.FAdaptive = true; } else { this.FAdaptive = false; } }
SInfoWindow4.prototype.GetAdaptive = function () { return this.FAdaptive; }
SInfoWindow4.prototype.SetInnerHTML = function (innerHTML) { if (innerHTML != null) { this.innerHTML = innerHTML; this.FContentDiv.innerHTML = innerHTML; } this.Draw(); }
SInfoWindow4.prototype.SetPosition = function (YLn) { if (YLn) { this.FPosition = YLn; this.FLonLat = this.FMap.GetLonLatFromMapPx(this.FPosition); SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); this.MoveInCurrentExtent(); } }
SInfoWindow4.prototype.SetLonLat = function (Hln, zXN, nxn) { if (Hln) { if (zXN && !isNaN(zXN.FW) && !isNaN(zXN.FH)) { this.FOffset = zXN; } this.FLonLat = Hln; this.FPosition = this.FMap.GetMapPxFromLonLat(this.FLonLat); SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); if (nxn == false) { this.MoveInCurrentExtent(); } } }
SInfoWindow4.prototype.UpdatePosition = function () { if (this.FLonLat) { this._SetLonLat(this.FLonLat); } }
SInfoWindow4.prototype._SetLonLat = function (Bxn) { if (Bxn) { this.FLonLat = Bxn; this.FPosition = this.FMap.GetMapPxFromLonLat(this.FLonLat); SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); } }
SInfoWindow4.prototype.SetAutoSize = function (uxn) { if (uxn != null) { this.FAutoSize = uxn; } else { this.FAutoSize = false; } }
SInfoWindow4.prototype.GetContainer = function () { return this.FDiv; }
SInfoWindow4.prototype.AddClosingListener = function (dxn, OXN) { }
SInfoWindow4.prototype.AddClosedListener = function (cXN, ExN) { }
SInfoWindow4.prototype.SetOpacity = function (GXN) { if (GXN != null) { } }
SInfoWindow4.prototype.SetBackgroundColor = function (KXn) { }
SInfoWindow4.prototype.SetContentPadding = function (mXn, PXN, QxN, rXN) { }
SInfoWindow4.prototype.SetShadow = function (sxN) { }
SInfoWindow4.prototype.RegisterEvents = function () { this.FEvents = new SEvents(this, this.FDiv, null, true); this.FEvents.Register("mousedown", this, SEvent.Stop); this.FEvents.Register("mouseup", this, SEvent.Stop); this.FEvents.Register("click", this, SEvent.Stop); this.FEvents.Register("mouseout", this, SEvent.Stop); this.FEvents.Register("dblclick", this, SEvent.Stop); }
SInfoWindow4.prototype.Show = function () { if (JSecurity.IsValid()) { this.MoveInCurrentExtent(); this.FDiv.style.display = ""; this.FDiv.style.FVisibility = "visible"; } }
SInfoWindow4.prototype.Hide = function () { this.FDiv.style.display = "none"; this.FDiv.style.FVisibility = "hidden"; }
SInfoWindow4.prototype.GetAreaBound = function () { var Txn = (this.FSize.FW - 7) * this.FMap.GetResolution(); var VxN = (this.FSize.FH + 9) * this.FMap.GetResolution(); var fXn = -7 * this.FMap.GetResolution(); var wXn = this.FLonLat.Clone(); var lXN = this.FLonLat.Clone(); wXn.Add(Txn, VxN); lXN.Add(fXn, 0); return new SBounds(lXN.FLon, lXN.FLat, wXn.FLon, wXn.FLat); }
SInfoWindow4.prototype.MoveInCurrentExtent = function () { return; var xxN = this.FMap.GetExtent2(); var Yxn = this.GetAreaBound(); if (xxN.ContainsBounds(Yxn, false, true) == false) { xxN.MoveToContainsTheBound(Yxn); this.FMap.SetCenter(xxN.GetCenterLonLat()); } }
SInfoWindow4.prototype.SetCursor = function (HxN) { if (HxN != null) { this.FContentDiv.style.cursor = HxN; } }
function SInfoWindow7(zYN, nYN, bYN, innerHTML) { this.FIsMove = false; this.FMapCenter = null; this.FAutoSize = false; this.FSize = null; this.FPosition = null; this.FDiv = null; this.FContentDiv = null; this.FShadow = true; this.FShadowDiv = null; this.FCloseImg = null; this.FCloseAttachCallBack = null; this.innerHTML = ''; this.FMap = null; this.FEvents = null; if (bYN != null) { this.FPosition = bYN; } else { this.FPosition = new SPixel(0, 0); } if (nYN != null) { this.FSize = nYN; } else { this.FSize = new SSize(300, 160); } if (zYN == null) { this.FId = SUtil.CreateUid(this.ClassName); } else { this.FId = zYN; } if (innerHTML != null) { this.innerHTML = innerHTML; } this.FOffset = new SSize(0, 0); this.FLonLat = null; this.FDiv = SUtil.CreateDiv(this.FId, this.FPosition, this.FSize, null, "absolute", null, null, 1); this.FContentDiv = SUtil.CreateDiv(this.FId + "content", null, null, null, "absolute", null, null, null); this.FShadowDiv = SUtil.CreateDiv(this.FId + "shadow", null, this.FSize, null, null, null, null, null); this.RegisterEvents(); }
SInfoWindow7.prototype.ClassName = SClassName.SInfoWindow7; SInfoWindow7.prototype.Draw = function () { this.FDiv.innerHTML = ""; SUtil.SetElementSize(this.FDiv, this.FSize); SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); this.FDiv.backgroundColor = "White"; this.FDiv.style.zIndex = 3000; var UYn = new SPixel(0, 0); var dyN = new SPixel(0, 0); var OYn = new SSize(690, 786); var Cyn = new SSize(8, 8); var eYn = SUtil.GetImagesLocation() + "popup/pp7.png"; var gyN = SUtil.GetImagesLocation() + "popup/transparent.png"; var Kyn = SUtil.GetImagesLocation() + "popup/v_close2.png"; var mYn = SUtil.CreateAlphaImageDiv3(null, UYn, OYn, eYn, "absolute", null, "hidden", 1, true); var Pyn = SUtil.CreateAlphaImageDiv3(null, dyN, Cyn, null, "absolute", null, "hidden", 1, true); Pyn.appendChild(mYn); UYn.FX = -682; UYn.FY = 0; dyN.FX = this.FSize.FW - 8; var qyn = SUtil.CreateAlphaImageDiv3(null, UYn, OYn, eYn, "absolute", null, "hidden", 1, true); var ryn = SUtil.CreateAlphaImageDiv3(null, dyN, Cyn, null, "absolute", null, "hidden", 1, true); ryn.appendChild(qyn); UYn.FX = 0; UYn.FY = -682; dyN.FX = 0; dyN.FY = this.FSize.FH - 8; var Syn = SUtil.CreateAlphaImageDiv3(null, UYn, OYn, eYn, "absolute", null, "hidden", 1, true); var tyN = SUtil.CreateAlphaImageDiv3(null, dyN, Cyn, null, "absolute", null, "hidden", 1, true); tyN.appendChild(Syn); UYn.FX = -682; UYn.FY = -682; dyN.FX = this.FSize.FW - 8; dyN.FY = this.FSize.FH - 8; var Vyn = SUtil.CreateAlphaImageDiv3(null, UYn, OYn, eYn, "absolute", null, "hidden", 1, true); var fYN = SUtil.CreateAlphaImageDiv3(null, dyN, Cyn, null, "absolute", null, "hidden", 1, true); fYN.appendChild(Vyn); Cyn.FW = 52; Cyn.FH = 37; UYn.FX = -0; UYn.FY = -695; dyN.FX = this.FSize.FW / 2 - 16; dyN.FY = this.FSize.FH - 8; var WYn = SUtil.CreateAlphaImageDiv3(null, UYn, OYn, eYn, "absolute", null, "hidden", 1, true); var lyN = SUtil.CreateAlphaImageDiv3(null, dyN, Cyn, null, "absolute", null, "hidden", 1, true); lyN.style.zIndex = 2; lyN.appendChild(WYn); UYn.FX = 0; UYn.FY = 8; Cyn.FW = this.FSize.FW - 2; Cyn.FH = this.FSize.FH - 16; var xyn = SUtil.CreateDiv(null, UYn, Cyn, null, "absolute", null, null, null); xyn.style.borderRightColor = "#ffffff"; xyn.style.borderRightStyle = "solid"; xyn.style.borderRightWidth = "1px"; xyn.style.borderLeftColor = "#ffffff"; xyn.style.borderLeftStyle = "solid"; xyn.style.borderLeftWidth = "1px"; xyn.style.backgroundColor = "#f8f8ec"; UYn.FX = 8; UYn.FY = 0; Cyn.FW = this.FSize.FW - 16; if (SBrowser.IsIE()) { Cyn.FH = 8 - 1; } else { Cyn.FH = 8; } var yyN = SUtil.CreateDiv(null, UYn, Cyn, null, "absolute", null, null, null); yyN.style.borderTopColor = "#ffffff"; yyN.style.borderTopStyle = "solid"; yyN.style.borderTopWidth = "1px"; yyN.style.backgroundColor = "#f8f8ec"; UYn.FX = 8; UYn.FY = this.FSize.FH - 8; Cyn.FW = this.FSize.FW - 16; Cyn.FH = 8 - 1; var hyn = SUtil.CreateDiv(null, UYn, Cyn, null, "absolute", null, null, null); hyn.style.borderBottomColor = "#ffffff"; hyn.style.borderBottomStyle = "solid"; hyn.style.borderBottomWidth = "1px"; hyn.style.backgroundColor = "#f8f8ec"; UYn.FX = 5; UYn.FY = 5; Cyn.FW = this.FSize.FW - 10; Cyn.FH = this.FSize.FH - 10; SUtil.ModifyDOMElement(this.FContentDiv, null, UYn, Cyn, null, null, null); this.FContentDiv.style.zIndex = 32; this.FContentDiv.style.overflow = "auto"; this.FContentDiv.innerHTML = this.innerHTML; this.FContentDiv.style.backgroundColor = "#f8f8ec"; Cyn.FW = 30; Cyn.FH = 30; UYn.FX = this.FSize.FW - 38-7; UYn.FY = 13; this.FCloseImg = document.createElement("img"); SUtil.ModifyDOMElement(this.FCloseImg, null, UYn, Cyn, "absolute", null, null); this.FCloseImg.style.zIndex = 500; this.FCloseImg.src = Kyn; this.FCloseImg.style.cursor = "hand"; this.FDiv.appendChild(Pyn); this.FDiv.appendChild(ryn); this.FDiv.appendChild(tyN); this.FDiv.appendChild(fYN); this.FDiv.appendChild(lyN); this.FDiv.appendChild(xyn); this.FDiv.appendChild(yyN); this.FDiv.appendChild(hyn); this.FDiv.appendChild(this.FContentDiv); this.FDiv.appendChild(this.FCloseImg); Pyn = null; ryn = null; hyn = null; yyN = null; xyn = null; lyN = null; fYN = null; fYN = null; Kyn = null; gyN = null; eYn = null; UYn = null; dyN = null; Cyn = null; OYn = null; this.Hide(); this.FCloseImg._mp = this.FMap; this.FCloseImg.onclick = function () { this._mp.SInfoWindow.Hide(); if (this.FIsMove) { this.FMap.SetCenter(this.FMapCenter); this.FIsMove = false; this.FMapCenter = null; } };   return this.FDiv; }
SInfoWindow7.prototype.HideClosedButton = function () { this.FCloseImg.style.display = "none"; }
SInfoWindow7.prototype.Destroy = function () { this.FSize = null; this.FPosition = null; this.innerHTML = null; this.FCloseImg = null; this.FShadowDiv = null; this.FShadow = null; this.FContentDiv = null; this.FCloseAttachCallBack = null; this.FId = null; this.Div = null; }
SInfoWindow7.prototype.GetId = function () { }
SInfoWindow7.prototype.GetSize = function () { }
SInfoWindow7.prototype.GetPosition = function () { }
SInfoWindow7.prototype.GetContainerPosition = function () { var ZHn = new SPixel(0, 0); ZHn.FX = this.FPosition.FX - this.FSize.FW / 2 - 3 + parseInt(this.FOffset.FW); ZHn.FY = this.FPosition.FY - this.FSize.FH - 29 + parseInt(this.FOffset.FH); return ZHn; }
SInfoWindow7.prototype.GetInnerHTML = function () { }
SInfoWindow7.prototype.GetAutoSize = function () { }
SInfoWindow7.prototype.SetSize = function (nhn) { this.FSize = nhn; this.Draw(); }
SInfoWindow7.prototype.SetInnerHTML = function (innerHTML) { this.innerHTML = innerHTML; this.FContentDiv.innerHTML = innerHTML; }
SInfoWindow7.prototype.SetPosition = function (BHn) { if (BHn) { this.FPosition = BHn; SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); } }
SInfoWindow7.prototype.SetAutoSize = function (uhN) { if (uhN != null) { this.FAutoSize = uhN; } else { this.FAutoSize = false; } }
SInfoWindow7.prototype.GetContainer = function () { return this.FDiv; }
SInfoWindow7.prototype.AddClosingListener = function (DHn, OhN) { }
SInfoWindow7.prototype.AddClosedListener = function (Chn, EHn) { }
SInfoWindow7.prototype.SetOpacity = function (ghn) { if (ghn != null) { } }
SInfoWindow7.prototype.SetBackgroundColor = function (khN) { }
SInfoWindow7.prototype.SetContentPadding = function (mHN, PhN, qhN, RHn) { }
SInfoWindow7.prototype.SetShadow = function (ShN) { }
SInfoWindow7.prototype.Show = function () { this.FDiv.style.display = ""; this.FDiv.style.FVisibility = "visible"; this.MoveInCurrentExtent(); }
SInfoWindow7.prototype.IsShow = function () { if (this.FDiv.style.display == "none") { return false; } return true; }
SInfoWindow7.prototype.GetDiv = function () { return this.FDiv; }
SInfoWindow7.prototype.Hide = function () { this.FDiv.style.display = "none"; this.FDiv.style.FVisibility = "hidden"; }
SInfoWindow7.prototype.SetLonLat = function (ll) { this.FPosition = this.FMap.GetMapPxFromLonLat(ll); this.FLonLat = ll; SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); }
SInfoWindow7.prototype.GetLonLat = function () { return this.FLonLat; }
SInfoWindow7.prototype.UpdatePosition = function () { if (this.FLonLat) { this.SetLonLat(this.FLonLat); } }
SInfoWindow7.prototype._SetLonLat = function (Thn) { if (Thn) { this.FLonLat = Thn; this.FPosition = this.FMap.GetMapPxFromLonLat(this.FLonLat); SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); } }
SInfoWindow7.prototype.ReWriteInfoClose = function (VHn) { this.FIsReWriteClosedListener = true; this.FCloseImg.onclick = VHn; }
SInfoWindow7.prototype.RegisterEvents = function () { this.FEvents = new SEvents(this, this.FDiv, null, true); this.FEvents.Register("mousedown", this, this._DefaultEvent); this.FEvents.Register("mousemove", this, this._DefaultEvent); this.FEvents.Register("mouseup", this, this._DefaultEvent); this.FEvents.Register("click", this, this._DefaultEvent); this.FEvents.Register("mouseout", this, this._DefaultEvent); this.FEvents.Register("DOMMouseScroll", this, this._DefaultEvent); this.FEvents.Register("mousewheel", this, this._DefaultEvent); this.FEvents.Register("dblclick", this, this._DefaultEvent); this.FEvents.Register("touchstart", this, this._DefaultEvent); this.FEvents.Register("touchmove", this, this._DefaultEvent); this.FEvents.Register("touchend", this, this._DefaultEvent); }
SInfoWindow7.prototype._DefaultEvent = function (fHn) { SEvent.Stop(fHn, true); }
SInfoWindow7.prototype.GetOffset = function () { return this.FOffset; }
SInfoWindow7.prototype.SetOffset = function (WHN) { if (WHN && !isNaN(WHN.FW) && !isNaN(WHN.FH)) { this.FOffset = WHN; SUtil.SetElementPosition(this.FDiv, this.GetContainerPosition()); } }
SInfoWindow7.prototype.GetAreaBound = function () { 
	var lHn = (this.FSize.FW + 40+86*2) * this.FMap.GetResolution();
	var XHN = (this.FSize.FH + 29 + 40+86) * this.FMap.GetResolution();
	var yhn = -(this.FSize.FW / 2 + 40+86) * this.FMap.GetResolution(); 
	var HhN = this.FLonLat.Clone(); var ZZb = this.FLonLat.Clone(); HhN.Add(lHn, XHN); HhN.Add(yhn, 0); ZZb.Add(yhn, 0); return new SBounds(ZZb.FLon, ZZb.FLat, HhN.FLon, HhN.FLat); }
SInfoWindow7.prototype.MoveInCurrentExtent = function () { var nZb = this.FMap.GetExtent2(); var BzB = this.GetAreaBound(); if (nZb.ContainsBounds(BzB, false, true) == false) { this.FIsMove = true; this.FMapCenter = this.FMap.GetCenter(); nZb.MoveToContainsTheBound(BzB); this.FMap.SetCenterMoveSlowing(nZb.GetCenterLonLat()); } }
SInfoWindow7.prototype.MoveInExtent = function (uzb) { if (uzb != null) { try { var Dzb = this.GetAreaBound(); if (uzb.ContainsBounds(Dzb, false, true) == false) { uzb.MoveToContainsTheBound(Dzb); this.FMap.SetCenterMoveSlowing(uzb.GetCenterLonLat()); } } catch (ecdes) { } } }
function SControlBase(Ozb, CZB) { this.FId = null; this.FMap = null; this.FDiv = null; if (Ozb == null) { this.FType = SControlBaseType.Tool; } else { this.FType = Ozb; } this.FActive = false; this.FHandler = null; if (CZB) { this.FDomClass = CZB; } else { this.FDomClass = this.ClassName; } this.FId = SUtil.CreateUid(this.ClassName); }
SControlBase.prototype.ClassName = SClassName.SControlBase; SControlBase.prototype.Destroy = function () { if (this.FHandler) { this.FHandler.Destroy(); } this.FMap = null; this.FHandler = null; }
SControlBase.prototype.SetMap = function (EZb) { this.FMap = EZb; if (this.FHandler) { this.FHandler.SetMap(EZb); } }
SControlBase.prototype.GetMap = function () { return this.FMap; }
SControlBase.prototype.GetId = function () { return this.FId; }
SControlBase.prototype.GetDiv = function () { return this.FDiv; }
SControlBase.prototype.SetClassName = function (gZB) { this.FDomClass = gZB; this.FDiv.className = gZB; }
SControlBase.prototype.Draw = function (KZb) { if (this.FDiv == null) { this.FDiv = SUtil.CreateDiv(); this.FDiv.id = this.FId; this.FDiv.className = this.FDomClass; } if (KZb != null) { this.FPosition = KZb.Clone(); } return this.FDiv; }
SControlBase.prototype.MoveTo = function (Mzb) { if ((Mzb != null) && (this.FDiv != null)) { this.FDiv.style.left = Mzb.FX + "px"; this.FDiv.style.top = Mzb.FY + "px"; } }
SControlBase.prototype.Activate = function () { if (this.FActive) { return false; } if (this.FHandler) { this.FHandler.Activate(); } this.FActive = true; return true; }
SControlBase.prototype.DeActivate = function () { if (this.FActive) { if (this.FHandler) { this.FHandler.DeActivate(); } this.FActive = false; return true; } return false; }
SControlBase.prototype.GetActive = function () { return this.FActive; }
function SControlBaseType() { }
SControlBaseType.Button = 1; SControlBaseType.Toggle = 2; SControlBaseType.Tool = 3; function STile(PzB, qZB, rZb, sZb, TZB) { this.FEvtTypes = GlobeVar.STileETypeS; this.FEvents = null; this.FId = null; this.FLayer = null; this.FUrl = null; this.FBounds = null; this.FSize = null; this.FPosition = null; this.FDrawn = false; this.FCol = 0; this.FRow = 0; this.FIsLoading = false; this.FLayer = PzB; this.FPosition = qZB; this.FBounds = rZb; this.FUrl = sZb; this.FSize = TZB; this.FId = SUtil.CreateUid(SClassName.STile); this.FEvents = new SEvents(this, null, this.FEvtTypes); }
STile.prototype.ClassName = SClassName.STile; STile.prototype.GetCol = function () { return this.FCol; }
STile.prototype.GetRow = function () { return this.FRow; }
STile.prototype.GetId = function () { return this.FId; }
STile.prototype.GetUrl = function () { return this.FUrl; }
STile.prototype.SetUrl = function (vZB) { this.FUrl = vZB; }
STile.prototype.GetBound = function () { return this.FBounds; }
STile.prototype.SetBound = function (Fzb) { this.FBounds = Fzb; }
STile.prototype.GetPosition = function () { return this.FPosition; }
STile.prototype.SetPosition = function (WZB) { this.FPosition = WZB; }
STile.prototype.GetSize = function () { return this.FSize; }
STile.prototype.SetSize = function (LZb) { this.FSize = LZb; }
STile.prototype.Destroy = function () { this.FLayer = null; this.FBounds = null; this.FSize = null; this.FPosition = null; this.FEvents.Destroy(); this.FEvents = null; }
STile.prototype.Draw = function () { var xzb = this.FLayer.FMap._relativeMaxExtent.GetWidth() / this.FSize.FW - 1; var Yzb = this.FLayer.FMap._relativeMaxExtent.GetWidth() / this.FSize.FH - 1; this.Clear(); return this.FCol >= 0 && this.FCol <= xzb && this.FRow >= 0 && this.FRow <= Yzb; }
STile.prototype.MoveTo = function (hzB, ZnB, Nnb) { if (Nnb == null) { Nnb = true; } this.Clear(); this.FDrawn = false; this.FBounds = hzB.Clone(); this.FPosition = ZnB.Clone(); if (Nnb) { }; this.Draw(); }
STile.prototype.Clear = function () { this.FDrawn = false; }
STile.prototype.GetBoundsFromBaseLayer = function (bnb) { var uNB = this.FLayer.FMap.GetLonLatFromMapPx(bnb); var dnB = bnb.Clone(); dnB.FX += this.FSize.FW; dnB.FY += this.FSize.FH; var onB = this.FLayer.FMap.GetLonLatFromMapPx(dnB); if (uNB.FLon > onB.FLon) { if (uNB.FLon < 0) { uNB.FLon = -180 - (uNB.FLon + 180); } else { onB.FLon = 180 + onB.FLon + 180; } } pBounds = new SBounds(uNB.FLon, onB.FLat, onB.FLon, uNB.FLat); return pBounds; }
STile.prototype.CorrectTileBounds = function () { var cNb = this.FLayer.FMaxExtent; var eNB = this.FLayer.FMap.GetResolution() * this.FLayer.FMap.FTileSize.FW; if (Math.round(Math.abs(cNb.FLeft - this.FBounds.FLeft) / eNB) == 0) { this.FBounds.FLeft = cNb.FLeft; } if (Math.round(Math.abs(cNb.FRight - this.FBounds.FLeft) / eNB) == 0) { this.FBounds.FLeft = cNb.FRight; } if (Math.round(Math.abs(cNb.FRight - this.FBounds.FRight) / eNB) == 0) { this.FBounds.FRight = cNb.FRight; } if (Math.round(Math.abs(cNb.FLeft - this.FBounds.FRight) / eNB) == 0) { this.FBounds.FRight = cNb.FLeft; } if (Math.round(Math.abs(cNb.FTop - this.FBounds.FTop) / eNB) == 0) { this.FBounds.FTop = cNb.FTop; } if (Math.round(Math.abs(cNb.FBottom - this.FBounds.FTop) / eNB) == 0) { this.FBounds.FTop = cNb.FBottom; } if (Math.round(Math.abs(cNb.FBottom - this.FBounds.FBottom) / eNB) == 0) { this.FBounds.FBottom = cNb.FBottom; } if (Math.round(Math.abs(cNb.FTop - this.FBounds.FBottom) / eNB) == 0) { this.FBounds.FBottom = cNb.FTop; } }
function SImage(GNB, kNb, mNB, PNb, qnB) { this.FImg = null; STile.call(this, GNB, kNb, mNB, PNb, qnB); }
SImage.prototype = new STile();
SImage.prototype.ClassName = SClassName.SImage; SImage.prototype.GetUrl = function () { return this.FUrl; }
SImage.prototype.SetUrl = function (rnB) { this.FUrl = rnB; }
SImage.prototype.Destroy = function () { if (this.FImg != null) { SEvent.StopObservingEle(this.FImg.id); this.FLayer.FDiv.removeChild(this.FImg); this.FImg.FMap = null; } this.FImg = null; STile.prototype.Destroy.apply(this, arguments); }
SImage.prototype.CreateBackBuffer = function () { if (!this.FImg || this.FIsLoading) { return; } var Snb; Snb = this.FImg; this.FImg = null; return Snb; }
SImage.prototype.Draw = function () { if (!STile.prototype.Draw.apply(this, arguments)) { return false; } if (this.FIsLoading) { this.FEvents.TriggerEvent("reload"); } else { this.FIsLoading = true; this.FEvents.TriggerEvent("loadstart"); } if (this.FImg == null) { this.InitIMG(); } this.FImg.FViewRequestID = this.FLayer.FMap.FViewRequestID; if (this.FLayer.__IsValidPathRulFun()) { this.FUrl = this.FLayer.FCustomTilePathRuleFun.call(this.FLayer, this); } else { this.FUrl = this.FLayer._GetURL(this); } SUtil.ModifyDOMElement(this.FImg, null, this.FPosition, this.FSize); var tnB = this.FLayer.GetImageSize(); if (this.FLayer.FAlpha) { SUtil.ModifyAlphaImageDiv(this.FImg, null, null, tnB, this.FUrl); } else { this.FImg.src = this.FUrl; SUtil.ModifyDOMElement(this.FImg, null, null, tnB); } this.FImg.style.display = ""; this.FDrawn = true; return true; }
SImage.prototype.Clear = function () { STile.prototype.Clear.apply(this, arguments); if (this.FImg) { this.FImg.style.display = "none"; if (SImage.useBlankTile) { this.FImg.src = SUtil.GetImagesLocation() + "blank.gif"; } } }
SImage.prototype.InitIMG = function () { var Vnb = this.FLayer.FImageOffset; var fnb = this.FLayer.GetImageSize(); if (this.FLayer.FAlpha) { this.FImg = SUtil.CreateAlphaImageDiv(null, Vnb, fnb, null, "relative", null, null, null, true); } else { this.FImg = SUtil.CreateImage(null, Vnb, fnb, null, "relative", null, null, true); } this.FImg.style.position = 'absolute'; this.FImg.style.zIndex = 100; this.FLayer.FDiv.appendChild(this.FImg); if (this.FLayer.opacity != null) { SUtil.ModifyDOMElement(this.FImg, null, null, null, null, null, null, this.FLayer.opacity); } this.FImg.FMap = this.FLayer.FMap; var wnB = function () { if (this.FIsLoading) { this.FIsLoading = false; this.FEvents.TriggerEvent("loadend"); } }; SEvent.Observe(this.FImg, 'load', SFunction.Bind(wnB, this)); }
SImage.prototype.CheckImgURL = function () { if (this.FLayer) { var LNb = this.FLayer.FAlpha ? this.FImg.firstChild.src : this.FImg.src; if (!SUtil.IsEquivalentUrl(LNb, this.FUrl)) { this.FImg.style.display = "none"; } } }
function SLayerBase(xnB, YnB) { this.FId = null; this.FName = xnB; this.FDiv = null; this.FEvtTypes = GlobeVar.SLayerBaseETypeS; this.FEvents = null; this.FMap = null; this.FIsMainLayer = false; this.FAlpha = false; this.FVisibility = true; this.FAttribute = null; this.FInRange = false; this.FImageSize = null; this.FImageOffset = null; this.FOptions = null; this.FGutter = 0; this.FProjection = null; this.FUnits = null; this.FScales = null; this.FResolutions = null; this.FMaxExtent = null; this.FMinExtent = null; this.xK = null; this.FNumZoomLevels = null; this.FMinScale = null; this.FMaxScale = null; if (this.FId == null || this.FId == "") { this.FId = SUtil.CreateUid(SClassName.SLayerBase); } this.FDiv = SUtil.CreateDiv(this.FId); this.FEvents = new SEvents(this, this.FDiv, this.FEvtTypes); this.FLayerType = EnumLayerType.LTTileLayer; this.dm(); this.uM(YnB); }
SLayerBase.prototype.ClassName = SClassName.SLayerBase; SLayerBase.prototype.uM = function (hnB) { this.FDiv.style.left = "0px"; this.FDiv.style.position = "absolute"; this.FDiv.style.display = "block"; this.FDiv.style.width = "100%"; this.FDiv.style.height = "100%"; if (hnB != null) { this.FOptions = hnB; if (hnB.IsMainLayer != null) { this.FIsMainLayer = hnB.IsMainLayer; } if (hnB.Visibility != null) { this.FVisibility = hnB.Visibility; } if (hnB.Attribute != null) { this.FAttribute = hnB.Attribute; } if (hnB.TileSize != null) { this.FImageSize = hnB.TileSize; } if (hnB.Projection != null) { this.FProjection = hnB.Projection; } if (hnB.Resolutions != null) { this.FResolutions = hnB.Resolutions; } if (hnB.MaxExtent != null) { this.FMaxExtent = hnB.MaxExtent; } if (hnB.NumZoomLevels != null) { this.FNumZoomLevels = hnB.NumZoomLevels; } } else { this.FOptions = []; } }
SLayerBase.prototype.dm = function () { if (SBrowser && SBrowser.FType == 1 && SBrowser.FVersion <= 6) { this.FAlpha = true; } }
SLayerBase.prototype.GetId = function () { return this.FId; }
SLayerBase.prototype.GetName = function () { return this.FName; }
SLayerBase.prototype.GetMap = function () { return this.FMap; }
SLayerBase.prototype.GetDiv = function () { return this.FDiv; }
SLayerBase.prototype.GetEVTReference = function () { return this.FEvents; }
SLayerBase.prototype.Destroy = function (ZBb) { if (ZBb == null) { ZBb = true; } if (this.FMap != null) { this.FMap.RemoveLayer(this, ZBb); } this.FMap = null; this.FName = null; this.FDiv = null; this.FOptions = null; if (this.FEvents) { this.FEvents.Destroy(); } this.FEvents = null; }
SLayerBase.prototype.Clone = function (nBB) { if (nBB == null) { nBB = new SLayerBase(this.FName, this.FOptions); } SUtil.ApplyDefaults(nBB, this); nBB.FMap = null; return nBB; }
SLayerBase.prototype.AddOptions = function (Bbb) { if (this.FOptions == null) { this.FOptions = {}; } SUtil.Extend(this.FOptions, Bbb); SUtil.Extend(this, Bbb); }
SLayerBase.prototype.OnMapResize = function () { }
SLayerBase.prototype.Refresh = function () { var uBB = false; if (this.FMap) { this.FInRange = this.CalculateInRange(); var Dbb = this.GetExtent(); if (Dbb && this.FInRange && this.FVisibility) { this.MoveTo(Dbb, true, false); uBB = true; } } return uBB; }
SLayerBase.prototype.MoveTo = function (oBB, cbb, Ebb) { var gBb = this.FVisibility; if (!this.FIsMainLayer) { gBb = gBb && this.FInRange; } this.zP(gBb); }
SLayerBase.prototype.SetMap = function (Kbb) { if (this.FMap == null) { this.FMap = Kbb; this.FMaxExtent = this.FMaxExtent || this.FMap.FMaxExtent; this.FProjection = this.FProjection || this.FMap.FProjection; this.FUnits = this.FUnits || this.FMap.FUnits; this.InitResolutions(); if (!this.FIsMainLayer) { this.FInRange = this.CalculateInRange(); var MbB = this.FVisibility && this.FInRange; this.FDiv.style.display = MbB ? "" : "none"; } this.SetTileSize(); } }
SLayerBase.prototype.RemoveMap = function (pbB) { }
SLayerBase.prototype.GetImageSize = function () { return (this.FImageSize || this.FTileSize); }
SLayerBase.prototype.SetTileSize = function (qbb) { var RBb = qbb ? qbb : (this.FTileSize ? this.FTileSize : this.FMap.GetTileSize()); this.FTileSize = RBb; if (this.FGutter) { this.FImageOffset = new SPixel(-this.FGutter, -this.FGutter); this.FImageSize = new SSize(RBb.GetWidth() + (2 * this.FGutter), RBb.GetHeight() + (2 * this.FGutter)); } }
SLayerBase.prototype.GetVisibility = function () { return this.FVisibility; }
SLayerBase.prototype.SetVisibility = function (SBb) { if (SBb != this.FVisibility) { this.FVisibility = SBb; this.zP(SBb); this.Refresh(); if (this.FMap != null) { this.FMap.FEvents.TriggerEvent("changelayer"); } this.FEvents.TriggerEvent("visibilitychanged"); } }
SLayerBase.prototype.zP = function (TBB) { if (TBB != (this.FDiv.style.display != "none")) { this.FDiv.style.display = TBB ? "block" : "none"; } }
SLayerBase.prototype.CalculateInRange = function () { var vBb = false; if (this.FMap) { var FBB = this.FMap.GetResolution(); vBb = (FBB >= this.FMinResolution) && (FBB <= this.xK); } return vBb; }
SLayerBase.prototype.SetMainLayer = function (WBb) { if (WBb != this.FIsMainLayer) { this.FIsMainLayer = WBb; if (this.FMap != null) { this.FMap.FEvents.TriggerEvent("changlayer"); } } }
SLayerBase.prototype.InitResolutions = function () { if (this.FResolutions != null) { return; } var LBb = new Array('FProjection', 'FUnits', 'FScales', 'FResolutions', 'FMaxScale', 'FMinScale', 'FMaxResolution', 'FMminResolution', 'FMinExtent', 'FMaxExtent', 'FNumZoomLevels', 'FMaxZoomLevel'); var xBb = {}; for (var i = 0; i < LBb.length; i++) { var YBb = LBb[i]; xBb[YBb] = this.FOptions[YBb] || this.FMap[YBb]; } if ((!xBb.FNumZoomLevels) && (xBb.maxZoomLevel)) { xBb.FNumZoomLevels = xBb.maxZoomLevel + 1; } if ((xBb.FScales != null) || (xBb.FResolutions != null)) { if (xBb.FScales != null) { xBb.FResolutions = []; for (var i = 0; i < xBb.FScales.length; i++) { var hbb = xBb.FScales[i]; xBb.FResolutions[i] = SUtil.GetResolutionFromScale(hbb, xBb.FUnits); } } xBb.FNumZoomLevels = xBb.FResolutions.length; } else { xBb.FResolutions = []; if (xBb.FMinScale) { xBb.xK = SUtil.GtResolutionFromScale(xBb.FMinScale, xBb.FUnits); } else if (xBb.xK == "auto") { var zUB = this.FMap.GetSize(); var NuB = xBb.FMaxExtent.getWidth() / zUB.FW; var buB = xBb.FMaxExtent.getHeight() / zUB.FH; xBb.xK = Math.max(NuB, buB); } if (xBb.FMaxScale != null) { xBb.FMinResolution = SUtil.GetResolutionFromScale(xBb.FMaxScale); } else if ((xBb.FMinResolution == "auto") && (xBb.FMinExtent != null)) { var zUB = this.FMap.GetSize(); var NuB = xBb.FMinExtent.GetWidth() / zUB.FW; var buB = xBb.FMinExtent.GetHeight() / zUB.FH; xBb.FMinResolution = Math.max(NuB, buB); } if (xBb.FMinResolution != null) { var UUB = xBb.xK / xBb.FMinResolution; xBb.FNumZoomLevels = Math.floor(Math.log(UUB) / Math.log(2)) + 1; } for (var i = 0; i < xBb.FNumZoomLevels; i++) { var dUB = xBb.xK / Math.pow(2, i); xBb.FResolutions.push(dUB); } } xBb.FResolutions.sort(function (a, b) { return (b - a); }); this.FResolutions = xBb.FResolutions; this.xK = xBb.FResolutions[0]; var oUb = xBb.FResolutions.length - 1; this.FMinResolution = xBb.FResolutions[oUb]; this.FScales = []; for (var i = 0; i < xBb.FResolutions.length; i++) { this.FScales[i] = SUtil.GetScaleFromResolution(xBb.FResolutions[i], xBb.FUnits); } this.FMinScale = this.FScales[0]; this.FMaxScale = this.FScales[this.FScales.length - 1]; this.FNumZoomLevels = xBb.FNumZoomLevels; }
SLayerBase.prototype.GetResolution = function () { var Cub = this.FMap.GetZoom(); return this.FResolutions[Cub]; }
SLayerBase.prototype.GetExtent = function () { return this.FMap.GetExtent2(); }
SLayerBase.prototype.ep = function () { return this.FMap._relativeMaxExtent; }
SLayerBase.prototype.GetZoomForExtent = function (EUb, GUB) { var KUb = this.FMap.GetSize(); var Mub = Math.max(EUb.GetWidth() / KUb.GetWidth(), EUb.GetHeight() / KUb.GetHeight()); return this.GetZoomForResolution(Mub, GUB); }
SLayerBase.prototype.GetDataExtent = function () { }
SLayerBase.prototype.GetZoomForResolution = function (pUB, QuB) { var rUB; var SUB = Number.POSITIVE_INFINITY; for (var i = 0; i < this.FResolutions.length; i++) { if (QuB) { rUB = Math.abs(this.FResolutions[i] - pUB); if (rUB > SUB) { break; } SUB = rUB; } else { if (this.FResolutions[i] < pUB) { break; } } } return Math.max(0, i - 1); }
SLayerBase.prototype.GetResolutionForZoom = function (Tub) { Tub = Math.max(0, Math.min(Tub, this.FResolutions.length - 1)); var VUB; VUB = this.FResolutions[Math.round(Tub)]; return VUB; }
SLayerBase.prototype.GetLonLatFromViewPortPx = function (fub) { var wUb = null; if (fub != null) { var lUB = this.FMap.GetSize(); var Xub = this.FMap.GetCenter(); if (Xub) { var yuB = this.FMap.GetResolution(); var hUB = fub.FX - (lUB.FW / 2); var Zdb = fub.FY - (lUB.FH / 2); wUb = new SLonLat(Xub.FLon + hUB * yuB, Xub.FLat - Zdb * yuB); if (this.wrapDateLine) { wUb = wUb.wrapDateLine(this.FMaxExtent); } } } return wUb; }
SLayerBase.prototype.GetViewPortPxFromLonLat = function (NDB) { var bDB = null; if (NDB != null) { var Udb = this.FMap.GetResolution(); var DDB = this.FMap.GetExtent(); bDB = new SPixel(Math.round(1 / Udb * (NDB.GetLon() - DDB.GetLeft())), Math.round(1 / Udb * (DDB.GetTop() - NDB.GetLat()))); } return bDB; }
SLayerBase.prototype.SetOpacity = function (oDB) { if (oDB != this.opacity) { this.opacity = oDB; for (var i = 0; i < this.FDiv.childNodes.length; ++i) { var cDB = this.FDiv.childNodes[i]; SUtil.ModifyDOMElement(cDB, null, null, null, null, null, null, oDB); } } }
SLayerBase.prototype.SetZIndex = function (edb) { this.FDiv.style.zIndex = edb; }
SLayerBase.prototype.GetZIndex = function () { return this.FDiv.style.zIndex; }
SLayerBase.prototype.AdjustBound = function (Gdb) { if (this.FGutter) { var KdB = this.FGutter * this.FMap.GetResolution(); Gdb = new SBounds(Gdb.FLeft - KdB, Gdb.FBottom - KdB, Gdb.FRight + KdB, Gdb.FTop + KdB); } if (this.wrapDateLine) { var mdb = { 'rightTolerance': this.GetResolution() }; Gdb = Gdb.wrapDateLine(this.FMaxExtent, mdb); } return Gdb; }
function STileLayerBase(pDb, qDB) { SLayerBase.call(this, pDb); this.FTileSize = null; this.FSingleTile = null; this.FRatio = 1.5; this.FBuffer = 0; this.FNumLoadingTiles = 0; this.FEvents.AddEvtType("tileloaded"); this.FGrid = []; this.FUrl = qDB; this.FCacheWidth = 233; this.FCustomTilePathRuleFun = null; this.FBackBuffer = null; this.FBackBufferResolution = null; this.FBackBufferPx = null; this.FBackBufferTimerId = null; this.FGridResolution = null; this.FRemoveBackBufferDelay = null; this.FTransitionendEvents = ['transitionend', 'webkitTransitionEnd', 'otransitionend', 'oTransitionEnd']; this.FTransitionEffect = "resize"; this._removeBackBuffer = SFunction.Bind(this.RemoveBackBuffer, this); }
STileLayerBase.prototype = new SLayerBase();
STileLayerBase.prototype.ClassName = SClassName.STileLayerBase; STileLayerBase.prototype.SetTilePathRuleFun = function (rdB) { if (rdB != null && typeof (rdB) == GlobeVar.SFunctionName) { this.FCustomTilePathRuleFun = rdB; } }
STileLayerBase.prototype.GetPrefixPath = function () { return this.FUrl; }
STileLayerBase.prototype.__IsValidPathRulFun = function () { if (this.FCustomTilePathRuleFun != null && typeof (this.FCustomTilePathRuleFun) == GlobeVar.SFunctionName) { return true; } return false; }
STileLayerBase.prototype.Destroy = function () { this.Clear(); this.FGrid = null; this.FTileSize = null; }
STileLayerBase.prototype.Clear = function () { if (this.FGrid) { for (var SDB = 0; SDB < this.FGrid.length; SDB++) { var tDB = this.FGrid[SDB]; for (var vDb = 0; vDb < tDB.length; vDb++) { var FDb = tDB[vDb]; this.RemoveTileMonitoringHooks(FDb); FDb.Destroy(); } } this.FGrid = []; } }
STileLayerBase.prototype.Clone = function (Wdb) { if (Wdb == null) { Wdb = new STileLayerBase(this.FName, this.FOptions); } Wdb = SLayerBase.prototype.Clone.apply(this, [Wdb]); if (this.FTileSize != null) { Wdb.FTileSize = this.FTileSize.Clone(); } Wdb.FGrid = []; return Wdb; }
STileLayerBase.prototype.MoveTo = function (lDb, XDB, YdB) { SLayerBase.prototype.MoveTo.call(this, lDb, XDB, YdB); lDb = lDb || this.FMap.GetBound(); if (lDb != null) { var hdB = !this.FGrid.length || XDB; var Zob = this.GetTilesBounds(); if (this.FSingleTile) { if (hdB || (!YdB && !Zob.ContainsBounds(lDb))) { this.InitSingleTile(lDb); } } else { if ((hdB == true) || (!Zob.ContainsBounds(lDb, false))) { this.InitGriddedTiles(lDb); } else { this.MoveGriddedTiles(lDb); } } } }
STileLayerBase.prototype.SetTileSize = function (NoB) { if (this.FSingleTile) { var NoB = this.FMap.GetSize().Clone(); NoB.FH = parseInt(NoB.FH * this.FRatio); NoB.FW = parseInt(NoB.FW * this.FRatio); } SLayerBase.prototype.SetTileSize.apply(this, [NoB]); }
STileLayerBase.prototype.GetGridBounds = function () { return this.GetTilesBounds(); }
STileLayerBase.prototype.GetTilesExtent = function () { var uoB = null; if (this.FGrid.length) { var Dob = this.FGrid.length - 1; var OOb = this.FGrid[Dob][0]; var cOB = this.FGrid[0].length - 1; var eoB = this.FGrid[0][cOB]; pBounds = new SBounds(OOb.FBounds.FLeft, OOb.FBounds.FBottom, eoB.FBounds.FRight, eoB.FBounds.FTop); } return pBounds; }
STileLayerBase.prototype.GetTilesBounds = function () { var GOB = null; if (this.FGrid.length) { var kOb = this.FGrid.length - 1; var moB = this.FGrid[kOb][0]; var POB = this.FGrid[0].length - 1; var qOB = this.FGrid[0][POB]; GOB = new SBounds(moB.FBounds.FLeft - this.FCacheWidth, moB.FBounds.FBottom - this.FCacheWidth, qOB.FBounds.FRight + this.FCacheWidth, qOB.FBounds.FTop + this.FCacheWidth); } return GOB; }
STileLayerBase.prototype.InitSingleTile = function (ROB) { var SOb = ROB.GetCenterLonLat(); var Tob = ROB.GetWidth() * this.FRatio; var VoB = ROB.GetHeight() * this.FRatio; var foB = new SBounds(SOb.FLon - (Tob / 2), SOb.FLat - (VoB / 2), SOb.FLon + (Tob / 2), SOb.FLat + (VoB / 2)); var ul = new SLonLat(foB.FLeft, foB.FTop); var woB = this.FMap.GetMapPxFromLonLat(ul); if (!this.FGrid.length) { this.FGrid[0] = []; } var lob = this.FGrid[0][0]; if (!lob) { lob = this.AddTile(foB, woB); this.AddTileMonitoringHooks(lob); lob.Draw(); this.FGrid[0][0] = lob; } else { lob.MoveTo(foB, woB); } }
STileLayerBase.prototype.InitGriddedTiles = function (XOb) { var yob = this.FMap.GetSize(); var hOb = this.FMap._relativeMaxExtent; var zcB = Math.ceil(hOb.GetHeight() / this.FTileSize.FH); var nCB = Math.ceil(yob.FH / this.FTileSize.FH) + 1; var bCb = Math.ceil(yob.FW / this.FTileSize.FW) + 1; var UcB = Math.ceil(XOb.FTop / this.FMap.FTileSize.FH); var dcb = Math.ceil(XOb.FLeft / this.FMap.FTileSize.FW); var OCB = Math.abs(XOb.FTop % this.FMap.FTileSize.FH); var Ccb = Math.abs(XOb.FLeft % this.FMap.FTileSize.FW); var EcB = 0; var GCB = 0; if (XOb.FLeft > hOb.FLeft) { EcB = -Ccb; } else { EcB = Ccb - this.FTileSize.FW; } if (XOb.FTop > hOb.FBottom) { GCB = OCB - this.FTileSize.FH; } else { GCB = -OCB; } var kcB = EcB; var MCb = GCB; var pcb = 0; var QCB = parseInt(this.FMap.FLayerContainerDiv.style.left); var RcB = parseInt(this.FMap.FLayerContainerDiv.style.top); do { var ScB = this.FGrid[pcb++]; if (!ScB) { ScB = []; this.FGrid.push(ScB); } EcB = kcB; var Tcb = 0; var VCb = GCB - RcB; var fcB = dcb; do { var WCb = EcB - QCB; var lCB = new SBounds((fcB - 1) * this.FTileSize.FW, (UcB - 1) * this.FTileSize.FH, fcB * this.FTileSize.FW, UcB * this.FTileSize.FH); var xCb = new SPixel(WCb, VCb); var YCB = ScB[Tcb++]; if (!YCB) { YCB = this.AddTile(lCB, xCb); YCB.FCol = fcB - 1; YCB.FRow = zcB - UcB; YCB.Draw(); ScB.push(YCB); } else { YCB.FRow = zcB - UcB; YCB.FCol = fcB - 1; YCB.MoveTo(lCB, xCb, false); } EcB += this.FTileSize.FW; fcB = fcB + 1; } while (Tcb < bCb)GCB += this.FTileSize.FH; UcB = UcB - 1; } while (pcb < nCB)this.RemoveExcessTiles(pcb, Tcb); this.FGridResolution = this.FMap.GetResolution(); }
STileLayerBase.prototype.SpiralTileLoad = function () { var Hcb = []; var zEb = ["right", "down", "left", "up"]; var nEb = 0; var beB = -1; var UEb = SUtil.IndexOf(zEb, "right"); var dEB = 0; while (dEB < zEb.length) { var oeb = nEb; var ceB = beB; switch (zEb[UEb]) { case "right": ceB++; break; case "down": oeb++; break; case "left": ceB--; break; case "up": oeb--; break; } var eEB = null; if ((oeb < this.FGrid.length) && (oeb >= 0) && (ceB < this.FGrid[0].length) && (ceB >= 0)) { eEB = this.FGrid[oeb][ceB]; } if ((eEB != null) && (!eEB.queued)) { Hcb.unshift(eEB); eEB.queued = true; dEB = 0; nEb = oeb; beB = ceB; } else { UEb = (UEb + 1) % 4; dEB++; } } for (var i = 0; i < Hcb.length; i++) { var eEB = Hcb[i]; eEB.queued = false; } }
STileLayerBase.prototype.AddTile = function (gEB, KEB) { }
STileLayerBase.prototype.AddTileMonitoringHooks = function (meb) { meb.onLoadStart = function () { if (this.FNumLoadingTiles == 0) { this.FEvents.TriggerEvent("loadstart"); } this.FNumLoadingTiles++; }; meb.FEvents.Register("loadstart", this, meb.onLoadStart); meb.onLoadEnd = function () { this.FNumLoadingTiles--; this.FEvents.TriggerEvent("tileloaded"); if (this.FNumLoadingTiles == 0) { this.FEvents.TriggerEvent("loadend"); } }; meb.FEvents.Register("loadend", this, meb.onLoadEnd); }
STileLayerBase.prototype.RemoveTileMonitoringHooks = function (pEb) { pEb.FEvents.UnRegister("loadstart", this, pEb.onLoadStart); pEb.FEvents.UnRegister("loadend", this, pEb.onLoadEnd); }
STileLayerBase.prototype.MoveGriddedTiles = function (qeb) { var reb = this.FGrid[0][0].FPosition; var seb = this.FMap.GetViewPortPxFromMapPx(reb); if (seb.FX > 0) { this.ShiftColumn(true); } else if (seb.FX < -this.FTileSize.FW) { this.ShiftColumn(false); } else if (seb.FY > 0) { this.ShiftRow(true); } else if (seb.FY < -this.FTileSize.FH) { this.ShiftRow(false); } }
STileLayerBase.prototype.ShiftRow = function (tEb) { var VEb = (tEb) ? 0 : (this.FGrid.length - 1); var feb = this.FGrid[VEb]; var WeB = this.FMap.GetResolution(); var leb = (tEb) ? -this.FTileSize.FH : this.FTileSize.FH; var xEB = -leb; var yEb = (tEb) ? this.FGrid.pop() : this.FGrid.shift(); for (var i = 0; i < feb.length; i++) { var heB = feb[i]; var zgb = heB.FBounds.Clone(); var NGB = heB.FPosition.Clone(); zgb.FBottom = zgb.FBottom + xEB; zgb.FTop = zgb.FTop + xEB; NGB.FY = NGB.FY + leb; if (tEb) { yEb[i].FRow = heB.FRow - 1; } else { yEb[i].FRow = heB.FRow + 1; } yEb[i].MoveTo(zgb, NGB); } if (tEb) { this.FGrid.unshift(yEb); } else { this.FGrid.push(yEb); } }
STileLayerBase.prototype.ShiftColumn = function (bGB) { var UGB = (bGB) ? -this.FTileSize.FW : this.FTileSize.FW; var DGb = this.FMap.GetResolution(); var oGb = UGB; for (var i = 0; i < this.FGrid.length; i++) { var CGB = this.FGrid[i]; var eGb = (bGB) ? 0 : (CGB.length - 1); var ggB = CGB[eGb]; var KgB = ggB.FBounds.Clone(); var MGB = ggB.FPosition.Clone(); KgB.FLeft = KgB.FLeft + oGb; KgB.FRight = KgB.FRight + oGb; MGB.FX = MGB.FX + UGB; var pgb = bGB ? CGB.pop() : CGB.shift(); if (bGB) { pgb.FCol = ggB.FCol - 1; } else { pgb.FCol = ggB.FCol + 1; } pgb.MoveTo(KgB, MGB); if (bGB) { this.FGrid[i].unshift(pgb); } else { this.FGrid[i].push(pgb); } } }
STileLayerBase.prototype.RemoveExcessTiles = function (qGb, rgb) { while (this.FGrid.length > qGb) { var sGb = this.FGrid.pop(); for (var i = 0, l = sGb.length; i < l; i++) { var tGB = sGb[i]; this.RemoveTileMonitoringHooks(tGB); tGB.Destroy(); } } while (this.FGrid[0].length > rgb) { for (var i = 0, l = this.FGrid.length; i < l; i++) { var sGb = this.FGrid[i]; var tGB = sGb.pop(); this.RemoveTileMonitoringHooks(tGB); tGB.Destroy(); } } }
STileLayerBase.prototype.OnMapResize = function () { if (this.FSingleTile) { this.Clear(); this.SetTileSize(); this.InitSingleTile(this.FMap.GetExtent()); } }
STileLayerBase.prototype.GetTileBounds = function (vGb) { var fgb = this.FMap.GetMaxExtent(); var wGb = this.GetResolution(); var LGB = wGb * this.FTileSize.FW; var xGB = wGb * this.FTileSize.FH; var yGB = this.GetLonLatFromViewPortPx(vGb); var HgB = fgb.FLeft + (LGB * Math.floor((yGB.FLon - fgb.FLeft) / LGB)); var Zkb = fgb.FBottom + (xGB * Math.floor((yGB.FLat - fgb.FBottom) / xGB)); return new SBounds(HgB, Zkb, HgB + LGB, Zkb + xGB); }
STileLayerBase.prototype.RemoveBackBuffer = function () { if (this._transitionElement) { for (var i = this.FTransitionendEvents.length - 1; i >= 0; --i) { SEvent.StopObserving(this._transitionElement, this.FTransitionendEvents[i], this._removeBackBuffer); } delete this._transitionElement; } if (this.FBackBuffer) { if (this.FBackBuffer.parentNode) { this.FBackBuffer.parentNode.removeChild(this.FBackBuffer); } this.FBackBuffer = null; this.FBackBufferResolution = null; if (this.FBackBufferTimerId !== null) { window.clearTimeout(this.FBackBufferTimerId); this.FBackBufferTimerId = null; } } }
STileLayerBase.prototype.CreateBackBuffer = function () { var nKb; if (this.FGrid.length > 0) { nKb = document.createElement('div'); nKb.id = this.FDiv.id + '_bb'; nKb.className = 'olBackBuffer'; nKb.style.position = 'absolute'; var bkb = this.FMap; nKb.style.zIndex = this.FTransitionEffect === 'resize' ? this.GetZIndex() - 1 : bkb.FZBaseIndex.MainLayer - (bkb.GetLayerNum() - bkb.GetLayerIndex(this)); for (var i = 0, lenI = this.FGrid.length; i < lenI; i++) { for (var UKb = 0, lenJ = this.FGrid[i].length; UKb < lenJ; UKb++) { var DkB = this.FGrid[i][UKb]; markup = this.FGrid[i][UKb].CreateBackBuffer(); if (markup) { markup._i = i; markup._j = UKb; markup._w = DkB.FSize.FW; markup._h = DkB.FSize.FH; markup.id = DkB.FId + '_bb'; nKb.appendChild(markup); } } } } return nKb; }
STileLayerBase.prototype.ApplyBackBuffer = function (oKb) { if (this.FBackBufferTimerId !== null) { this.FRemoveBackBuffer(); } var cKB = this.FBackBuffer; if (!cKB) { cKB = this.CreateBackBuffer(); if (!cKB) { return; } this.FMap.FLayerContainerDiv.insertBefore(cKB, this.FMap.FLayerContainerDiv.firstChild); this.FBackBuffer = cKB; var EkB = this.FGrid[this.FGrid.length - 1][0].FBounds; this.FBackBufferPx = new SPixel(EkB.FLeft, EkB.FTop); this.FBackBufferResolution = this.FGridResolution; } var gkB = this.FBackBufferResolution / oKb; var KkB = cKB.childNodes; for (var i = KkB.length - 1; i >= 0; --i) { tile = KkB[i]; tile.style.top = ((gkB * tile._i * tile._h) | 0) + 'px'; tile.style.left = ((gkB * tile._j * tile._w) | 0) + 'px'; tile.style.width = Math.round(gkB * tile._w) + 'px'; tile.style.height = Math.round(gkB * tile._h) + 'px'; } var MKb = this.FMap.GetViewPortPxFromMapPx(this.FBackBufferPx); var pKb = this.GetViewPortPxFromLonLat(this.FMap.FLayerContainerOrigin, oKb); cKB.style.zIndex = 888; }
function SScale(qkB, rkB) { this.qO = SUtil.GetElement(qkB); this.FDisplayClass = "tJScale"; }
SScale.prototype = new SControlBase();
SScale.prototype.ClassName = SClassName.SScale; SScale.prototype.Draw = function () { SControlBase.prototype.Draw.apply(this, arguments); if (!this.qO) { this.qO = document.createElement("div"); this.FDiv.className = this.FDisplayClass; this.qO.style.fontSize = "smaller"; this.FDiv.appendChild(this.qO); } this.FMap.FEvents.Register('moveend', this, this.UpdateScale); this.UpdateScale(); return this.FDiv; }
SScale.prototype.UpdateScale = function () { var sKB = this.FMap.GetScale(); if (!sKB) return; sKB = Math.round(sKB * 100 / 2835); var Tkb = this.FMap.GetZoom(); var VKb = 50, dWidth = 100; Tkb = Tkb + 1; if (Tkb == 1) { VKb = 10000; dWidth = 100 / sKB * VKb; } else if (Tkb == 2) { VKb = 5000; dWidth = 100 / sKB * VKb; } else if (Tkb == 3) { VKb = 2000; dWidth = 100 / sKB * VKb; } else if (Tkb == 4) { VKb = 1000; dWidth = 100 / sKB * VKb; } else if (Tkb == 5) { VKb = 500; dWidth = 100 / sKB * VKb; } else if (Tkb == 6) { VKb = 200; dWidth = 100 / sKB * VKb; } else if (Tkb == 7) { VKb = 100; dWidth = 100 / sKB * VKb; } else if (Tkb == 8) { VKb = 50; dWidth = 100 / sKB * VKb; } dWidth = parseInt(dWidth); if (VKb >= 1000) { VKb = Math.round(VKb / 1000) + SResource.SScale.GongLi; } else if (VKb >= 950000) { VKb = Math.round(VKb / 1000000) + "M"; } else { VKb = Math.round(VKb) + SResource.SScale.Mi; } this.__Create(VKb, dWidth); }
SScale.prototype.__Create = function (fkB, wKB) { var lkB = '<div style="z-index: 1100; border-pBottom: 0px; pPosition: absolute; border-pLeft: 0px;' + 'width: ' + wKB + 'pPx; pBottom: 30px; height: 20px; border-pTop: 0px; pTop: auto; pRight: 10px;' + 'border-pRight: 0px; pLeft: 20px; align: center">' + '<div style="pPosition: absolute; width: 100%; pBottom: 5px; height: 15px; font-size: 12px"' + 'align="center" nowrap>' + fkB + '</div>' + '<div style="pPosition: absolute; background-color: #000000; width: 100%; pBottom: 4px;' + 'height: 3px; font-size: 0px">' + '</div>' + '<div style="pPosition: absolute; background-color: #000000; width: 2px; pBottom: 0px;' + 'height: 10px; font-size: 0px">' + '</div>' + '<div style="pPosition: absolute; background-color: #000000; width: 2px; pBottom: 0px;' + 'height: 10px; font-size: 0px; pRight: -1px">' + '</div>' + '</div>'; SElement.RemoveAllChild(this.qO); var xKb = SUtil.CreateDiv(); var Ykb = SUtil.CreateDiv(); var HKB = SUtil.CreateDiv(); var ZmB = SUtil.CreateDiv(); xKb.innerHTML = fkB; xKb.className = "tJV"; Ykb.className = "tJL"; HKB.className = "tJC"; ZmB.className = "tJR"; this.qO.appendChild(xKb); this.qO.appendChild(Ykb); this.qO.appendChild(HKB); this.qO.appendChild(ZmB); this.qO.style.width = wKB; }
function SMap(bMB, umB) { this.FZBaseIndex = { MainLayer: 100, Overlay: 150, Popup: 770, Control: 1000, GrayDom: 1200, Label: 333 }; this.FEvtTypes = GlobeVar.SMapETypeS; this.FId = null; if (umB.Name != null) { this.FName = null; } else { this.FName = umB.Name; } this.FEvents = null; this.FDiv = null; if (umB.Size != null) { this.FSize = umB.Size; } else { this.FSize = new SSize(400, 300); } this.FViewPortDiv = null; this.FLayerContainerOrigin = null; this.FLayerContainerDiv = null; this.FLayers = []; this.FInfoWindowS = []; this.FControls = null; this.FPopups = null; this.FLabels = null; this.FPushpin = null; this.FMainlayer = null; if (umB.Center != null) { this.FCenter = umB.Center; } else { this.FCenter = null; } if (umB.Zoom != null) { this.FZoom = umB.Zoom; } else { this.FZoom = -1; } this.FPreZoom = 0; this.FViewRequestID = 0; if (umB.TileSize != null) { this.FTileSize = umB.TileSize; } else { this.FTileSize = new SSize(256, 256); ; } this.FProjection = "EPSG:4326"; this.FUnits = "degrees"; this.FResolutions = []; if (umB.Resolutions != null) { this.FResolutions = umB.Resolutions; } this.xK = 1.40625; this.FMinResolution = null; this.FMaxScale = null; this.FMinScale = null; if (umB.MaxExtent != null) { this.FMaxExtent = umB.MaxExtent; } else { this.FMaxExtent = new SBounds(-180, -180, 180, 180); } this.FStaticMaxExtent = null; this.FMinExtent = null; this.FRestrictedExtent = null; if (umB.NumZoomLevels != null) { this.FNumZoomLevels = umB.NumZoomLevels; } else { this.FNumZoomLevels = 16; } this.FTheme = null; if (umB.FallThrough = true) { this.FFallThrough = true; } else { this.FFallThrough = false; } this.FUnloadDestroy = null; this.FIsCompareInceptor = null; this.FId = SUtil.CreateUid(SClassName.SMap); this.FDiv = SUtil.GetElement(bMB); var NmB = this.FDiv.id + "_VP"; this.FViewPortDiv = SUtil.CreateDiv(NmB, null, null, null, "relative", null, "hidden"); this.FViewPortDiv.style.width = "100%"; this.FViewPortDiv.style.height = "100%"; this.FViewPortDiv.className = "tJMapVP"; this.FDiv.appendChild(this.FViewPortDiv); this.FLayerContainerDiv = SUtil.CreateDiv(this.FDiv.id + "_Container"); this.FLayerContainerDiv.style.zIndex = this.FZBaseIndex['Popup'] - 1; this.FLayerContainerDiv.style.width = "100%"; this.FViewPortDiv.appendChild(this.FLayerContainerDiv); this.FEvents = new SEvents(this, this.FDiv, this.FEvtTypes, this.FFallThrough); this.UpdateSize(); this.FEvents.Register("movestart", this, this.UpdateSize); if (SString.Contains(navigator.appName, "Microsoft")) { this.FEvents.Register("resize", this, this.UpdateSize); } else { SEvent.Observe(window, 'resize', SFunction.Bind(this.UpdateSize, this)); } if (this.FTheme) { } if (this.FControls == null) { if (SControlBase != null) { this.FControls = [new SNavigation()]; } else { this.FControls = []; } } for (var i = 0; i < this.FControls.length; i++) { this.AddControlToMap(this.FControls[i]); } this.FPopups = []; this.FLabels = []; this.FUnloadDestroy = SFunction.Bind(this.Destroy, this); SEvent.Observe(window, 'unload', this.FUnloadDestroy); this.SInfoWindow = new SInfoWindow7(null, new SSize(300, 180), new SPixel(0, 0), "GridMap WebGisƽ̨", false); this.SInfoWindow.FType = "globe"; this.AddInfoWindow(this.SInfoWindow); this.SInfoWindow.Hide(); this._relativeMaxExtent = null; this._relativeCenter = null; this._relativeExtent = null; this._FIntervalValue = 10; this._FHMovePixel = 80; this._FVMovePixel = 80; this._FAimCenter = null; this._SourceCenter = null; this._FMoveSlowEnabled = true; this._FIntervalHandle = 0; this.EffectiveExtent = new SBounds(0, 0, 0, 0); }
SMap.DefaultTileWidth = 256; SMap.DefaultTileHeight = 256; SMap.prototype.ClassName = SClassName.SMap; SMap.prototype.RefreshVectorLayer = function () { if (SVectorSVG.prototype.Supported()) { var DMB = this._relativeExtent; for (var i = 0; i < this.FLayers.length; i++) { var omb = this.FLayers[i]; if (!omb.FIsMainLayer && omb.ClassName == SClassName.SVectorLayer) { omb.MoveTo(DMB, true, true); } } } }
SMap.prototype.SetEffectiveExtent = function (CmB) { if (CmB != null) { this.EffectiveExtent = CmB; } }
SMap.prototype.GetVersion = function () { return "Version 2.03"; }
SMap.prototype.SetMoveSlowing = function (emB) { if (emB != null) { this._FMoveSlowEnabled = emB; } }
SMap.prototype.SetMoveIntervalValue = function (gMb) { if (gMb != null) { this._FIntervalValue = gMb; } }
SMap.prototype.GetId = function () { return this.FId; }
SMap.prototype.GetMapDiv = function () { return this.FDiv; }
SMap.prototype.AddCustomControl = function (kmB) { if (kmB != null) { SEvent.Observe(kmB, "mounsedown", SEvent.Stop); SEvent.Observe(kmB, "mouseup", SEvent.Stop); SEvent.Observe(kmB, "mousemove", SEvent.Stop); SEvent.Observe(kmB, "click", SEvent.Stop); SEvent.Observe(kmB, "dblclick", SEvent.Stop); SEvent.Observe(kmB, "mouseover", SEvent.Stop); this.FDiv.appendChild(kmB); } }
SMap.prototype.AddInfoWindow = function (MmB) { if (MmB != null) { this.FInfoWindowS.push(MmB); } MmB.FMap = this; MmB.GetContainer().style.zIndex = 1000; this.FLayerContainerDiv.appendChild(MmB.Draw()); }
SMap.prototype.RemoveInfoWindow = function (pmb) { SUtil.RemoveItem(this.FInfoWindowS, pmb); pmb.Destroy(); if (pmb.FDiv) { try { this.FLayerContainerDiv.removeChild(pmb.FDiv); } catch (e) { } } pmb.FMap = null; pmb = null; }
SMap.prototype.RemoveAllInfoWindow = function () { for (var n = 0; n < this.FInfoWindowS.length; n++) { this.RemoveInfoWindow(this.FInfoWindowS[n]); } }
SMap.prototype.GetInfoWindow = function (QMb) { for (var m = 0; m < this.FInfoWindowS.length; m++) { if (this.FInfoWindowS[m].FId == QMb) { return this.FInfoWindowS[m]; } } return null; }
SMap.prototype._UpdateInfoWindowSPosition = function () { for (var n = 0; n < this.FInfoWindowS.length; n++) { this.FInfoWindowS[n].UpdatePosition(); } }
SMap.prototype.HideInfoWindows = function () { for (var n = 0; n < this.FInfoWindowS.length; n++) { this.FInfoWindowS[n].Hide(); } }
SMap.prototype.ShowInfoWindows = function () { for (var n = 0; n < this.FInfoWindowS.length; n++) { this.FInfoWindowS[n].Show(); } }
SMap.prototype.GetName = function () { return this.FName; }
SMap.prototype.Destroy = function () { if (!this.FUnloadDestroy) { return false; } SEvent.StopObserving(window, 'unload', this.FUnloadDestroy); this.FUnloadDestroy = null; if (this.FLayers != null) { for (var i = this.FLayers.length - 1; i >= 0; --i) { this.FLayers[i].Destroy(); } this.FLayers = null; } if (this.FControls != null) { for (var i = this.FControls.length - 1; i >= 0; --i) { this.FControls[i].Destroy(); } this.FControls = null; } if (this.FViewPortDiv) { this.FDiv.removeChild(this.FViewPortDiv); } this.FViewPortDiv = null; if (this.FInfoWindowS) { this.RemoveAllInfoWindow(); } this.FEvents.Destroy(); this.FEvents = null; }
SMap.prototype.GetTileSize = function () { return this.FTileSize; }
SMap.prototype.GetEVTReference = function () { return this.FEvents; }
SMap.prototype.AddEventListener = function (rmB, sMB, tMb) { this.FEvents.Register(rmB, tMb, sMB); }
SMap.prototype.ReleaseEventListener = function (Vmb, FmB, wmb) { this.FEvents.ReleaseEventListener(Vmb, wmb, FmB); }
SMap.prototype.GetLayer = function (LMB) { var xMB = null; for (var i = 0; i < this.FLayers.length; i++) { var ymb = this.FLayers[i]; if (ymb.FId == LMB) { xMB = ymb; break; } } return xMB; }
SMap.prototype.SetLayerZIndex = function (hmb, zPB) { hmb.SetZIndex(zPB); }
SMap.prototype.AddLayer = function (npb) { if (this.FLayers.length == 0) { npb.FIsMainLayer = true; } for (var i = 0; i < this.FLayers.length; i++) { if (this.FLayers[i] == npb) { return false; } } this.FLayerContainerDiv.appendChild(npb.FDiv); this.FLayers.push(npb); npb.SetMap(this); if (npb.FIsMainLayer) { this.SetMainLayer(npb); } else { if (npb.FVisibility) { npb.Refresh(); } } this.FEvents.TriggerEvent("addlayer"); }
SMap.prototype.AddLayers = function (Bpb) { for (var i = 0; i < Bpb.length; i++) { this.AddLayer(Bpb[i]); } }
SMap.prototype.GetLayers = function () { return this.FLayers; }
SMap.prototype.GetMaxTileLayerZIndex = function () { var uPB = 0; for (var dPB = 0; dPB < this.FLayers.length; dPB++) { if (this.FLayers[dPB].FLayerType == EnumLayerType.LTTileLayer) { var oPb = this.FLayers[dPB].GetZIndex(); if (uPB < oPb) { uPB = oPb } } } return parseInt(uPB); }
SMap.prototype.RemoveLayer = function (cpb, Epb) { if (Epb == null) { Epb = true; } if (cpb.FDiv != undefined) { if (cpb.isFixed) { this.FViewPortDiv.removeChild(cpb.FDiv); } else { this.FLayerContainerDiv.removeChild(cpb.FDiv); } } SUtil.RemoveItem(this.FLayers, cpb); cpb.RemoveMap(this); cpb.FMap = null; if (this.FMainlayer == cpb) { this.FMainlayer = null; if (Epb) { for (i = 0; i < this.FLayers.length; i++) { var Gpb = this.FLayers[i]; if (Gpb.FIsMainLayer) { this.SetMainLayer(Gpb); break; } } } } this.FEvents.TriggerEvent("removelayer"); }
SMap.prototype.GetLayerNum = function () { return this.FLayers.length; }
SMap.prototype.GetLayerIndex = function (kpB) { return SUtil.IndexOf(this.FLayers, kpB); }
SMap.prototype.SetLayerIndex = function (Mpb, PpB) { this.SetLayerZIndex(Mpb, PpB); }
SMap.prototype.RaiseLayer = function (QPB) { var rpB = this.GetMaxTileLayerZIndex() + 1; this.SetLayerIndex(QPB, rpB); }
SMap.prototype.SetMainLayer = function (spB) { for (var i = 0; i < this.FLayers.length; i++) { this.FLayers[i].FIsMainLayer = false; } spB.FIsMainLayer = true; var TPB = null; if (this.FMainlayer) { TPB = this.FMainlayer.GetExtent(); } if (spB != this.FMainlayer) { if (SUtil.IndexOf(this.FLayers, spB) != -1) { this.FMainlayer = spB; this.FMainlayer.SetZIndex(this.GetMaxTileLayerZIndex() + 1); this.FViewRequestID++; this.FMainlayer.FVisibility = true; var VPB = this.GetCenter(); if (VPB != null) { if (TPB == null) { this.SetCenter(VPB, this.GetZoom(), false, true); } else { this.SetCenter(TPB.GetCenterLonLat(), this.GetZoomForExtent(TPB, true), false, true); } } this.FEvents.TriggerEvent("changebaselayer"); } } }
SMap.prototype.AddControl = function (fPb, wpb) { this.FControls.push(fPb); this.AddControlToMap(fPb, wpb); }
SMap.prototype.AddControlToMap = function (LPb, XPb) { LPb.outsideViewport = (LPb.FDiv != null); LPb.SetMap(this); var yPB = LPb.Draw(XPb); if (yPB) { if (!LPb.outsideViewport) { yPB.style.zIndex = this.FZBaseIndex['Control'] + this.FControls.length; this.FViewPortDiv.appendChild(yPB); } } }
SMap.prototype.GetControl = function (HPB) { var ZQB = null; for (var i = 0; i < this.FControls.length; i++) { var nQB = this.FControls[i]; if (nQB.FId == HPB) { ZQB = nQB; break; } } return ZQB; }
SMap.prototype.RemoveControl = function (bQB) { if ((bQB) && (bQB == this.GetControl(bQB.FId))) { if (!bQB.outsideViewport && bQB.FDiv) { this.FViewPortDiv.removeChild(bQB.FDiv) } SUtil.RemoveItem(this.FControls, bQB); } }
SMap.prototype.AddPopup = function (uQb, DqB) { if (DqB) { for (var i = this.FPopups.length - 1; i >= 0; --i) { this.RemovePopup(this.FPopups[i]); } } uQb.FMap = this; this.FPopups.push(uQb); var oqb = uQb.Draw(); if (oqb) { oqb.style.zIndex = this.FZBaseIndex['Popup'] + this.FPopups.length; this.FLayerContainerDiv.appendChild(oqb); } }
SMap.prototype.RemovePopup = function (cQB) { if (cQB && cQB.FIndependent == false) { SUtil.RemoveItem(this.FPopups, cQB); if (cQB.FDiv) { try { this.FLayerContainerDiv.removeChild(cQB.FDiv); } catch (e) { } } cQB.FMap = null; } }
SMap.prototype.GetPopupsByTag = function (EQb) { var GQB = []; for (var KQB = 0; KQB < this.FPopups.length; KQB++) { if (this.FPopups[KQB].FTag == EQb) { GQB.push(this.FPopups[KQB]); } } return GQB; }
SMap.prototype.GetPopupsById = function (Mqb) { for (var PqB = 0; PqB < this.FPopups.length; PqB++) { if (this.FPopups[PqB].FId == Mqb) { return this.FPopups[PqB]; } } return null; }
SMap.prototype.AddLabel = function (QQb, RQB) { if (RQB) { for (var i = this.FLabels.length - 1; i >= 0; --i) { this.RemoveLabel(this.FLabels[i]); } } QQb.FMap = this; this.FLabels.push(QQb); var sqB = QQb.Draw(); if (sqB) { sqB.style.zIndex = this.FZBaseIndex['Label'] + this.FLabels.length; this.FLayerContainerDiv.appendChild(sqB); } sqB = null; }
SMap.prototype.UpdateLabels = function () { for (var u = 0; u < this.FLabels.length; u++) { this.FLabels[u].UpdatePosition(); } }
SMap.prototype.RemoveLabel = function (TQb) { if (TQb && TQb.FIndependent == false) { SUtil.RemoveItem(this.FLabels, TQb); if (TQb.FDiv) { try { this.FLayerContainerDiv.removeChild(TQb.FDiv); } catch (e) { } } TQb.FMap = null; } }
SMap.prototype.ClearLabels = function () { var vqb = this.FLabels.length - 1; while (vqb >= 0) { this.RemoveLabel(this.FLabels[vqb]); vqb--; }; }
SMap.prototype.ClearLabelsByTag = function (FqB) { for (var m = 0; m < this.FLabels.length; m++) { if (this.FLabels[m].FTag == FqB) { this.RemoveLabel(this.FLabels[m]); m--; } } }
SMap.prototype.GetLabelsByTag = function (wqb) { var LQb = []; for (var Xqb = 0; Xqb < this.FLabels.length; Xqb++) { if (this.FLabels[Xqb].FTag == wqb) { LQb.push(this.FLabels[Xqb]); } } return LQb; }
SMap.prototype.HideLabels = function () { for (var yqB = 0; yqB < this.FLabels.length; yqB++) { this.FLabels[yqB].Hide(); } }
SMap.prototype.ShowLabels = function () { for (var HQb = 0; HQb < this.FLabels.length; HQb++) { this.FLabels[HQb].Show(); } }
SMap.prototype.ShowLabelsByTag = function (zrB) { for (var NRB = 0; NRB < this.FLabels.length; NRB++) { if (this.FLabels[NRB].FTag == zrB) { this.FLabels[NRB].Show(); } } }
SMap.prototype.HideLabelsByTag = function (brB) { for (var URB = 0; URB < this.FLabels.length; URB++) { if (this.FLabels[URB].FTag == brB) { this.FLabels[URB].Hide(); } } }
SMap.prototype.GetLabelById = function (Drb) { for (var orB = 0; orB < this.FLabels.length; orB++) { if (this.FLabels[orB].FId == Drb) { return this.FLabels[orB]; } } return null; }
SMap.prototype.GetLabels = function () { return this.FLabels; }
SMap.prototype.GetSize = function () { var cRB = null; if (this.FSize != null) { cRB = this.FSize.Clone(); } return cRB; }
SMap.prototype.UpdateSize = function () { this.FEvents.qO.offsets = null; var ERb = this.GetCurrentSize(); var gRb = this.GetSize(); if (gRb == null) this.FSize = gRb = ERb; if (!ERb.Equals(gRb)) { this.FSize = ERb; for (var i = 0; i < this.FLayers.length; i++) { this.FLayers[i].OnMapResize(); } if (this.FMainlayer != null) { var KrB = new SPixel(ERb.FW / 2, ERb.FH / 2); var mrB = this.GetLonLatFromViewPortPx(KrB); var PrB = this.GetZoom(); this.FZoom = null; this.SetCenter(this.GetCenter(), PrB); } } }
SMap.prototype.ClearAll = function () { this.ClearLabels(); this.HideInfoWindows(); }
SMap.prototype.GetCurrentSize = function () { var QRB = new SSize(this.FDiv.clientWidth, this.FDiv.clientHeight); if (QRB.FW == 0 && QRB.FH == 0 || isNaN(QRB.FW) && isNaN(QRB.FH)) { var RRB = SElement.GetDimensions(this.FDiv); QRB.FW = RRB.FWidth; QRB.FH = RRB.FHeight; } if (QRB.FW == 0 && QRB.FH == 0 || isNaN(QRB.FW) && isNaN(QRB.FH)) { QRB.FW = parseInt(this.FDiv.style.width); QRB.FH = parseInt(this.FDiv.style.height); } return QRB; }
SMap.prototype.GetExtent2 = function (srb, trB) { var VRb = null; if (srb == null) { srb = this.GetCenter(); } if (trB == null) { trB = this.GetResolution(); } if ((srb != null) && (trB != null)) { var FRb = this.GetSize(); var wrB = FRb.FW * trB; var LRb = FRb.FH * trB; VRb = new SBounds(srb.FLon - wrB / 2, srb.FLat - LRb / 2, srb.FLon + wrB / 2, srb.FLat + LRb / 2); } return VRb; }
SMap.prototype.GetPerPxMapUnit = function () { var Xrb = this.GetExtent2(); return Xrb.GetWidth() / this.FSize.FW; }
SMap.prototype.GetCenter = function () { return this.FCenter; }
SMap.prototype.GetZoom = function () { return this.FZoom; }
SMap.prototype.GetPreZoom = function () { return this.FPreZoom; }
SMap.prototype.Pan = function (YrB, HRb) { var zSb = this.GetViewPortPxFromLonLat(this.GetCenter()); var NSB = zSb.Add(YrB, HRb); if (!NSB.Equals(zSb)) { var BsB = this.GetLonLatFromViewPortPx(NSB); this.SetCenterMoveSlowing(BsB); } }
SMap.prototype.SetCenter2 = function (USb, dSb) { if (USb != null) { var OsB = this.GetCenter(); var CsB = []; CsB.push(USb); CsB.push(OsB); var eSB = SBounds.CreateByLonLatArray(CsB); this.ZoomToExtent(eSB); } }
SMap.prototype.SetCenterMoveSlowing = function (Gsb, KsB) { if (this._FMoveSlowEnabled && Gsb) { window.clearInterval(this._FIntervalHandle); this._FAimCenter = Gsb; var MsB = this; this._SourceCenter = this.GetCenter(); if (KsB != null) { this.ZoomTo(KsB); } var PsB = this.__CaluXL(this._FAimCenter, this._SourceCenter); if (PsB != 0) { this._FVMovePixel = Math.round(Math.abs(this._FHMovePixel * PsB)); } this._FIntervalHandle = window.setInterval(function () { SMap.__IntervalFun(MsB) }, this._FIntervalValue); } else { this.SetCenter(Gsb); } }
SMap.prototype.__CaluXL = function (QsB, rSb) { if (QsB != null && rSb != null) { if (rSb.FLon != QsB.FLon) { return (rSb.FLat - QsB.FLat) / (rSb.FLon - QsB.FLon); } } return 0; }
SMap.prototype._ZoomIsChanged = function (SSB) { var TsB = this.GetZoom(); if (SSB == null || TsB == SSB) { return false; } return true; }
SMap.prototype.SetCenter = function (Vsb, Fsb, wSB, LSb) { if ((this.EffectiveExtent.GetLeft() == 0 && this.EffectiveExtent.GetBottom() == 0 && this.EffectiveExtent.GetTop() == 0 && this.EffectiveExtent.GetRight() == 0) || (null != Fsb)) { } else { var xsB = this.GetExtent(); if (xsB.GetLeft() >= this.EffectiveExtent.GetLeft() && xsB.GetRight() <= this.EffectiveExtent.GetRight() && xsB.GetTop() <= this.EffectiveExtent.GetTop() && xsB.GetBottom() >= this.EffectiveExtent.GetBottom()) { xsB = this.GetExtent2(Vsb); if (xsB.GetLeft() >= this.EffectiveExtent.GetLeft() && xsB.GetRight() <= this.EffectiveExtent.GetRight() && xsB.GetTop() <= this.EffectiveExtent.GetTop() && xsB.GetBottom() >= this.EffectiveExtent.GetBottom()) { } else { return; } } else { } } if (JSecurity.IsValid() == false) { return; } if (Fsb == null) { Fsb = this.GetZoom(); } if (!this.IsValidZoom(Fsb)) { Fsb = 0; } this.FPreZoom = this.GetZoom(); if (!this.FCenter && !this.IsValidLonLat(Vsb)) { Vsb = this.FMaxExtent.GetCenterLonLat(); } if (this.FRestrictedExtent != null) { if (Vsb == null) { Vsb = this.GetCenter(); } if (Fsb == null) { Fsb = this.GetZoom(); this.FPreZoom = Fsb; } if (Fsb != this.GetZoom()) { this.FPreZoom = this.GetZoom(); } var ysB = null; if (this.FMainlayer != null) { ysB = this.FMainlayer.FResolutions[Fsb]; } var hsb = this.GetExtent2(Vsb, ysB); if (!this.FRestrictedExtent.containsBounds(hsb)) { var ZTb = this.FRestrictedExtent.GetCenterLonLat(); if (hsb.GetWidth() > this.FRestrictedExtent.GetWidth()) { Vsb = new SLonLat(ZTb.FLon, Vsb.FLat); } else if (hsb.FLeft < this.FRestrictedExtent.FLeft) { Vsb = Vsb.Add(this.FRestrictedExtent.FLeft - hsb.FLeft, 0); } else if (hsb.FRight > this.FRestrictedExtent.FRight) { Vsb = Vsb.Add(this.FRestrictedExtent.FRight - hsb.FRight, 0); } if (hsb.getHeight() > this.FRestrictedExtent.getHeight()) { Vsb = new SLonLat(Vsb.FLon, ZTb.FLat); } else if (hsb.FBottom < this.FRestrictedExtent.FBottom) { Vsb = Vsb.Add(0, this.FRestrictedExtent.FBottom - hsb.FBottom); } else if (hsb.FTop > this.FRestrictedExtent.FTop) { Vsb = Vsb.Add(0, this.FRestrictedExtent.FTop - hsb.FTop); } } } var NtB = LSb || ((this.IsValidZoom(Fsb)) && (Fsb != this.GetZoom())); var BTb = (this.IsValidLonLat(Vsb)) && (!Vsb.Equals(this.FCenter)); if (NtB || BTb || !wSB) { if (!wSB) { this.FEvents.TriggerEvent("movestart"); } if (BTb) { if ((!NtB) && (this.FCenter)) { this.MapContainerMove(Vsb); } this.FCenter = Vsb.Clone(); } if ((NtB) || (this.FLayerContainerOrigin == null)) { this.FLayerContainerOrigin = this.FCenter.Clone(); this.FLayerContainerDiv.style.left = "0px"; this.FLayerContainerDiv.style.top = "0px"; } if (NtB) { this.FZoom = Fsb; this.FViewRequestID++; this.UpdateLabels(); this._SetRelativeMaxExtent(); this._UpdateInfoWindowSPosition(); } this._SetRelativeCenter(); this._SetRelativeExtent(); var UTB = this._relativeExtent; this.FMainlayer.MoveTo(UTB, NtB, wSB); for (var i = 0; i < this.FLayers.length; i++) { var Dtb = this.FLayers[i]; if (!Dtb.FIsMainLayer) { var OTb; var CTB = Dtb.CalculateInRange(); if (Dtb.FInRange != CTB) { Dtb.FInRange = CTB; OTb = true; this.FEvents.TriggerEvent("changelayer"); } else { OTb = (Dtb.FVisibility && Dtb.FInRange); } if (OTb) { Dtb.MoveTo(UTB, NtB, wSB); } } } if (NtB) { for (var i = 0; i < this.FPopups.length; i++) { this.FPopups[i].UpdatePosition(); } } this.FEvents.TriggerEvent("move"); if (NtB) { this.FEvents.TriggerEvent("zoomend"); } } this.FEvents.TriggerEvent("moveend"); }
SMap.prototype.MapContainerMove = function (Etb) { var GTb = this.GetViewPortPxFromLonLat(this.FLayerContainerOrigin); var kTB = this.GetViewPortPxFromLonLat(Etb); if ((GTb != null) && (kTB != null)) { this.FLayerContainerDiv.style.left = (GTb.FX - kTB.FX) + "px"; this.FLayerContainerDiv.style.top = (GTb.FY - kTB.FY) + "px"; } }
SMap.prototype.IsValidZoom = function (mTb) { return ((mTb != null) && (mTb >= 0) && (mTb < this.GetZLNum())); }
SMap.prototype.IsValidLonLat = function (ptB) { var qtB = false; if (ptB != null) { var rtb = this.GetMaxExtent(); qtB = rtb.ContainsLonLat(ptB); } return qtB; }
SMap.prototype.GetProjection = function () { var STB = null; if (this.FMainlayer != null) { STB = this.FMainlayer.FProjection; } return STB; }
SMap.prototype.GetMaxResolution = function () { var TTb = null; if (this.FMainlayer != null) { TTb = this.FMainlayer.xK; } return TTb; }
SMap.prototype.GetMaxExtent = function () { var VTb = null; if (this.FMainlayer != null) { VTb = this.FMainlayer.FMaxExtent; } return VTb; }
SMap.prototype.GetZLNum = function () { var FTB = null; if (this.FMainlayer != null) { FTB = this.FMainlayer.FNumZoomLevels; } return FTB; }
SMap.prototype.GetExtent = function () { return this.GetExtent2(); }
SMap.prototype.GetResolution = function () { var WTb = null; if (this.FMainlayer != null) { WTb = this.FMainlayer.GetResolution(); } return WTb; }
SMap.prototype.GetScale = function () { var LtB = null; if (this.FMainlayer != null) { var xtb = this.GetResolution(); var YTb = this.FMainlayer.FUnits; LtB = SUtil.GetScaleFromResolution(xtb, YTb); } return LtB; }
SMap.prototype.GetZoomForExtent = function (HTB, zVb) { var nvb = null; if (this.FMainlayer != null) { nvb = this.FMainlayer.GetZoomForExtent(HTB, zVb); } return nvb; }
SMap.prototype.GetZoomForBound = function (bvB, uVb) { this.GetZoomForExtent(bvB, uVb); }
SMap.prototype.GetZoomForResolution = function (dVb, oVb) { var cvB = null; if (this.FMainlayer != null) { cvB = this.FMainlayer.GetZoomForResolution(dVb, oVb); } return cvB; }
SMap.prototype.GetResolutionForZoom = function (Evb) { var gVb = null; if (this.baseLayer) { gVb = this.FMainlayer.GetResolutionForZoom(Evb); } return gVb; }
SMap.prototype.ZoomTo = function (kvB) { if (this.IsValidZoom(kvB)) { this.SetCenter(null, kvB); } }
SMap.prototype.ZoomIn = function () { this.ZoomTo(this.GetZoom() + 1); }
SMap.prototype.ZoomOut = function () { this.ZoomTo(this.GetZoom() - 1); }
SMap.prototype.ZoomToExtent = function (MvB) { if (MvB != null) { var pvb = MvB.GetCenterLonLat(); if (this.FMainlayer.wrapDateLine) { var qvb = this.GetMaxExtent(); MvB = MvB.Clone(); while (MvB.FRight < MvB.FLeft) { MvB.FRight += qvb.GetWidth(); } pvb = MvB.GetCenterLonLat().wrapDateLine(qvb); } this.SetCenter(pvb, this.GetZoomForExtent(MvB)); } }
SMap.prototype.ZoomToMaxExtent = function () { this.ZoomToExtent(this.GetMaxExtent()); }
SMap.prototype.ZoomToScale = function (rVB) { var sVb = SUtil.GetResolutionFromScale(rVB, this.FMainlayer.FUnits); var tvB = this.GetSize(); var VvB = tvB.FW * sVb; var Fvb = tvB.FH * sVb; var wVb = this.GetCenter(); var LvB = new SBounds(wVb.FLon - VvB / 2, wVb.FLat - Fvb / 2, wVb.FLon + VvB / 2, wVb.FLat + Fvb / 2); this.ZoomToExtent(LvB); }
SMap.prototype.GetLonLatFromViewPortPx = function (xvB) { var YvB = null; if (xvB != null) { if (this.FCenter) { var hVB = this.GetResolution(); var Zfb = xvB.FX - (this.FSize.FW / 2); var nfB = xvB.FY - (this.FSize.FH / 2); YvB = new SLonLat(this.FCenter.FLon + Zfb * hVB, this.FCenter.FLat - nfB * hVB); } } return YvB; }
SMap.prototype.GetViewPortPxFromLonLat = function (bfb, uFB) { var dfB = null; if (bfb != null) { var OFb = this.GetResolution(); if (uFB != null) { OFb = uFB; } var cfb = this.GetExtent(); dfB = new SPixel(Math.round(1 / OFb * (bfb.GetLon() - cfb.GetLeft())), Math.round(1 / OFb * (cfb.GetTop() - bfb.GetLat()))); } return dfB; }
SMap.prototype.GetLonLatFromPixel = function (Efb) { return this.GetLonLatFromViewPortPx(Efb); }
SMap.prototype.GetPixelFromLonLat = function (gfb) { return this.GetViewPortPxFromLonLat(gfb); }
SMap.prototype.GetViewPortPxFromMapPx = function (Kfb) { var MFb = null; if (Kfb != null) { var pFb = parseInt(this.FLayerContainerDiv.style.left); var QFB = parseInt(this.FLayerContainerDiv.style.top); MFb = Kfb.Add(pFb, QFB); } return MFb; }
SMap.prototype.GetMapPxFromViewPortPx = function (RfB) { var sFb = null; if (RfB != null) { var tFb = -parseInt(this.FLayerContainerDiv.style.left); var VFb = -parseInt(this.FLayerContainerDiv.style.top); sFb = RfB.Add(tFb, VFb); if (isNaN(sFb.FX) || isNaN(sFb.FY)) { sFb = null; } } return sFb; }
SMap.prototype.GetLonLatFromMapPx = function (FFB) { FFB = this.GetViewPortPxFromMapPx(FFB); return this.GetLonLatFromViewPortPx(FFB); }
SMap.prototype.GetMapPxFromLonLat = function (wfB) { var lFb = this.GetViewPortPxFromLonLat(wfB); return this.GetMapPxFromViewPortPx(lFb); }
SMap.prototype.GetTileSize = function () { return this.FTileSize; }
SMap.prototype._SetRelativeOptionS = function () { this._SetRelativeMaxExtent(); this._SetRelativeCenter(); this._SetRelativeExtent(); }
SMap.prototype._SetRelativeMaxExtent = function () { var xfB = new SBounds(); var YFb = this.GetResolution(); xfB.FRight = parseInt(Math.round((this.FMaxExtent.FRight - this.FMaxExtent.FLeft) / YFb)); xfB.FTop = parseInt(Math.round((this.FMaxExtent.FTop - this.FMaxExtent.FBottom) / YFb)); this._relativeMaxExtent = xfB; this._CorrectRelativeExtent(this._relativeMaxExtent); }
SMap.prototype._CorrectRelativeExtent = function () { if (this._relativeMaxExtent != null) { var hfb = this._relativeMaxExtent.FRight % this.FTileSize.FW; var Zwb = this._relativeMaxExtent.FTop % this.FTileSize.FH; if (hfb > this.FTileSize.FW / 2) { this._relativeMaxExtent.FRight += this.FTileSize.FW - hfb; } else { this._relativeMaxExtent.FRight -= hfb; } if (Zwb > this.FTileSize.FH / 2) { this._relativeMaxExtent.FTop += this.FTileSize.FH - Zwb; } else { this._relativeMaxExtent.FTop -= Zwb; } } }
SMap.prototype._SetRelativeCenter = function () { var nWb = new SPixel(); if (this.FCenter != null) { var BwB = this._relativeMaxExtent; var uwb = (this.FCenter.FLon - this.FMaxExtent.FLeft) / this.FMaxExtent.GetWidth(); var dWb = BwB.GetWidth(); nWb.FX = parseInt(uwb * dWb); var OWB = (this.FCenter.FLat - this.FMaxExtent.FBottom) / this.FMaxExtent.GetHeight(); var cWB = BwB.GetHeight(); nWb.FY = parseInt(OWB * cWB); } this._relativeCenter = nWb; }
SMap.prototype._SetRelativeExtent = function () { var EWB = this._relativeCenter; this._relativeExtent = new SBounds(EWB.FX - this.FSize.FW / 2, EWB.FY - this.FSize.FH / 2, EWB.FX + this.FSize.FW / 2, EWB.FY + this.FSize.FH / 2); }
SMap.prototype.GetMapTop = function () { if (this.FLayerContainerDiv != null) { return this.FLayerContainerDiv.style.posTop; } return 0; }
SMap.prototype.GetMapLeft = function () { if (this.FLayerContainerDiv != null) { return this.FLayerContainerDiv.style.posLeft; } return 0; }
SMap.prototype.SetCursor = function (GwB) { if (GwB != null) { this.FDiv.style.cursor = GwB; } }
SMap.prototype.GetRandomLonLat = function () { var KwB = SUtil.RandomBy(1, 500); var mWb = KwB * this.FMaxExtent.GetWidth() / 500 + this.FMaxExtent.GetLeft(); KwB = SUtil.RandomBy(1, 500); var PwB = KwB * this.FMaxExtent.GetHeight() / 500 + this.FMaxExtent.GetBottom(); KwB = null; return new SLonLat(mWb, PwB); }
SMap.prototype.GetTilesContainerBound = function () { var qWb = this.GetCenter(); }
SMap.prototype.Show = function () { this.FDiv.style.display = "inline"; }
SMap.prototype.Hide = function () { this.FDiv.style.display = "none"; }
SMap.__IntervalFun = function (Rwb) { var sWB = Rwb.GetResolution(); var TWB = sWB * Rwb._FVMovePixel; var vWB = sWB * Rwb._FHMovePixel; var fWB = new SLonLat(); var WwB = Rwb.GetCenter(); fWB.FLon = WwB.FLon; fWB.FLat = WwB.FLat; var lwb = Rwb._FAimCenter; if (Math.abs(lwb.FLon - fWB.FLon) > vWB || Math.abs(lwb.FLat - fWB.FLat) > TWB) { if (Math.abs(lwb.FLon - fWB.FLon) > vWB) { if (lwb.FLon > fWB.FLon) { fWB.FLon = fWB.FLon + vWB; } else if (lwb.FLon < fWB.FLon) { fWB.FLon = fWB.FLon - vWB; } } if (Math.abs(lwb.FLat - fWB.FLat) > TWB) { if (lwb.FLat > fWB.FLat) { fWB.FLat = fWB.FLat + TWB; } else if (lwb.FLat < fWB.FLat) { fWB.FLat = fWB.FLat - TWB; } } Rwb.SetCenter(new SLonLat(parseFloat(fWB.FLon), parseFloat(fWB.FLat))); } else { Rwb.SetCenter(lwb); window.clearInterval(Rwb._FIntervalHandle); } }
function STileLayer(xWB, YwB, HWb) { this.serviceVersion = "1.0.2"; this.isBaseLayer = true; this.tileOrigin = null; if (!HWb) { HWb = "png"; } this.FType = HWb; STileLayerBase.call(this, xWB, YwB); }
STileLayer.prototype = new STileLayerBase();
STileLayer.prototype.ClassName = SClassName.STileLayer; STileLayer.prototype.Destroy = function () { STileLayerBase.prototype.Destroy.apply(this, arguments); }
STileLayer.prototype.Clone = function (ZLb) { if (ZLb == null) { ZLb = new STileLayer(this.FName, this.FUrl, this.FType); } ZLb = STileLayerBase.prototype.Clone.apply(this, [ZLb]); return ZLb; }
STileLayer.prototype._GetURL = function (NLB) { if (JSecurity.IsValid()) { var BlB = this.FMap.GetZoom(); var uLb = ++BlB + "_" + NLB.FCol + "_" + NLB.FRow + "." + this.FType; return this.FUrl + uLb; } }
STileLayer.prototype.GetType = function () { if (JSecurity.IsValid()) { return this.FType; } }
STileLayer.prototype.AddTile = function (dLB, olB) { return new SImage(this, olB, dLB, null, this.FTileSize); }
STileLayer.prototype.SetMap = function (Clb) { STileLayerBase.prototype.SetMap.apply(this, arguments); if (!this.tileOrigin) { this.tileOrigin = new SLonLat(this.FMap.FMaxExtent.FLeft, this.FMap.FMaxExtent.FBottom); } }
function SGeometry() { this.FParent2 = null; this.FBounds = null; this.FId = SUtil.CreateUid(this.ClassName); this.FFeatureId = null; }
SGeometry.prototype.ClassName = SClassName.SGeometry; SGeometry.prototype.Destroy = function () { this.FId = null; this.FBounds = null; }
SGeometry.prototype.GetFeatureId = function () { return this.FFeatureId; }
SGeometry.prototype.Clone = function () { var Elb = new SGeometry(); Elb.FParent2 = this.FParent2; Elb.FBounds = this.FBounds; Elb.FId = this.FId; Elb.FFeatureId = this.FFeatureId; return Elb; }
SGeometry.prototype.GetId = function () { return this.FId; }
SGeometry.prototype.Clone = function () { return SUtil.CloneObject(this); }
SGeometry.prototype.SetBound = function (Glb) { if (Glb) { this.FBounds = Glb.Clone(); } }
SGeometry.prototype.ClearBound = function () { this.FBounds = null; if (this.FParent2) { this.FParent2.ClearBound(); } }
SGeometry.prototype.ExtendBound = function (kLB) { var MLb = this.GetBound(); if (!MLb) { this.SetBound(kLB); } else { this.FBounds.Extend(kLB); } }
SGeometry.prototype.GetBound = function () { this.CalcuBound(); return this.FBounds; }
SGeometry.prototype.CalcuBound = function () { }
SGeometry.prototype.AtPoint = function (plb, qlb, rLB) { var SLb = false; var Tlb = this.GetBound(); if ((Tlb != null) && (plb != null)) { var vlb = (qlb != null) ? qlb : 0; var Flb = (rLB != null) ? rLB : 0; var WLb = new SBounds(this.FBounds.FLeft - vlb, this.FBounds.FBottom - Flb, this.FBounds.FRight + vlb, this.FBounds.FTop + Flb); SLb = WLb.ContainsLonLat(plb); } return SLb; }
SGeometry.prototype.GetLength = function () { return 0.0; }
SGeometry.prototype.GetArea = function () { return 0.0; }
SGeometry.prototype.MouseOver = function (lLb) { return false; }
SGeometry.prototype.Click = function () { return false; }
SGeometry.prototype.MouseDown = function () { }
SGeometry.prototype.Activate = function (c) { }
SGeometry.prototype.DeActivate = function () { return false; }
SGeometry.prototype.ToString = function () { }
function SCollection(xLB) { SGeometry.call(this); this.FComponentTypes = null; this.FComponents = []; if (xLB != null) { this.AddComponents(xLB); } }
SCollection.prototype = new SGeometry();
SCollection.prototype.ClassName = SClassName.SCollection; SCollection.prototype.GetComponents = function () { return this.FComponents; }
SCollection.prototype.GetPoints = function () { return this.FComponents; }
SCollection.prototype.SetComponents = function (YLB) { this.FComponents = YLB; }
SCollection.prototype.SetComponentTypes = function (Hlb) { this.FComponentTypes = Hlb; }
SCollection.prototype.GetComponentTypes = function () { return this.FComponentTypes; }
SCollection.prototype.ClearComponents = function () { if (this.FComponents != null) { this.FComponents.length = 0; } }
SCollection.prototype.Destroy = function () { this.FComponents.length = 0; this.FComponents = null; }
SCollection.prototype.GetComponentsString = function () { var zxB = []; for (var i = 0; i < this.FComponents.length; i++) { zxB.push(this.FComponents[i].ToShortString()); } return zxB.join(","); }
SCollection.prototype.GetPointsString = function () { return this.GetComponentsString(); }
SCollection.prototype.CalcuBound = function () { this.FBounds = null; if (this.FComponents && this.FComponents.length > 0) { this.SetBound(this.FComponents[0].GetBound()); for (var i = 1; i < this.FComponents.length; i++) { this.FBounds.Extend(this.FComponents[i].GetBound()); } } }
SCollection.prototype.AddComponents = function (nXb) { if (!(nXb instanceof Array)) { nXb = [nXb]; } for (var i = 0; i < nXb.length; i++) { this.AddComponent(nXb[i]); } }
SCollection.prototype.AddComponent = function (BXB, uxb) { var dXb = false; if (BXB) { if (this.FComponentTypes == null || (SUtil.IndexOf(this.FComponentTypes, BXB.ClassName) > -1)) { if (uxb != null && (uxb < this.FComponents.length)) { var OxB = this.FComponents.slice(0, uxb); var cxB = this.FComponents.slice(uxb, this.FComponents.length); OxB.push(BXB); this.FComponents = OxB.concat(cxB); } else { this.FComponents.push(BXB); } BXB.parent = this; this.ClearBound(); dXb = true; } } return dXb; }
SCollection.prototype.RemoveComponents = function (exB) { if (!(exB instanceof Array)) { exB = [exB]; } for (var i = 0; i < exB.length; i++) { this.RemoveComponent(exB[i]); } }
SCollection.prototype.RemoveComponent = function (GXb) { SUtil.RemoveItem(this.FComponents, GXb); this.ClearBound(); }
SCollection.prototype.GetLength = function () { var KXb = 0.0; for (var i = 0; i < this.FComponents.length; i++) { KXb += this.FComponents[i].GetLength(); } return KXb; }
SCollection.prototype.GetArea = function () { var mXb = 0.0; for (var i = 0; i < this.FComponents.length; i++) { mXb += this.FComponents[i].GetArea(); } return mXb; }
SCollection.prototype.Move = function (pxb, qxb) { for (var i = 0; i < this.FComponents.length; i++) { this.FComponents[i].move(pxb, qxb); } }
SCollection.prototype.Rotate = function (RxB, SXB) { for (var i = 0; i < this.FComponents.length; ++i) { this.FComponents[i].rotate(RxB, SXB); } }
SCollection.prototype.Resize = function (Txb, Vxb) { for (var i = 0; i < this.FComponents.length; ++i) { this.FComponents[i].resize(Txb, Vxb); } }
SCollection.prototype.Equals = function (fXB) { var WxB = true; if (!fXB.ClassName || (this.ClassName != fXB.ClassName)) { WxB = false; } else if (!(fXB.FComponents instanceof Array) || (fXB.FComponents.length != this.FComponents.length)) { WxB = false; } else { for (var i = 0; i < this.FComponents.length; ++i) { if (!this.FComponents[i].Equals(fXB.FComponents[i])) { WxB = false; break; } } } return WxB; }
SCollection.prototype.GetCenter = function () { var lxB = []; var XxB = SUtil.GetMaxBounds(lxB); for (var m = 0; m < this.FComponents.length; m++) { var YXb = new SLonLat(); YXb.FLon = this.FComponents[m].FX; YXb.FLat = this.FComponents[m].FY; lxB.push(YXb); } return XxB.GetCLonLat(); }
function SPoint(hXb, ZyB) { SGeometry.call(this, hXb, ZyB); this.FX = parseFloat(hXb); this.FY = parseFloat(ZyB); }
SPoint.prototype = new SGeometry();
SPoint.prototype.ClassName = SClassName.SPoint; SPoint.prototype.SetXY = function (Nyb, Byb) { if (Nyb != undefined) { this.FX = parseFloat(Nyb); } if (Byb != undefined) { this.FY = parseFloat(Byb); } }
SPoint.prototype.GetX = function () { return this.FX; }
SPoint.prototype.GetY = function () { return this.FY; }
SPoint.prototype.CalcuBound = function () { this.FBounds = new SBounds(this.FX, this.FY, this.FX, this.FY); }
SPoint.prototype.DistanceTo = function (UyB) { return SPoint.CalcuDistance(UyB, this); }
SPoint.prototype.Equals = function (dyB) { var Oyb = false; if (dyB != null) { Oyb = ((this.FX == dyB.FX && this.FY == dyB.FY) || (isNaN(this.FX) && isNaN(this.FY) && isNaN(dyB.FX) && isNaN(dyB.FY))); } return Oyb; }
SPoint.prototype.FromShortString = function (cYb) { if (cYb != null) { var eyB = cYb.split(' '); if (eyB.length == 2) { this.FX = eyB[0]; this.FY = eyB[1]; } } }
SPoint.prototype.ToShortString = function () { return (this.FX + " " + this.FY); }
SPoint.prototype.Move = function (gYb, KYB) { this.FX = this.FX + gYb; this.FY = this.FY + KYB; this.ClearBound(); }
SPoint.prototype.Rotate = function (MYb, PYB) { MYb *= Math.PI / 180; var QYb = this.distanceTo(PYB); var rYB = MYb + Math.atan2(this.FY - PYB.FY, this.FX - PYB.FX); this.FX = PYB.FX + (QYb * Math.cos(rYB)); this.FY = PYB.FY + (QYb * Math.sin(rYB)); this.ClearBound(); }
SPoint.prototype.Resize = function (Syb, TYB) { this.FX = TYB.FX + (Syb * (this.FX - TYB.FX)); this.FY = TYB.FY + (Syb * (this.FY - TYB.FY)); this.ClearBound(); }
SPoint.prototype.GetCenter = function () { return new SPoint(this.FX, this.FY); }
SPoint.CalcuDistance = function (vYB, fYb) { var wYB = 0.0; if ((vYB != null) && (vYB.FX != null) && (vYB.FY != null) && (fYb != null) && (fYb.FX != null) && (fYb.FY != null)) { var Lyb = Math.pow(vYB.FX - fYb.FX, 2); var xYB = Math.pow(vYB.FY - fYb.FY, 2); wYB = Math.sqrt(Lyb + xYB); } return wYB; }
SPoint.GetPointSFromString = function (yyb) { var HYB = []; if (yyb != null && yyb != "") { var ZHB = yyb.split(','); for (var u = 0; u < ZHB.length; u++) { if (ZHB[u] != "") { var NHB = ZHB[u].split(' '); if (NHB.length == 2) { var bHb = new SPoint(NHB[0], NHB[1]); HYB.push(bHb); } } } } return HYB; }
SPoint.GetStringFromPointS = function (UHb) { var dHb = ""; for (var u = 0; u < UHb.length; u++) { var oHB = UHb[u]; dHb = dHb + oHB.ToShortString(); if (u != UHb.length - 1) { dHb = dHb + ","; } } return dHb; }
SPoint.FromShortString2 = function (cHB) { var EHB = new SPoint(); EHB.FromShortString(cHB); return EHB; }
function SMultiPoint(ghb) { SCollection.call(this, ghb); this.SetComponentTypes([SClassName.SPoint]); }
SMultiPoint.prototype = new SCollection();
SMultiPoint.prototype.ClassName = SClassName.SMultiPoint; SMultiPoint.prototype.AddPoint = function (khB, mhB) { this.AddComponent(khB, mhB); }
SMultiPoint.prototype.RemovePoint = function (phb) { this.RemoveComponent(phb); }
SMultiPoint.prototype.CalcuDistance = function () { var l = 0; for (var u = 1; u < this.FComponents.length; u++) { var qhB = this.FComponents[u]; l = l + Math.round(SPoint.CalcuDistance(qhB, this.FComponents[u - 1]) * SSystem.PerMapUnitMi); } return Math.round(l); }
function SCurve(rHB) { SMultiPoint.call(this, rHB); this.SetComponentTypes([SClassName.SPoint]); }
SCurve.prototype = new SMultiPoint();
SCurve.prototype.ClassName = SClassName.SCurve; SCurve.prototype.GetLength = function () { var ShB = 0.0; var tHB = this.GetComponents(); if (tHB && (tHB.length > 1)) { for (var i = 1; i < tHB.length; i++) { ShB += tHB[i - 1].DistanceTo(tHB[i]); } } return ShB; }
function SLineString(VhB) { SCurve.call(this, VhB); }
SLineString.prototype = new SCurve();
SLineString.prototype.ClassName = SClassName.SLineString; SLineString.prototype.RemoveComponent = function (Fhb) { if (this.GetComponents() && (this.GetComponents().length > 2)) { SCollection.prototype.RemoveComponent.call(this, Fhb); } }
function SLinearRing(WHb) { SLineString.call(this, WHb); this.SetComponentTypes([SClassName.SPoint]); }
SLinearRing.prototype = new SLineString();
SLinearRing.prototype.ClassName = SClassName.SLinearRing; SLinearRing.prototype.ToShortString = function () { var lHB = []; var xhB = this.GetComponents(); for (var i = 0; i < xhB.length; i++) { lHB.push(xhB[i].ToShortString()); } return lHB.join(","); }
SLinearRing.prototype.AddComponent = function (yhb, hhb) { var ZZu = false; var NZU = this.GetComponents(); var bzU = NZU.pop(); if (hhb != null || !yhb.Equals(bzU)) { ZZu = SCollection.prototype.AddComponent.apply(this, arguments); } var Uzu = NZU[0]; SCollection.prototype.AddComponent.apply(this, [Uzu]); return ZZu; }
SLinearRing.prototype.RemoveComponent = function (dZU) { var oZU = this.GetComponents(); if (oZU.length > 4) { oZU.pop(); SCollection.prototype.RemoveComponent.apply(this, arguments); var CZU = oZU[0]; SCollection.prototype.AddComponent.apply(this, [CZU]); } }
SLinearRing.prototype.Move = function (ezu, gZu) { var kZU = this.GetComponents(); for (var i = 0; i < kZU.length - 1; i++) { kZU[i].Move(ezu, gZu); } }
SLinearRing.prototype.Rotate = function (mZU, PZU) { var qZU = this.GetComponents(); for (var i = 0; i < qZU.length - 1; ++i) { qZU[i].Rotate(mZU, PZU); } }
SLinearRing.prototype.Resize = function (rzU, szU) { var tzU = this.GetComponents(); for (var i = 0; i < tzU.length - 1; ++i) { tzU[i].Resize(rzU, szU); } }
SLinearRing.prototype.GetArea = function () { var VzU = 0.0; var fzu = this.GetComponents(); if (fzu && (fzu.length > 2)) { var WZu = 0.0; for (var i = 0; i < fzu.length - 1; i++) { var b = fzu[i]; var c = fzu[i + 1]; WZu += (b.FX + c.FX) * (c.FY - b.FY); } VzU = -WZu / 2.0; } return VzU; }
function SCircle(LZU, xZU, YZu) { this.FX = null; this.FY = null; this.FRadius = null; this.FX = LZU == undefined ? 0 : parseFloat(LZU); this.FY = xZU == undefined ? 0 : parseFloat(xZU); this.FRadius = YZu == undefined ? 0 : parseFloat(YZu); SGeometry.call(this); } function SCircle(LZU, xZU, YZu) { this.FX = null; this.FY = null; this.FRadius = null; this.FX = LZU == undefined ? 0 : parseFloat(LZU); this.FY = xZU == undefined ? 0 : parseFloat(xZU); this.FRadius = YZu == undefined ? 0 : parseFloat(YZu); SGeometry.call(this); }
SCircle.prototype = new SGeometry(); SCircle.prototype = new SGeometry();
SCircle.prototype.ClassName = SClassName.SCircle; SCircle.prototype.GetX = function () { return this.FX; }
SCircle.prototype.GetY = function () { return this.FY; }
SCircle.prototype.GetRadius = function () { return this.FRadius; }
SCircle.prototype.CalcuBound = function () { this.FBounds = new SBounds(this.FX, this.FY, this.FX + 2 * pRadius, this.FY + 2 * pRadius); }
SCircle.prototype.GetLength = function () { var hZu = 2 * Math.PI * this.FRadius; return hZu; }
SCircle.prototype.GetArea = function () { var zNU = this.FRadius * this.FRadius * Math.PI; return zNU; }
SCircle.prototype.ToShortString = function () { return (this.FX + " " + this.FY + " " + this.FRadius); }
SCircle.prototype.GetCenter = function () { return new SPoint(this.FX, this.FY); }
SCircle.prototype.GetX = function () { return this.FX; }
SCircle.prototype.GetY = function () { return this.FY; }
SCircle.prototype.GetRadius = function () { return this.FRadius; }
SCircle.prototype.CalcuBound = function () { this.FBounds = new SBounds(this.FX, this.FY, this.FX + 2 * pRadius, this.FY + 2 * pRadius); }
SCircle.prototype.GetLength = function () { var nNu = 2 * Math.PI * this.FRadius; return nNu; }
SCircle.prototype.GetArea = function () { var BNu = this.FRadius * this.FRadius * Math.PI; return BNu; }
SCircle.prototype.ToShortString = function () { return (this.FX + " " + this.FY + " " + this.FRadius); }
SCircle.prototype.GetCenter = function () { return new SPoint(this.FX, this.FY); }

function SRectangle(UNU, DNu, ONu, cnU) { this.FX = null; this.FY = null; this.FWidth = null; this.FHeight = null; this.FX = UNU == undefined ? 0 : parseFloat(UNU); this.FY = DNu == undefined ? 0 : parseFloat(DNu); this.FWidth = ONu == undefined ? 0 : parseFloat(ONu); this.FHeight = cnU == undefined ? 0 : parseFloat(cnU); SGeometry.call(this); }
SRectangle.prototype = new SGeometry();
SRectangle.prototype.ClassName = SClassName.SRectangle; SRectangle.prototype.GetX = function () { return this.FX; }
SRectangle.prototype.GetY = function () { return this.FY; }
SRectangle.prototype.GetWidth = function () { return this.FWidth; }
SRectangle.prototype.GetHeight = function () { return this.FHeight; }
SRectangle.prototype.GetCenter = function () { return new SLonLat(this.FX + this.FWidth / 2, this.FY + this.FHeight / 2); }
SRectangle.prototype.CalcuBound = function () { this.FBounds = new SBounds(this.FX, this.FY, this.FX + this.FWidth, this.FY + this.FHeight); }
SRectangle.prototype.GetLength = function () { var eNU = Math.abs((2 * this.FWidth)) + Math.abs((2 * this.FHeight)); return eNU; }
SRectangle.prototype.GetArea = function () { var GnU = Math.abs(this.FWidth * this.FHeight); return GnU; }
SRectangle.prototype.ToShortString = function () { return (this.FX + " " + this.FY + " " + this.FWidth + " " + this.FHeight); }
SRectangle.prototype.Clone = function () { var kNu = new SRectangle(this.FX, this.FY, this.FWidth, this.FHeight); SUtil.ApplyDefaults(kNu, this); return kNu; }
function SPolygon(mNu) { SCollection.apply(this, arguments); this.SetComponentTypes([SClassName.SLinearRing]); }
SPolygon.prototype = new SCollection();
SPolygon.prototype.ClassName = SClassName.SPolygon; SPolygon.prototype.GetArea = function () { var PNU = 0.0; var qnU = this.GetComponents(); if (qnU && (qnU.length > 0)) { PNU += Math.abs(qnU[0].GetArea()); for (var i = 1; i < qnU.length; i++) { PNU -= Math.abs(qnU[i].GetArea()); } } return PNU; }
SPolygon.CreateRegularPolygon = function (rNu, Snu, tNu, vNU) { var fnU = Math.PI * ((1 / tNu) - (1 / 2)); if (vNU) { fnU += (vNU / 180) * Math.PI; } var wNu, pX, pY; var LnU = []; for (var i = 0; i < tNu; ++i) { rotatedAngle = fnU + (i * 2 * Math.PI / tNu); pX = rNu.FX + (Snu * Math.cos(rotatedAngle)); pY = rNu.FY + (Snu * Math.sin(rotatedAngle)); LnU.push(new SPoint(pX, pY)); } var XNu = new SLinearRing(LnU); return new SPolygon([XNu]); }
function SMultiPolygon(ynU) { SCollection.apply(this, arguments); this.SetComponentTypes([SClassName.SPolygon]); }
SMultiPolygon.prototype = new SCollection();
SMultiPolygon.prototype.ClassName = SClassName.SMultiPolygon; function SHKinetic() { this.threshold = 0; this.deceleration = 0.0035; this.nbPoints = 30; this.delay = 200; this.points = undefined; this.timerId = undefined; }
SHKinetic.ClassName = SClassName.SHKinetic; SHKinetic.prototype.Begin = function () { SAnimation.stop(this.timerId); this.timerId = undefined; this.points = []; }
SHKinetic.prototype.Update = function (HnU) { this.points.unshift({ xy: HnU, tick: new Date().getTime() }); if (this.points.length > this.nbPoints) { this.points.pop(); } }
SHKinetic.prototype.End = function (ZBu) { var nbu, now = new Date().getTime(); for (var i = 0, l = this.points.length, point; i < l; i++) { point = this.points[i]; if (now - point.tick > this.delay) { break; } nbu = point; } if (!nbu) { return; } var bbu = new Date().getTime() - nbu.tick; var UBU = Math.sqrt(Math.pow(ZBu.FX - nbu.xy.FX, 2) + Math.pow(ZBu.FY - nbu.xy.FY, 2)); var dBU = UBU / bbu; if (dBU == 0 || dBU < this.threshold) { return; } var obU = Math.asin((ZBu.FY - nbu.xy.FY) / UBU); if (nbu.xy.FX <= ZBu.FX) { obU = Math.PI - obU; } return { speed: dBU, theta: obU }; }
SHKinetic.prototype.Move = function (CbU, ebU) { var gBu = CbU.speed; var kBU = Math.cos(CbU.theta); var mbu = -Math.sin(CbU.theta); var pbU = new Date().getTime(); var QBU = 0; var rbu = 0; var SbU = function () { if (this.timerId == null) { return; } var t = new Date().getTime() - pbU; var p = (-this.deceleration * Math.pow(t, 2)) / 2.0 + gBu * t; var x = p * kBU; var y = p * mbu; var tbU = {}; tbU.end = false; var v = -this.deceleration * t + gBu; if (v <= 0) { SAnimation.stop(this.timerId); this.timerId = null; tbU.end = true; } tbU.x = x - QBU; tbU.y = y - rbu; QBU = x; rbu = y; ebU(tbU.x, tbU.y, tbU.end); }; this.timerId = SAnimation.start(SFunction.Bind(SbU, this)); }
function SHandler(vBu, FBU, wbU) { this.FControl = null; this.FMap = null; this.FKeyMask = wbU; this.FActive = false; this.FEvt = null; this.FControl = vBu; this.FCallbacks = FBU; if (vBu) { if (vBu.FMap) { this.SetMap(vBu.FMap); } } this.FId = SUtil.CreateUid(this.ClassName); }
SHandler.MOD_NONE = 0; SHandler.MOD_SHIFT = 1; SHandler.MOD_CTRL = 2; SHandler.MOD_ALT = 4; SHandler.prototype.ClassName = SClassName.SHandler; SHandler.prototype.SetMap = function (Lbu) { this.FMap = Lbu; }
SHandler.prototype.GetMap = function () { return this.FMap; }
SHandler.prototype.GetId = function () { return this.FId; }
SHandler.prototype.CheckModifiers = function (xbU) { if (this.FKeyMask == null) { return true; } var yBu = (xbU.shiftKey ? SHandler.MOD_SHIFT : 0) | (xbU.ctrlKey ? SHandler.MOD_CTRL : 0) | (xbU.altKey ? SHandler.MOD_ALT : 0); return (yBu == this.FKeyMask); }
SHandler.prototype.Activate = function () { this.FActive = true; return true; }
SHandler.prototype.DeActivate = function () { if (!this.FActive) { return false; } this.FActive = false; return true; }
SHandler.prototype.GetActive = function () { return this.FActive; }
SHandler.prototype.CallBack = function (hbU, ZUu) { if (this.FCallbacks[hbU]) { this.FCallbacks[hbU].apply(this.FControl, ZUu); } }
SHandler.prototype.Register = function (nUu, bUU) { this.FMap.FEvents.RegisterPriority(nUu, this, bUU); this.FMap.FEvents.RegisterPriority(nUu, this, this.SetEvent); }
SHandler.prototype.AddEventListener = function (uuU, dUu) { this.Register(uuU, dUu); }
SHandler.prototype.RemoveEventListener = function (OuU, CuU) { this.UnRegister(OuU, CuU); }
SHandler.prototype.UnRegister = function (EuU, GUU) { this.FMap.FEvents.UnRegister(EuU, this, GUU); this.FMap.FEvents.UnRegister(EuU, this, this.setEvent); }
SHandler.prototype.SetEvent = function (Kuu) { this.FEvt = Kuu; return true; }
SHandler.prototype.Destroy = function () { this.DeActivate(); this.FControl = this.FMap = null; }
function SMDrag(Muu, puU) { this.FStarted = false; this.FDragging = false; this.FLast = null; this.FStart = null; this.FOldOnselectstart = null; SHandler.call(this, Muu, puU); }
SMDrag.prototype = new SHandler();
SMDrag.prototype.ClassName = SClassName.SMDrag; SMDrag.prototype.Down = function (QUu) { }
SMDrag.prototype.Move = function (RUU) { }
SMDrag.prototype.Up = function (SuU) { }
SMDrag.prototype.Out = function (Tuu) { }
SMDrag.prototype.MouseDown = function (vuu) { var fuU = true; this.FDragging = false; if (this.CheckModifiers(vuu) && (SEvent.IsLeftClick(vuu) || SEvent.IsSingleTouch(vuu))) { this.FStarted = true; this.FStart = vuu.pXY; this.FLast = vuu.pXY; this.CallBack("Down", [vuu.pXY]); SEvent.Stop(vuu); fuU = false; } else { this.FStarted = false; this.FStart = null; this.FLast = null; } return fuU; }
SMDrag.prototype.MouseMove = function (WUU) { if (this.FStarted) { if (WUU.pXY.FX != this.FLast.FX || WUU.pXY.FY != this.FLast.FY) { this.FDragging = true; this.CallBack("Move", [WUU.pXY]); this.FLast = WUU.pXY; } } return true; }
SMDrag.prototype.MouseUp = function (LuU) { if (this.FStarted) { var xUu = (this.FStart != this.FLast); this.FStarted = false; this.FDragging = false; this.CallBack("Up", [LuU.pXY]); if (xUu) { this.CallBack("Done", [LuU.pXY]); } } return true; }
SMDrag.prototype.TouchEnd = function (yUu) { if (this.FStarted) { yUu.pXY = this.FLast; var huu = (this.FStart != this.FLast); this.FStarted = false; this.FDragging = false; this.CallBack("Up", [yUu.pXY]); if (huu) { this.CallBack("Done", [yUu.pXY]); } } return true; }
SMDrag.prototype.MouseOut = function (zdU) { if (this.FStarted && SUtil.MouseLeft(zdU, this.FMap.FDiv)) { var Ndu = (this.FStart != this.FLast); this.FStarted = false; this.Out(zdU); this.CallBack("Out", []); if (Ndu) { this.CallBack("Done", [zdU.pXY]); } if (document.onselectstart) { } } return true; }
SMDrag.prototype.Click = function (BdU) { return (this.FStart == this.FLast); }
SMDrag.prototype.MouseOver = function (uDU) { return false; }
SMDrag.prototype.Activate = function () { var DDU = false; this.Register("click", this.Click); this.Register("mouseout", this.MouseOut); this.Register("mouseup", this.MouseUp); this.Register("mousemove", this.MouseMove); this.Register("mousedown", this.MouseDown); this.Register("mouseover", this.MouseOver); this.Register("touchstart", this.MouseDown); this.Register("touchmove", this.MouseMove); this.Register("touchend", this.TouchEnd); this.FDragging = false; DDU = true; }
SMDrag.prototype.DeActivate = function () { var odU = false; if (SHandler.prototype.DeActivate.apply(this, arguments)) { this.FStarted = false; this.FDragging = false; this.FStart = null; this.FLast = null; odU = true; } return odU; }
function SHBox(edu, cdU, KDU) { this.FDragHandler = null; this.FKeyMask = KDU; SHandler.call(this, edu, cdU, this.FKeyMask); var cdU = { "Down": this.StartBox, "Move": this.MoveBox, "Out": this.RemoveBox, "Up": this.EndBox }; this.FDragHandler = new SMDrag(this, cdU, this.FKeyMask); }
SHBox.prototype = new SHandler();
SHBox.prototype.ClassName = SClassName.SHBox; SHBox.prototype.SetMap = function (mdU) { SHandler.prototype.SetMap.apply(this, arguments); if (this.FDragHandler) { this.FDragHandler.SetMap(mdU); } }
SHBox.prototype.StartBox = function (PDu) { this.FZoomBox = SUtil.CreateDiv('zoomBox', this.FDragHandler.FStart, null, null, "absolute", "2px solid red"); this.FZoomBox.style.backgroundColor = "white"; this.FZoomBox.style.filter = "alpha(opacity=50)"; this.FZoomBox.style.opacity = "0.50"; this.FZoomBox.style.fontSize = "1px"; this.FZoomBox.style.zIndex = this.FMap.Z_INDEX_BASE["Popup"] - 1; this.FMap.FViewPortDiv.appendChild(this.FZoomBox); this.FMap.FDiv.style.cursor = "crosshair"; }
SHBox.prototype.MoveBox = function (QDu) { var RDU = Math.abs(this.FDragHandler.FStart.FX - QDu.FX); var sdU = Math.abs(this.FDragHandler.FStart.FY - QDu.FY); this.FZoomBox.style.width = Math.max(1, RDU) + "px"; this.FZoomBox.style.height = Math.max(1, sdU) + "px"; if (QDu.FX < this.FDragHandler.FStart.FX) { this.FZoomBox.style.left = QDu.FX + "px"; } if (QDu.FY < this.FDragHandler.FStart.FY) { this.FZoomBox.style.top = QDu.FY + "px"; } }
SHBox.prototype.EndBox = function (TDU) { var vdu; if (Math.abs(this.FDragHandler.FStart.FX - TDU.FX) > 5 || Math.abs(this.FDragHandler.FStart.FY - TDU.FY) > 5) { var Fdu = this.FDragHandler.FStart; var Wdu = Math.min(Fdu.FY, TDU.FY); var ldU = Math.max(Fdu.FY, TDU.FY); var XdU = Math.min(Fdu.FX, TDU.FX); var YDu = Math.max(Fdu.FX, TDU.FX); vdu = new SBounds(XdU, ldU, YDu, Wdu); } else { vdu = this.FDragHandler.FStart.Clone(); } this.RemoveBox(); this.FMap.FDiv.style.cursor = ""; this.CallBack("done", [vdu]); }
SHBox.prototype.RemoveBox = function () { this.FMap.FViewPortDiv.removeChild(this.FZoomBox); this.FZoomBox = null; }
SHBox.prototype.Activate = function () { if (SHandler.prototype.Activate.apply(this, arguments)) { this.FDragHandler.Activate(); return true; } else { return false; } }
SHBox.prototype.DeActivate = function () { if (SHandler.prototype.DeActivate.apply(this, arguments)) { this.FDragHandler.DeActivate(); return true; } else { return false; } }
function SMMouseWheel(HDU, ZOU) { this.FWheelListener = null; this.FMousePosition = null; SHandler.call(this, HDU, ZOU); this.FWheelListener = SFunction.BindAsEventListener(this.OnWheelEvent, this); }
SMMouseWheel.prototype = new SHandler();
SMMouseWheel.prototype.ClassName = SClassName.SMMouseWheel; SMMouseWheel.prototype.Destroy = function () { SHandler.prototype.Destroy.apply(this, arguments); this.FWheelListener = null; }
SMMouseWheel.prototype.OnWheelEvent = function (e) { if (!this.CheckModifiers(e)) return; var NOu = false; var BOU = SEvent.Element(e); while (BOU != null) { if (this.FMap && BOU == this.FMap.FDiv) { NOu = true; break; } BOU = BOU.parentNode; } if (NOu) { var UoU = 0; if (!e) { e = window.event; } if (e.wheelDelta) { UoU = e.wheelDelta / 120; if (window.opera) { UoU = -UoU; } } else if (e.detail) { UoU = -e.detail / 3; } if (UoU) { if (this.FMousePosition) { e.pXY = this.FMousePosition; } if (!e.pXY) { e.pXY = this.FMap.GetPixelFromLonLat(this.FMap.GetCenter()); } if (UoU < 0) { this.CallBack("down", [e, UoU]); } else { this.CallBack("up", [e, UoU]); } } SEvent.Stop(e); } }
SMMouseWheel.prototype.MouseMove = function (dou) { this.FMousePosition = dou.pXY; }
SMMouseWheel.prototype.Activate = function (oOu) { if (SHandler.prototype.Activate.apply(this)) { var CoU = this.FWheelListener; SEvent.Observe(window, "DOMMouseScroll", CoU); SEvent.Observe(document, "mousewheel", CoU); this.Register("mousemove", this.MouseMove); return true; } else { return false; } }
SMMouseWheel.prototype.DeActivate = function (EOu) { if (SHandler.prototype.DeActivate.apply(this, arguments)) { var gOU = this.FWheelListener; SEvent.StopObserving(window, "DOMMouseScroll", gOU); SEvent.StopObserving(document, "mousewheel", gOU); this.UnRegister("mousemove", this.MouseMove); return true; } else { return false; } }
function SMPanDrag(koU, moU) { SMDrag.call(this, koU, moU); }
SMPanDrag.prototype = new SMDrag();
SMPanDrag.prototype.ClassName = SClassName.SMPanDrag; SMPanDrag.prototype.Move = function (poU) { }
SMPanDrag.prototype.Down = function (QoU) { if (this.FMap.FLayerContainerDiv.setCapture) { } else if (window.captureEvents) { } }
SMPanDrag.prototype.Up = function (Rou) { if (this.FMap.FLayerContainerDiv.releaseCapture) { } else if (window.releaseEvents) { } }
SMPanDrag.prototype.Out = function (Sou) { if (this.FMap.FLayerContainerDiv.releaseCapture) { this.FMap.FLayerContainerDiv.releaseCapture(); } else if (window.releaseEvents) { window.releaseEvents(Event.MOUSEMOVE | Event.MOUSEUP); } }
function SMPinch(tou, vOU) { this.FStarted = false; this.FStopDown = false; this.FPinching = false; this.FLast = null; this.FStart = null; this.FOldOnselectstart = null; SHandler.call(this, tou, vOU); }
SMPinch.prototype = new SHandler();
SMPinch.prototype.ClassName = SClassName.SMPinch; SMPinch.prototype.TouchStart = function (evt) { var foU = true; this.FPinching = false; if (SEvent.IsMultiTouch(evt)) { this.FStarted = true; this.FLast = this.FStart = { distance: this.GetDistance(evt.touches), delta: 0, scale: 1 }; this.CallBack("start", [evt, this.FStart]); foU = !this.FStopDown; } else if (this.FStarted) { return false; } else { this.FStarted = false; this.FStart = null; this.FLast = null; } SEvent.Stop(evt); return foU; }
SMPinch.prototype.TouchMove = function (evt) { if (this.FStarted && SEvent.IsMultiTouch(evt)) { this.FPinching = true; var Wou = this.GetPinchData(evt); this.CallBack("move", [evt, Wou]); this.FLast = Wou; SEvent.Stop(evt); } else if (this.FStarted) { return false; } return true; }
SMPinch.prototype.TouchEnd = function (evt) { if (this.FStarted && !SEvent.IsMultiTouch(evt)) { this.FStarted = false; this.FPinching = false; this.CallBack("done", [evt, this.FStart, this.FLast]); this.FStart = null; this.FLast = null; return false; } return true; }
SMPinch.prototype.Activate = function () { var loU = false; this.Register("touchstart", this.TouchStart); this.Register("touchmove", this.TouchMove); this.Register("touchend", this.TouchEnd); this.FDragging = false; loU = true; }
SMPinch.prototype.DeActivate = function () { var XoU = false; if (SHandler.prototype.DeActivate.apply(this, arguments)) { this.FStarted = false; this.FDragging = false; this.FStart = null; this.FLast = null; XoU = true; } return XoU; }
SMPinch.prototype.GetDistance = function (You) { var HoU = You[0]; var ZcU = You[1]; return Math.sqrt(Math.pow(HoU.olClientX - ZcU.olClientX, 2) + Math.pow(HoU.olClientY - ZcU.olClientY, 2)); }
SMPinch.prototype.GetPinchData = function (evt) { var NCu = this.GetDistance(evt.touches); var bCu = NCu / this.FStart.distance; return { distance: NCu, delta: this.FLast.distance - NCu, scale: bCu }; }
function SPinch() { SControlBase.call(this); this.preserveCenter = false; this.autoActivate = true; this.currentCenter = null; this.pinchOrigin = null; }
SPinch.prototype = new SControlBase();
SPinch.prototype.FType = SControlBase.Tool; SPinch.prototype.panned = false; SPinch.prototype.ClassName = SClassName.SPinch; SPinch.prototype.Draw = function () { this.FHandler = new SMPinch(this, { "start": this.PinchStart, "move": this.PinchMove, "done": this.PinchDone }); }
SPinch.prototype.PinchStart = function (evt, ucu) { var dcU = (this.preserveCenter) ? this.FMap.GetPixelFromLonLat(this.FMap.GetCenter()) : evt.pXY; this.pinchOrigin = dcU; this.currentCenter = dcU; }
SPinch.prototype.PinchMove = function (evt, OcU) { var ccu = OcU.scale; var ECU = this.pinchOrigin; var GcU = (this.preserveCenter) ? this.map.GetPixelFromLonLat(this.map.GetCenter()) : evt.pXY; this.currentCenter = GcU; }
SPinch.prototype.PinchDone = function (evt, KCU, Mcu) { var pcu = this.FMap.GetZoomForResolution(this.FMap.GetResolution() / Mcu.scale, true); if (pcu !== this.FMap.GetZoom() || !this.currentCenter.Equals(this.pinchOrigin)) { var qcu = this.FMap.GetResolutionForZoom(pcu); var rCu = this.FMap.GetLonLatFromPixel(this.pinchOrigin); var ScU = this.currentCenter; var tcu = this.FMap.GetSize(); rCu.FLon += qcu * ((tcu.FW / 2) - ScU.FX); rCu.FLat -= qcu * ((tcu.FH / 2) - ScU.FY); this.FMap.SetCenter(rCu, pcu); } }
function SZoomBox(vCu, fcU) { this.FKeyMask = vCu; SControlBase.call(this, this.FType, fcU); }
SZoomBox.prototype = new SControlBase();
SZoomBox.prototype.FType = SControlBaseType.Tool; SZoomBox.prototype.ClassName = SClassName.SZoomBox; SZoomBox.prototype.Draw = function () { this.FHandler = new SHBox(this, { done: this.ZoomBox }, this.FKeyMask); }
SZoomBox.prototype.ZoomBox = function (WcU) { if (WcU instanceof SBounds) { var LCU = this.FMap.GetLonLatFromPixel(new SPixel(WcU.FLeft, WcU.FBottom)); var xCu = this.FMap.getLonLatFromPixel(new SPixel(WcU.FRight, WcU.FTop)); var ycu = new SBounds(LCU.FLon, LCU.FLat, xCu.FLon, xCu.FLat); this.FMap.ZoomToExtent(ycu); } else { this.FMap.setCenter(this.FMap.GetLonLatFromPixel(WcU), this.FMap.GetZoom() + 1); } }
function SPanDrag() { SControlBase.call(this); this.FKinetic = null; }
SPanDrag.prototype = new SControlBase();
SPanDrag.prototype.FType = SControlBase.Tool; SPanDrag.prototype.panned = false; SPanDrag.prototype.ClassName = SClassName.SPanDrag; SPanDrag.prototype.Draw = function () { this.FHandler = new SMPanDrag(this, { "Move": this.PanMap, "Done": this.PanMapDone, "Down": this.PanMapStart }); this.FKinetic = new SHKinetic(); }
SPanDrag.prototype.PanMap = function (hcU) { if (this.FKinetic) { this.FKinetic.Update(hcU); } this.panned = true; var zEU = this.FHandler.FLast.FX - hcU.FX; var NEU = this.FHandler.FLast.FY - hcU.FY; var bEU = this.FMap.GetSize(); var uEU = new SPixel(bEU.FW / 2 + zEU, bEU.FH / 2 + NEU); var DEU = this.FMap.GetLonLatFromViewPortPx(uEU); this.FMap.SetCenter(DEU, null, this.FHandler.FDragging); }
SPanDrag.prototype.PanMapDone = function (OeU) { this.FMap.RefreshVectorLayer(); var CEu = ""; if (this.FKinetic) { CEu = this.FKinetic.End(OeU); } if (CEu) { var Eeu = this; this.FKinetic.Move(CEu, function (x, y, end) { Eeu.FMap.Pan(x, y); }); } }
SPanDrag.prototype.PanMapStart = function () { if (this.FKinetic) { this.FKinetic.Begin(); } }
function SNavigation(geu, kEU) { this.FDragPan = null; this.FPinchZoom = null; this.FZoomBox = null; this.FWheelHandler = null; this.FWheelEnabled = true; SControlBase.call(this, geu, kEU); }
SNavigation.prototype = new SControlBase();
SNavigation.prototype.ClassName = SClassName.SNavigation; SNavigation.prototype.SetWheelEnabled = function (meu) { if (meu != null) { this.FWheelEnabled = meu; } }
SNavigation.prototype.Activate = function () { this.FDragPan.Activate(); if (this.FWheelEnabled) { this.FWheelHandler.Activate(); } if (this.FPinchZoom) { this.FPinchZoom.Activate(); } return SControlBase.prototype.Activate.apply(this, arguments); }
SNavigation.prototype.DeActivate = function () { this.FZoomBox.DeActivate(); this.FDragPan.DeActivate(); this.FPinchZoom.DeActivate(); this.FWheelHandler.DeActivate(); SControlBase.prototype.DeActivate.apply(this, arguments); }
SNavigation.prototype.Draw = function () { this.FMap.FEvents.Register("dblclick", this, this.DefaultDblClick); this.FDragPan = new SPanDrag(); this.FDragPan.FMap = this.FMap; this.FZoomBox = new SZoomBox(SHandler.MOD_SHIFT); this.FZoomBox.FMap = this.FMap; this.FDragPan.Draw(); this.FZoomBox.Draw(); this.FWheelHandler = new SMMouseWheel(this, { "up": this.WheelUp, "down": this.WheelDown }); this.FPinchZoom = new SPinch(); this.FPinchZoom.FMap = this.FMap; this.FPinchZoom.Draw(); this.Activate(); }
SNavigation.prototype.DefaultDblClick = function (peu) { var qEu = this.FMap.GetZoom() + 1; if (!this.FMap.IsValidZoom(qEu)) return; if (this.FMap.FZoom != this.FMap.GetZLNum() - 1) { var ReU = this.FMap.GetSize(); var seu = ReU.FW / 2 - peu.pXY.FX; var tEU = peu.pXY.FY - ReU.FH / 2; var veu = this.FMap.FMainlayer.FResolutions[qEu]; var feu = this.FMap.GetLonLatFromPixel(peu.pXY); var Weu = new SLonLat(feu.FLon + seu * veu, feu.FLat + tEU * veu); this.FMap.SetCenter(Weu, this.FMap.FZoom + 1); } SEvent.Stop(peu); return false; }
SNavigation.prototype.WheelChange = function (lEU, XeU) { var YEu = this.FMap.GetZoom() + XeU; if (!this.FMap.IsValidZoom(YEu)) return; var heU = this.FMap.GetSize(); var ZgU = heU.FW / 2 - lEU.pXY.FX; var nGu = lEU.pXY.FY - heU.FH / 2; var BGU = this.FMap.FMainlayer.FResolutions[YEu]; var ugU = this.FMap.GetLonLatFromPixel(lEU.pXY); var dGu = new SLonLat(ugU.FLon + ZgU * BGU, ugU.FLat + nGu * BGU); this.FMap.SetCenter(dGu, YEu); }
SNavigation.prototype.WheelUp = function (OgU) { this.WheelChange(OgU, 1); }
SNavigation.prototype.WheelDown = function (cGU) { this.WheelChange(cGU, -1); }
function SPanZoom() { this.FSlideFactor = 50; this.FButtons = null; this.FPosition = null; this.FPosition = new SPixel(SPanZoom.X, SPanZoom.Y); SControlBase.apply(this); }
SPanZoom.prototype = new SControlBase();
SPanZoom.X = 4; SPanZoom.Y = 4; SPanZoom.prototype.ClassName = SClassName.SPanZoom; SPanZoom.prototype.Destroy = function () { SControlBase.prototype.Destroy.apply(this, arguments); while (this.FButtons.length) { var EGu = this.FButtons.shift(); EGu.FMap = null; SEvent.Stop(EGu); } this.FButtons = null; this.FPosition = null; }
SPanZoom.prototype.Draw = function (GGu) { SControlBase.prototype.Draw.apply(this, arguments); GGu = this.FPosition; this.FButtons = []; var KgU = new SSize(17, 17); var mGu = new SPixel(GGu.FX + KgU.FW, GGu.FY); this._AddBtn("panup", "north-mini.png", mGu, KgU); GGu.FY = mGu.FY + KgU.FH; this._AddBtn("panleft", "west-mini.png", GGu, KgU); this._AddBtn("zoomworld", "zoom-plus-center.png", GGu.Add(KgU.FW, 0), KgU); this._AddBtn("panright", "east-mini.png", GGu.Add(KgU.FW * 2, 0), KgU); this._AddBtn("pandown", "south-mini.png", mGu.Add(0, KgU.FH * 2), KgU); this._AddBtn("zoomin", "zoom-plus-mini.png", mGu.Add(0, KgU.FH * 3 + 5), KgU); this._AddBtn("zoomout", "zoom-minus-mini.png", mGu.Add(0, KgU.FH * 4 + 5), KgU); return this.FDiv; }
SPanZoom.prototype._AddBtn = function (pGU, qgu, RgU, sgu) { var tGu = SUtil.GetImagesLocation() + "panzoom3/" + qgu; var vgU = SUtil.CreateAlphaImageDiv(null, RgU, sgu, tGu, "absolute", null, "image"); if (vgU.childNodes.length > 0) { vgU.childNodes[0].style.padding = "0px"; } vgU.style.cursor = "hand"; this.FDiv.appendChild(vgU); SEvent.Observe(vgU, "mousedown", SFunction.BindAsEventListener(this.BtnDown, vgU)); SEvent.Observe(vgU, "dblclick", SFunction.BindAsEventListener(this.DblClick, vgU)); SEvent.Observe(vgU, "click", SFunction.BindAsEventListener(this.DblClick, vgU)); vgU.action = pGU; vgU.FMap = this.FMap; vgU.FSlideFactor = this.FSlideFactor; this.FButtons.push(vgU); return vgU; }
SPanZoom.prototype.DblClick = function (fgU) { SEvent.Stop(fgU); return false; }
SPanZoom.prototype.BtnDown = function (WGU) { if (!SEvent.IsLeftClick(WGU)) return; switch (this.action) { case "panup": this.FMap.Pan(0, -50); break; case "pandown": this.FMap.Pan(0, 50); break; case "panleft": this.FMap.Pan(-50, 0); break; case "panright": this.FMap.Pan(50, 0); break; case "zoomin": this.FMap.ZoomIn(); break; case "zoomout": this.FMap.ZoomOut(); break; case "zoomworld": this.FMap.ZoomToMaxExtent(); break; case "one": var LGU = SBrowser.GetOffsetX(WGU); var xGU = SBrowser.GetOffsetY(WGU); if (LGU < 15 && xGU < 30 && xGU > 10) { this.FMap.Pan(-50, 0); } else if (LGU > 30 && xGU < 30 && xGU > 10) { this.FMap.Pan(50, 0); } else if (LGU > 15 && LGU < 30 && xGU < 15) { this.FMap.Pan(0, -50); } else if (LGU > 15 && LGU < 30 && xGU > 25) { this.FMap.Pan(0, 50); } } SEvent.Stop(WGU); }
function SPanZoomBar() { this.FZoomStopWidth = 15; this.FZoomStopHeight = 8; this.FSlider = null; this.FSliderEvents = null; this.FZoomBarDiv = null; this.FZoomBarCurDiv = null; this.FDivEvents = null; SPanZoom.apply(this); }
SPanZoomBar.prototype = new SPanZoom();
SPanZoomBar.prototype.ClassName = SClassName.SPanZoomBar; SPanZoomBar.prototype.Destroy = function () { this.FDiv.removeChild(this.FSlider); this.FSlider = null; this.FSliderEvents.Destroy(); this.FSliderEvents = null; this.FDiv.removeChild(this.zoombarDiv); this.FZoomBarDiv = null; this.FDivEvents.Destroy(); this.FDivEvents = null; this.FMap.FEvents.UnRegister("zoomend", this, this.MoveZoomBar); this.FMap.FEvents.UnRegister("changebaselayer", this, this.Redraw); SPanZoom.prototype.Destroy.apply(this, arguments); }
SPanZoomBar.prototype.SetMap = function (yGu) { SPanZoom.prototype.SetMap.apply(this, arguments); this.FMap.FEvents.Register("changebaselayer", this, this.Redraw); }
SPanZoomBar.prototype.Redraw = function () { if (this.FDiv != null) { this.FDiv.innerHTML = ""; } this.Draw(); }
SPanZoomBar.prototype.Draw = function (hGu) { SControlBase.prototype.Draw.apply(this, arguments); hGu = this.FPosition.Clone(); this.FButtons = []; var zku = new SSize(14, 14); var nkU = new SPixel(hGu.FX + zku.FW, hGu.FY); this._AddBtn("one", "arrow_tip.png", nkU.Add(-10, 8), new SSize(40, 40)); this._AddBtn("zoomin", "zoom-plus-mini.png", nkU.Add(3, zku.FH * 3 + 9), zku); nkU = this._addZoomBar(nkU.Add(4, zku.FH * 4 + 12)); this._AddBtn("zoomout", "zoom-minus-mini.png", nkU.Add(-1, 7), zku); return this.FDiv; }
SPanZoomBar.prototype._addZoomBar = function (bkU) { var Uku = SUtil.GetImagesLocation() + "panzoom3/"; var dku = this.FMap.GetZLNum() - 1 - this.FMap.GetZoom(); var OKu = SUtil.CreateAlphaImageDiv(null, bkU.Add(-2, dku * this.FZoomStopHeight), new SSize(15, 15), Uku + "slider1.png", "absolute", null, "image"); OKu.style.cursor = "hand"; this.FSlider = OKu; this.FSliderEvents = new SEvents(this, OKu, null, true); this.FSliderEvents.Register("mousedown", this, this.zoomBarDown); this.FSliderEvents.Register("mousemove", this, this.zoomBarDrag); this.FSliderEvents.Register("mouseup", this, this.zoomBarUp); this.FSliderEvents.Register("dblclick", this, this.doubleClick); this.FSliderEvents.Register("click", this, this.doubleClick); sz = new SSize(); sz.FH = this.FZoomStopHeight * this.FMap.GetZLNum() + 8; sz.FW = this.FZoomStopWidth; var CKU = null; CKU = SUtil.CreateDiv(null, bkU, sz, Uku + "zoombar.png"); CKU = SUtil.CreateAlphaImageDiv(null, bkU.Add(-1, 0), sz, Uku + "zoombar.png", "absolute", null, "scale"); var eKu = sz.FH - dku * this.FZoomStopHeight; sz.FH = dku * this.FZoomStopHeight; this.FZoomBarCurDiv = SUtil.CreateAlphaImageDiv(null, bkU.Add(-1, eKu), sz, Uku + "zoomBarCur.png", "absolute", null, "scale"); this.zoombarDiv = CKU; this.FDivEvents = new SEvents(this, CKU, null, true); this.FDivEvents.Register("mousedown", this, this.divClick); this.FDivEvents.Register("mousemove", this, this.passEventToSlider); this.FDivEvents.Register("dblclick", this, this.doubleClick); this.FDivEvents.Register("click", this, this.doubleClick); this.FDiv.appendChild(CKU); this.FDiv.appendChild(this.FZoomBarCurDiv); this.startTop = parseInt(CKU.style.top); this.FDiv.appendChild(OKu); this.FMap.FEvents.Register("zoomend", this, this.MoveZoomBar); bkU = bkU.Add(0, this.FZoomStopHeight * this.FMap.GetZLNum()); return bkU; }
SPanZoomBar.prototype.passEventToSlider = function (GKu) { this.FSliderEvents.HandleBrowserEvent(GKu); }
SPanZoomBar.prototype.divClick = function (kku) { if (!SEvent.IsLeftClick(kku)) return; var mku = kku.pXY.FY; var PkU = SUtil.PagePosition(kku.FObject)[1]; var QKu = Math.floor((mku - PkU) / this.FZoomStopHeight); this.FMap.ZoomTo((this.FMap.GetZLNum() - 1) - QKu); SEvent.Stop(kku); }
SPanZoomBar.prototype.zoomBarDown = function (rKu) { if (!SEvent.IsLeftClick(rKu)) return; this.FMap.FEvents.Register("mousemove", this, this.passEventToSlider); this.FMap.FEvents.Register("mouseup", this, this.passEventToSlider); this.mouseDragStart = rKu.pXY.Clone(); this.zoomStart = rKu.pXY.Clone(); this.FDiv.style.cursor = "move"; this.zoombarDiv.offsets = null; SEvent.Stop(rKu); }
SPanZoomBar.prototype.zoomBarDrag = function (Sku) { if (this.mouseDragStart != null) { var TKU = this.mouseDragStart.FY - Sku.pXY.FY; var Vku = SUtil.PagePosition(this.zoombarDiv); if ((Sku.clientY - Vku[1]) > 0 && (Sku.clientY - Vku[1]) < parseInt(this.zoombarDiv.style.height) - 2) { var fKU = parseInt(this.FSlider.style.top) - TKU; this.FSlider.style.top = fKU + "px"; this.FZoomBarCurDiv.style.height = this.FZoomBarCurDiv.offsetHeight - (fKU - this.FZoomBarCurDiv.offsetTop) + "px"; this.FZoomBarCurDiv.style.top = fKU + "px"; } this.mouseDragStart = Sku.pXY.Clone(); SEvent.Stop(Sku); } }
SPanZoomBar.prototype.zoomBarUp = function (WKU) { if (!SEvent.IsLeftClick(WKU)) return; if (this.zoomStart) { this.FDiv.style.cursor = ""; this.FMap.FEvents.UnRegister("mouseup", this, this.passEventToSlider); this.FMap.FEvents.UnRegister("mousemove", this, this.passEventToSlider); var LKu = this.zoomStart.FY - WKU.pXY.FY; this.FMap.ZoomTo(this.FMap.FZoom + Math.round(LKu / this.FZoomStopHeight)); this.MoveZoomBar(); this.mouseDragStart = null; SEvent.Stop(WKU); } }
SPanZoomBar.prototype.MoveZoomBar = function () { var xku = ((this.FMap.GetZLNum() - 1) - this.FMap.GetZoom()) * this.FZoomStopHeight + this.startTop + 1; this.FSlider.style.top = xku + "px"; this.FZoomBarCurDiv.style.height = this.FZoomBarCurDiv.offsetHeight - (xku - this.FZoomBarCurDiv.offsetTop) + "px"; this.FZoomBarCurDiv.style.top = xku + "px"; }
function SOVBase(BMU, uMU, DMu, omU, cmu, emu, gMU, kMU) { this.FEvents = null; this.FId = ""; this.FLonLat = null; this.FDiv = null; this.FContentDiv = null; this.groupDiv = null; this.padding = 5; this.FMap = null; this.color = null; this.opacity = 1; this.FAdaptive = false; this.FIndependent = false; if (emu) { this.FAdaptive = true; } if (BMU == null) { BMU = SUtil.CreateUid(SClassName.SOVBase); } this.FContentHTML = ""; if (omU != null) { this.FContentHTML = omU; } this.FId = BMU; this.FLonLat = uMU; this.FSize = null; if (DMu != null) { this.FSize = DMu; } this.FTag = ""; if (gMU) { this.FTag = gMU; } this.FDiv = SUtil.CreateDiv(this.FId, null, null, null, null, null, "hidden"); SUtil.SetElementZIndex(this.FDiv, SEnumZIndex._ZOVBase); this.FCssStyle = "tJPopup"; this.FHoverCssStyle = null; this.FDiv.className = this.FCssStyle; this.groupDiv = SUtil.CreateDiv(null, null, null, null, "relative", null, "hidden"); this.FId = this.FDiv.FId + "_contentDiv"; this.FContentDiv = SUtil.CreateDiv(this.FId, null, this.FSize, null, "relative", null, "hidden"); this.FContentDiv.className = 'tJPopupContent'; this.groupDiv.appendChild(this.FContentDiv); this.FDiv.appendChild(this.groupDiv); if (cmu) { var yku = new SSize(17, 17); var Hku = SUtil.GetImagesLocation() + "close.gif"; var zmU = SUtil.CreateAlphaImageDiv(this.FId + "_cl", null, yku, Hku); zmU.style.right = this.padding + "px"; zmU.style.top = this.padding + "px"; this.groupDiv.appendChild(zmU); var NMU = function (e) { this.Hide(); SEvent.Stop(e); }; SEvent.Observe(zmU, "click", SFunction.BindAsEventListener(NMU, this)); } this.FOffset = new SSize(0, 0); if (kMU != null && isNaN(kMU.FW) == false && isNaN(kMU.FH) == false) { this.FOffset = kMU; } this.RegisterEvents(); }
SOVBase.prototype.ClassName = SClassName.SOVBase; SOVBase.prototype.GetId = function () { return this.FId; }
SOVBase.prototype.Destroy = function () { if (this.FMap != null) { this.FMap.RemovePopup(this); this.FMap = null; } this.FEvents.Destroy(); this.FEvents = null; this.FDiv = null; }
SOVBase.prototype.GetOffset = function () { return this.FOffset; }
SOVBase.prototype.GetCssStyle = function () { return this.FCssStyle; }
SOVBase.prototype.SetCssStyle = function (MMU) { if (MMU != null) { this.FCssStyle = MMU; SUtil.SetElementCssStyle(this.FDiv, MMU); } }
SOVBase.prototype.SetHoverCssStyle = function (pmU) { if (pmU != null) { this.FHoverCssStyle = pmU; if (pmU != this.FCssStyle) { this.AddEventListener(SEnumEvent.OnMouseover, this, mN.S___GridMap___SLabel_MouseoverZC); this.AddEventListener(SEnumEvent.OnMouseout, this, mN.S___GridMap___SLabel_MouseoutNc); } } }
SOVBase.prototype.SetOffset = function (qmU) { if (qmU != null && isNaN(qmU.FW) == false && isNaN(qmU.FH) == false) { this.FOffset = qmU; this.Draw(); } }
SOVBase.prototype.SetTag = function (rMu) { this.FTag = rMu; }
SOVBase.prototype.GetIndependent = function () { return this.FIndependent; }
SOVBase.prototype.SetIndependent = function (SmU) { this.FIndependent = SmU; }
SOVBase.prototype.GetTag = function () { return this.FTag; }
SOVBase.prototype.Draw = function (tMu) { if (tMu == null) { if ((this.FLonLat != null) && (this.FMap != null)) { tMu = this.FMap.GetMapPxFromLonLat(this.FLonLat); } } this.SetSize(); this.SetBackgroundColor(); this.SetOpacity(); this.SetContentHTML(); this.MoveTo(tMu); return this.FDiv; }
SOVBase.prototype.UpdatePosition = function () { if ((this.FLonLat) && (this.FMap)) { var VMu = this.FMap.GetMapPxFromLonLat(this.FLonLat); if (VMu) { this.MoveTo(VMu); } } }
SOVBase.prototype.MoveTo = function (FMu) { if ((FMu != null) && (this.FDiv != null)) { this.FDiv.style.left = (FMu.FX + this.FOffset.FW) + "px"; this.FDiv.style.top = (FMu.FY + this.FOffset.FH) + "px"; } }
SOVBase.prototype.MoveToWithPixel = function (wMu) { if ((wMu != null) && (this.FDiv != null)) { this.FDiv.style.left = wMu.FX + "px"; this.FDiv.style.top = wMu.FY + "px"; } }
SOVBase.prototype.MoveToWithLonLat = function (LMU) { if (LMU != null) { this.FLonLat = LMU; var xmU = this.FMap.GetMapPxFromLonLat(this.FLonLat); if (xmU) { this.MoveTo(xmU); } } }
SOVBase.prototype.Visible = function () { return SElement.Visible(this.FDiv); }
SOVBase.prototype.Toggle = function () { SElement.Toggle(this.FDiv); }
SOVBase.prototype.Show = function () { SElement.Show(this.FDiv); }
SOVBase.prototype.Hide = function () { SElement.Hide(this.FDiv); }
SOVBase.prototype.SetAdaptive = function () { this.FAdaptive = true; }
SOVBase.prototype.SetSize = function (yMu) { var hmu = yMu; if (hmu != null) { this.FSize = hmu; } else { hmu = this.FSize; } if (this.FAdaptive && hmu != null) { } if (this.FDiv != null && hmu != null) { if (hmu.FW != null) { this.FDiv.style.width = hmu.FW + "px"; } if (hmu.FH != null) { this.FDiv.style.height = hmu.FH + "px"; } } if (this.FContentDiv != null && hmu != null) { if (hmu.FW != null) { this.FContentDiv.style.width = hmu.FW + "px"; } if (hmu.FH != null) { this.FContentDiv.style.height = hmu.FH + "px"; } } }
SOVBase.prototype.GetDiv = function () { return this.FDiv; }
SOVBase.prototype.GetContentDiv = function () { return this.FContentDiv; }
SOVBase.prototype.SetBackgroundColor = function (zpU) { if (zpU != null) { this.color = zpU; } if (this.FDiv != null && this.color != null) { this.FDiv.style.backgroundColor = this.color; ; } }
SOVBase.prototype.SetOpacity = function (Npu) { if (Npu != null) { this.opacity = Npu; } if (this.FDiv != null && Npu != null) { this.FDiv.style.opacity = Npu; this.FDiv.style.filter = 'alpha(Npu=' + Npu * 100 + ')'; } }
SOVBase.prototype.SetContentHTML = function (BpU) { if (BpU != null) { this.FContentHTML = BpU; } if (this.FContentHTML != null) { this.FContentDiv.innerHTML = this.FContentHTML; this.FAdaptive = true; } }
SOVBase.prototype.AddEventListener = function (uPu, dpu, oPu, CpU) { this.FEvents.AddEventListener(uPu, dpu, oPu, CpU); }
SOVBase.prototype.ReleaseEventListener = function (EpU, gPu, KPU) { this.FEvents.ReleaseEventListener(EpU, gPu, KPU); }
SOVBase.prototype.RegisterEvents = function () { this.FEvents = new SEvents(this, this.FDiv, null, true); this.FEvents.Register("mousedown", this, this.OnMouseDown); this.FEvents.Register("mousemove", this, this.OnMouseMove); this.FEvents.Register("mouseup", this, this.OnMouseUp); this.FEvents.Register("click", this, this.OnClick); this.FEvents.Register("mouseout", this, this.OnMouseOut); this.FEvents.Register("dblclick", this, this.OndblClick); this.FEvents.Register("mouseover", this, this.OnMouseOver); }
SOVBase.prototype.OnMouseDown = function (MPu) { this.mousedown = true; SEvent.Stop(MPu, true); }
SOVBase.prototype.OnMouseMove = function (pPu) { if (this.mousedown) { SEvent.Stop(pPu, true); } }
SOVBase.prototype.OnMouseUp = function (Qpu) { if (this.mousedown) { this.mousedown = false; SEvent.Stop(Qpu, true); } }
SOVBase.prototype.OnClick = function (RPu) { SEvent.Stop(RPu, true); }
SOVBase.prototype.OnMouseOver = function (SPU) { SEvent.Stop(SPU, true); }
SOVBase.prototype.OnMouseOut = function (TPu) { this.mousedown = false; }
SOVBase.prototype.OndblClick = function (vpU) { SEvent.Stop(vpU, true); }
SOVBase.prototype.SetCursor = function (FPu) { if (FPu != null) { this.FDiv.style.cursor = FPu; } }
function SAnchored(lpu, XPU, Ypu, Hpu, ZqU, NQU) { this.FRelativePosition = null; this.FAnchor = null; var WPU = new Array(lpu, XPU, Ypu, Hpu, NQU); SOVBase.apply(this, WPU); this.FAnchor = (ZqU != null) ? ZqU : { pSize: new SSize(0, 0), offset: new SPixel(0, 0) }; }
SAnchored.prototype = new SOVBase();
SAnchored.prototype.ClassName = SClassName.SAnchored; SAnchored.prototype.Draw = function (bqU) { if (bqU == null) { if ((this.FLonLat != null) && (this.FMap != null)) { bqU = this.FMap.GetMapPxFromLonLat(this.FLonLat); } } this.FRelativePosition = this.CalculateRelativePosition(bqU); return SOVBase.prototype.Draw.apply(this, arguments); }
SAnchored.prototype.CalculateRelativePosition = function (UQU) { var dQU = this.FMap.GetLonLatFromMapPx(UQU); var oQu = this.FMap.GetExtent(); var cQU = oQu.CalcQuadrant(dQU); return SBounds.OppositeQuadrant(cQU); }
SAnchored.prototype.MoveTo = function (eQu) { this.FRelativePosition = this.CalculateRelativePosition(eQu); var GQU = this.CalculateNewPx(eQu); var KQu = new Array(GQU); SOVBase.prototype.MoveTo.apply(this, KQu); }
SAnchored.prototype.SetSize = function (MQU) { SOVBase.prototype.SetSize.apply(this, arguments); if ((this.FLonLat) && (this.FMap)) { var PqU = this.FMap.GetMapPxFromLonLat(this.FLonLat); this.MoveTo(PqU); } }
SAnchored.prototype.CalculateNewPx = function (qqU) { var rqU = qqU.FOffset(this.FAnchor.FOffset); var sqU = (this.FRelativePosition.charAt(0) == 't'); rqU.FY += (sqU) ? -this.FSize.FH : this.FAnchor.FSize.FH; var TQu = (this.FRelativePosition.charAt(1) == 'l'); rqU.FX += (TQu) ? -this.FSize.FW : this.FAnchor.FSize.FW; return rqU; }
function SAnchoredBubble(VQu, fQu, WqU, lQu, XQU, yqu) { this.FRounded = false; SAnchored.apply(this, arguments); }
SAnchoredBubble.prototype = new SAnchored();
SAnchoredBubble.CORNER_SIZE = 5; SAnchoredBubble.prototype.ClassName = SClassName.SAnchoredBubble; SAnchoredBubble.prototype.Draw = function (hqu) { SAnchored.prototype.Draw.apply(this, arguments); this.SetContentHTML(); this.SetBackgroundColor(); this.SetOpacity(); return this.FDiv; }
SAnchoredBubble.prototype.MoveTo = function (zRU) { SAnchored.prototype.MoveTo.apply(this, arguments); this.SetRicoCorners(!this.FRounded); this.FRounded = true; }
SAnchoredBubble.prototype.SetSize = function (nRU) { SAnchored.prototype.SetSize.apply(this, arguments); if (this.FContentDiv != null) { var bru = this.FSize.Clone(); bru.FH -= (2 * SAnchoredBubble.CORNER_SIZE); bru.FH -= (2 * this.padding); this.FContentDiv.style.height = bru.FH + "px"; this.FContentDiv.style.width = bru.FW + "px"; if (this.FMap) { this.SetRicoCorners(!this.FRounded); this.FRounded = true; } } }
SAnchoredBubble.prototype.SetBackgroundColor = function (Uru) { if (Uru != undefined) { this.backgroundColor = Uru; } if (this.FDiv != null) { if (this.FContentDiv != null) { this.FDiv.style.background = "transparent"; WCorner.changeColor(this.FContentDiv, this.backgroundColor); } } }
SAnchoredBubble.prototype.SetOpacity = function (DRU) { if (DRU != undefined) { this.opacity = DRU; } if (this.FDiv != null) { if (this.FContentDiv != null) { WCorner.changeOpacity(this.FContentDiv, this.opacity); } } }
SAnchoredBubble.prototype.SetBorder = function (oRU) { this.border = 0; }
SAnchoredBubble.prototype.SetRicoCorners = function (Cru) { var ERu = this.GetCornersToRound(this.FRelativePosition); var Gru = { corners: ERu, color: this.backgroundColor, bgColor: "transparent", blend: false }; if (Cru) { WCorner.round(this.FDiv, Gru); } else { WCorner.reRound(this.groupDiv, Gru); this.SetBackgroundColor(); this.SetOpacity(); } }
SAnchoredBubble.prototype.GetCornersToRound = function () { var krU = ['tl', 'tr', 'bl', 'br']; var mrU = WBounds.oppositeQuadrant(this.FRelativePosition); SUtil.removeItem(krU, mrU); return krU.join(" "); }
function SIcon(pRU, QRU, Rru, SRU) { this.FUrl = null; this.FSize = null; this.FOffset = null; this.FCalculateOffset = null; this.FImageDiv = null; this.FPx = null; this.FUrl = pRU; this.FSize = (QRU) ? QRU : new SSize(20, 34); this.FOffset = Rru ? Rru : new SPixel(-(this.FSize.FW / 2), -(this.FSize.FH)); this.FCalculateOffset = SRU; this.FId = SUtil.CreateUid(SClassName.SIcon); this.FImageDiv = SUtil.CreateAlphaImageDiv(this.FId); this.FDisplayStatus = true; SUtil.SetElementZIndex(this.FImageDiv, SEnumZIndex.ZIcon); }
SIcon.prototype.ClassName = SClassName.SIcon; SIcon.prototype.Destroy = function () { if (this.FImageDiv != null) { if (this.FImageDiv.firstChild != null) { SEvent.StopObservingEle(this.FImageDiv.firstChild); } this.FImageDiv.innerHTML = ""; this.FImageDiv = null; } }
SIcon.prototype.Clone = function () { return new SIcon(this.FUrl, this.FSize, this.FOffset, this.FCalculateOffset); }
SIcon.prototype.GetUrl = function () { return this.FUrl; }
SIcon.prototype.GetSize = function () { return this.FSize; }
SIcon.prototype.GetOffset = function () { return this.FOffset; }
SIcon.prototype.GetInnerIMG = function () { return this.FImageDiv; }
SIcon.prototype.GetDiv = function () { return this.FImageDiv; }
SIcon.prototype.ReDraw = function (Tru, VrU, fRU) { if (VrU != null) { this.FSize = VrU; } if (fRU != null) { this.FOffset = fRU; } if (Tru != null) { this.FUrl = Tru; } this.Draw(); }
SIcon.prototype.SetSize = function (Wru) { if (Wru != null) { this.FSize = Wru; } this.Draw(); }
SIcon.prototype.Draw = function (LRu) { SUtil.ModifyAlphaImageDiv(this.FImageDiv, null, null, this.FSize, this.FUrl, "absolute", null, "scale", 1, SEnumCursor._Hand); this.MoveTo(LRu); return this.FImageDiv; }
SIcon.prototype.SetCursor = function (xRu) { if (xRu != null) { try { this.FImageDiv.style.cursor = xRu; } catch (evcd) { } } }
SIcon.prototype.SetOpacity = function (yrU) { SUtil.ModifyAlphaImageDiv(this.FImageDiv, null, null, null, null, null, null, null, yrU); }
SIcon.prototype.MoveTo = function (HrU) { if (HrU != null) { this.FPx = HrU; } if (this.FImageDiv != null) { if (this.FPx == null) { this.Display(false); } else { if (this.FCalculateOffset) { this.FOffset = this.FCalculateOffset(this.FSize); } var ZSU = this.FPx.Offset(this.FOffset); SUtil.ModifyAlphaImageDiv(this.FImageDiv, null, ZSU); } } }
SIcon.prototype.Display = function (NSU) { this.FDisplayStatus = (NSU) ? true : false; this.FImageDiv.style.display = (NSU) ? "" : "none"; }
SIcon.prototype.GetDisplayStatus = function () { return this.FDisplayStatus; }
SIcon.prototype.Show = function () { this.Display(true); }
SIcon.prototype.Hide = function () { this.Display(false); }
SIcon.prototype.SetCursor = function (BsU) { if (BsU != null) { this.FImageDiv.style.cursor = BsU; } }
SIcon.prototype.SetTitle = function (USu) { if (USu != null) { try { this.FImageDiv.title = USu; } catch (__evkt) { } } }
SIcon.prototype.SetIconUrl = function (DsU) { if (DsU != null && DsU != "") { this.FUrl = DsU; this.ReDraw(this.FUrl); } }
SIcon.prototype.GetId = function () { return this.FId; }
function SMarker(Csu, Esu, GsU) { this.FIcon = null; this.FLonLat = null; this.FEvents = null; this.FMap = null; this.FLonLat = Csu; var osU = (Esu) ? Esu : SMarker.DefaultIcon(); if (this.FIcon == null) { this.FIcon = osU; } else { this.FIcon.FUrl = osU.FUrl; this.FIcon.FSize = osU.FSize; this.FIcon.FOffset = osU.FOffset; this.FIcon.FCalculateOffset = osU.FCalculateOffset; } this.FEvents = new SEvents(this, this.FIcon.FImageDiv, null); this.FTag = ""; if (GsU) { this.FTag = GsU; } this.FId = SUtil.CreateUid(this.ClassName); this.FHoverIcon = null; this.FSourceIcon = Esu.Clone(); osU = null; Csu = null; Esu = null; GsU = null; }
SMarker.prototype.ClassName = SClassName.SMarker; SMarker.prototype.GetEVTReference = function () { return this.FEvents; }
SMarker.prototype.SetHoverIcon = function (ksU) { if (ksU != null) { this.FHoverIcon = ksU; this.AddEventListener(SEnumEvent.OnMouseover, this, mN.S___GridMap___SMarker_SIcon_MouseoveryO); this.AddEventListener(SEnumEvent.OnMouseout, this, mN.S___GridMap___SMarker_SIcon_MouseoutHo); } }
SMarker.prototype.AddEventListener = function (MsU, PsU, qsU, Rsu) { this.FEvents.AddEventListener(MsU, PsU, qsU, Rsu); }
SMarker.prototype.ReleaseEventListener = function (SSU, tSU, vsU) { this.FEvents.ReleaseEventListener(SSU, tSU, vsU); }
SMarker.prototype.GetIcon = function () { return this.FIcon; }
SMarker.prototype.GetTag = function () { if (this.FTag) { return this.FTag; } else { return ""; } }
SMarker.prototype.GetId = function () { return this.FId; }
SMarker.prototype.GetLonLat = function () { return this.FLonLat; }
SMarker.prototype.SetTag = function (fSu) { if (fSu) { this.FTag = fSu; } }
SMarker.prototype.Destroy = function () { this.FMap = null; this.FEvents.Destroy(); this.FEvents = null; if (this.FIcon != null) { this.FIcon.Destroy(); this.FIcon = null; } if (this.FLonLat != null) { this.FLonLat = null; } this.FLonLat = null; }
SMarker.prototype.Draw = function (wsu) { return this.FIcon.Draw(wsu); }
SMarker.prototype.MoveTo = function (LsU) { if ((LsU != null) && (this.FIcon != null)) { this.FIcon.MoveTo(LsU); } this.FLonLat = this.FMap.GetLonLatFromMapPx(LsU); }
SMarker.prototype.MoveToWithLonLat = function (xSU) { if (xSU != null) { this.FLonLat = xSU; var Ysu = this.FMap.GetMapPxFromLonLat(this.FLonLat); if (Ysu != null && this.FIcon != null) { this.FIcon.MoveTo(Ysu); } } }
SMarker.prototype.OnScreen = function () { var hsu = false; if (this.FMap) { var ztU = this.FMap.GetExtent(); hsu = ztU.ContainsLonLat(this.FLonLat); } return hsu; }
SMarker.prototype.Inflate = function (nTu) { if (this.FIcon) { var bTu = new SSize(this.FIcon.FSize.FW * nTu, this.FIcon.FSize.FH * nTu); this.FIcon.SetSize(bTu); } }
SMarker.prototype.SetOpacity = function (utU) { this.FIcon.SetOpacity(utU); }
SMarker.prototype.Display = function (DTu) { this.FIcon.Display(DTu); }
SMarker.prototype.Show = function () { this.Display(true); }
SMarker.prototype.Hide = function () { this.Display(false); }
SMarker.prototype.SetInfoWindowText = function (OtU) { }
SMarker.DefaultIcon = function () { var CtU = SUtil.GetImagesLocation() + "marker.png"; var etu = new SSize(21, 25); var gTu = function (etu) { return new SPixel(-(etu.FW / 2), -etu.FH); }; return new SIcon(CtU, etu, null, gTu); }
function SMarkerLayer(KTU, mtu) { this.isBaseLayer = false; this.FMarkers = null; this.FDrawn = false; SLayerBase.apply(this, arguments); this.FMarkers = []; this.FLayerType = EnumLayerType.LTMarkerLayer; SUtil.SetElementZIndex(this.FDiv, SEnumZIndex.ZMarkerLayer); }
SMarkerLayer.prototype = new SLayerBase();
SMarkerLayer.prototype.ClassName = SClassName.SMarkerLayer; SMarkerLayer.prototype.Destroy = function () { this.ClearMarkers(); this.FMarkers = null; SLayerBase.prototype.Destroy.apply(this, arguments); }
SMarkerLayer.prototype.MoveTo = function (pTu, qTu, rtu) { SLayerBase.prototype.MoveTo.apply(this, arguments); if (qTu || !this.FDrawn) { for (i = 0; i < this.FMarkers.length; i++) { this.DrawMarker(this.FMarkers[i]); } this.FDrawn = true; } }
SMarkerLayer.prototype.GetMarkerById = function (stU) { if (this.FMarkers) { for (var u = 0; u < this.FMarkers.length; u++) { if (this.FMarkers[u].FId == stU) { return this.FMarkers[u]; } } } return null; }
SMarkerLayer.prototype.AddMarker = function (Ttu) { this.FMarkers.push(Ttu); if (this.FMap && this.FMap.GetExtent()) { Ttu.FMap = this.FMap; this.DrawMarker(Ttu); } }
SMarkerLayer.prototype.AddMarkers = function (vTU) { if (vTU != null && vTU.length && vTU.length > 0) { for (var FtU = 0; FtU < vTU.length; FtU++) { this.AddMarker(vTU[FtU]); } } }
SMarkerLayer.prototype.RemoveMarker = function (wtU) { SUtil.RemoveItem(this.FMarkers, wtU); if ((wtU.FIcon != null) && (wtU.FIcon.FImageDiv != null) && (wtU.FIcon.FImageDiv.parentNode == this.FDiv)) { this.FDiv.removeChild(wtU.FIcon.FImageDiv); wtU.FDrawn = false; wtU.Destroy(); wtU = null; } }
SMarkerLayer.prototype.ClearMarkers = function () { if (this.FMarkers != null) { while (this.FMarkers.length > 0) { this.RemoveMarker(this.FMarkers[0]); } } }
SMarkerLayer.prototype.ClearMarkersByTag = function (Ltu) { for (var XtU = 0; XtU < this.FMarkers.length; XtU++) { if (this.FMarkers[XtU].FTag == Ltu) { this.RemoveMarker(this.FMarkers[XtU]); XtU--; } } }
SMarkerLayer.prototype.HideMarkers = function () { for (var YTu = 0; YTu < this.FMarkers.length; YTu++) { this.FMarkers[YTu].Display(false); } }
SMarkerLayer.prototype.ShowMarkers = function () { for (var hTU = 0; hTU < this.FMarkers.length; hTU++) { this.FMarkers[hTU].Display(true); } }
SMarkerLayer.prototype.HideMarkersByTag = function (zVU) { for (var nVu = 0; nVu < this.FMarkers.length; nVu++) { if (this.FMarkers[nVu].FTag == zVU) { this.FMarkers[nVu].Display(false); } } }
SMarkerLayer.prototype.ShowMarkersByTag = function (BVU) { for (var uvu = 0; uvu < this.FMarkers.length; uvu++) { if (this.FMarkers[uvu].FTag == BVU) { this.FMarkers[uvu].Display(true); } } }
SMarkerLayer.prototype.GetMarkersByTag = function (dvu) { var OVU = []; for (var CvU = 0; CvU < this.FMarkers.length; CvU++) { if (this.FMarkers[CvU].FTag == dvu) { OVU.push(this.FMarkers[CvU]); } } return OVU; }
SMarkerLayer.prototype.ClearMarkersWithTag = function (eVU) { this.ClearMarkersByTag(eVU); }
SMarkerLayer.prototype.ClearMarkersWithOutTag = function (Gvu) { for (var kVU = 0; kVU < this.FMarkers.length; kVU++) { if (this.FMarkers[kVU].FTag != Gvu) { this.RemoveMarker(this.FMarkers[kVU]); kVU--; } } }
SMarkerLayer.prototype.DrawMarker = function (MVU) { if (MVU) { var pvU = this.FMap.GetMapPxFromLonLat(MVU.FLonLat); if (pvU == null) { MVU.Display(false); } else { MVU.Display(MVU.GetIcon().GetDisplayStatus()); var QvU = MVU.Draw(pvU); if (!MVU.FDrawn) { this.FDiv.appendChild(QvU); MVU.FDrawn = true; } } } }
SMarkerLayer.prototype.ReDrawMarker = function (RVu) { this.DrawMarker(RVu); }
SMarkerLayer.prototype.ReDrawMarkerWithId = function (Svu) { this.DrawMarker(this.GetMarkerById(Svu)); }
SMarkerLayer.prototype.GetDataExtent = function () { var TVU = null; if (this.FMarkers && (this.FMarkers.length > 0)) { var TVU = new SBounds(); for (var i = 0; i < this.FMarkers.length; i++) { var VVu = this.FMarkers[i]; TVU.Extend(VVu.FLonLat); } } return TVU; }
SMarkerLayer.prototype.GetMarkers = function () { return this.FMarkers; }
SMarkerLayer.prototype.AutoMapArea = function () { this.FMap.ZoomToExtent(this.GetDataExtent()); }
function SRenderer(FVU) { this.FRendererRoot = null; this.FExtent = null; this.FSize = null; this.FResolution = null; this.FMap = null; this.FRendererRoot = SUtil.GetElement(FVU); }
SRenderer.prototype.ClassName = SClassName.SRenderer; SRenderer.prototype.Destroy = function () { this.FRendererRoot = null; this.FExtent = null; this.FSize = null; this.FResolution = null; this.FMap = null; }
SRenderer.prototype.Supported = function () { return false; }
SRenderer.prototype.SetExtent = function (wVu) { this.FExtent = wVu.Clone(); this.FResolution = null; }
SRenderer.prototype.SetSize = function (lvU) { this.FSize = lvU.Clone(); this.FResolution = null; }
SRenderer.prototype.GetResolution = function () { this.FResolution = this.FMap.GetResolution(); return this.FResolution; }
SRenderer.prototype.DrawFeature = function (xvu, yVU) { if (yVU == null) { yVU = xvu.pStyle; } this.DrawGeometry(xvu.FGeometry, yVU, xvu.FId); }
SRenderer.prototype.DrawGeometry = function (hVu, zFu, NfU) { }
SRenderer.prototype.Clear = function () { }
SRenderer.prototype.GetFeatureIdFromEvent = function (bfu) { }
SRenderer.prototype.EraseFeatures = function (uFu) { if (!(uFu instanceof Array)) { uFu = [uFu]; } for (var i = 0; i < uFu.length; ++i) { this.EraseGeometry(uFu[i].FGeometry); } }
SRenderer.prototype.EraseGeometry = function (dFU) { }
function SFeatureDefaultEvents() { this.FListeners = []; this.FEventTypes = ["pointMouseDown", "pointMouseOver", "pointMouseDblClick", "rectMouseDown", "rectMouseDblClick", "rectMouseOver", "polygonMouseDown", "polygonMouseOver", "polygonMouseDblClick", "circleMouseDown", "circleMouseOver", "circleMouseDblClick"]; for (var i = 0; i < this.FEventTypes.length; i++) { this.AddEventType(this.FEventTypes[i]); } }
SFeatureDefaultEvents.prototype.Destroy = function () { this.FListeners = null; this.FEventTypes = null; }
SFeatureDefaultEvents.prototype.Register = function (oFU, cfu, EFU) { if (EFU != null) { if (cfu == null) { cfu = this.FObject; } var gfu = this.FListeners[oFU]; if (gfu != null) { var KFU = new SObserver(cfu, oFU, EFU); gfu.push(KFU); } gfu = null; } }
SFeatureDefaultEvents.prototype.RegisterPriority = function (Mfu, pfU, QFU) { if (QFU != null) { if (pfU == null) { pfU = this.FObject; } var RFU = this.FListeners[Mfu]; if (RFU != null) { var SFu = new SObserver(pfU, Mfu, QFU); RFU.push(SFu); } RFU = null; pfU = null; } }
SFeatureDefaultEvents.prototype.AddEventListener = function (tFu, vFU, FfU, wFu, lfU) { if (wFu) { this.Remove(tFu); } if (lfU) { this.Register(tFu, vFU, FfU); } else { this.RegisterPriority(tFu, vFU, FfU); } }
SFeatureDefaultEvents.prototype.ReleaseEventListener = function (xfU, YFu, hfU) { this.UnRegister(xfU.pObj, hfU); }
SFeatureDefaultEvents.prototype.UnRegister = function (zwU, nwu, BWu) { if (nwu == null) { nwu = this.FObject; } var uWU = this.FListeners[zwU]; if (uWU != null) { for (var i = 0; i < uWU.length; i++) { if (uWU[i].qO == nwu && uWU[i].So == BWu) { uWU.splice(i, 1); break; } } } }
SFeatureDefaultEvents.prototype.Remove = function (dWU) { if (this.FListeners) { if (this.FListeners[dWU] != null) { this.FListeners[dWU] = []; } } }
SFeatureDefaultEvents.prototype.TriggerEventListener = function (OWu, cwU, EWU) { if (cwU == null) { cwU = {}; } if (!EWU) { EWU = [cwU]; } else { EWU.unshift(cwU); } var gWu = (this.FListeners[OWu]) ? this.FListeners[OWu].slice() : null; if ((gWu != null) && (gWu.length > 0)) { for (var i = 0; i < gWu.length; i++) { var Kwu = gWu[i]; var MwU; if (Kwu.qO != null) { if (EWU.length == 1) { MwU = Kwu.So.call(Kwu.qO, cwU); } else { MwU = Kwu.So.call(Kwu.qO, EWU); } } else { if (EWU.length == 1) MwU = Kwu.So(cwU); else MwU = Kwu.So(EWU); } if ((MwU != null) && (MwU == false)) { break; } SEvent.Stop(cwU, true); } } }
SFeatureDefaultEvents.prototype.AddEventType = function (PwU) { if (!this.FListeners[PwU]) { this.FListeners[PwU] = []; } }
SFeatureDefaultEvents.prototype.PointMouseDown = function (qWu) { }
SFeatureDefaultEvents.prototype.PointMouseOver = function (rWU) { }
SFeatureDefaultEvents.prototype.RectMouseDown = function (sWU) { }
SFeatureDefaultEvents.prototype.RectMouseOver = function (TwU) { }
SFeatureDefaultEvents.prototype.PolygonMouseDown = function (vWU) { return true; }
SFeatureDefaultEvents.prototype.PolygonMouseOver = function (fWU) { return true; }
SFeatureDefaultEvents.prototype.DefaultFeature = function () { }
SFeatureDefaultEvents.prototype.PathMouseDown = function (WWU) { }
SFeatureDefaultEvents.prototype.PathMouseOver = function (lWU) { }
function SFeatureStyle() { this.fillColor = "#E8771B"; this.fillOpacity = 0.4; this.hoverFillColor = "blue"; this.hoverFillOpacity = 0.3; this.strokeColor = "red"; this.strokeOpacity = 0.9; this.strokeWidth = 1.2; this.strokeLinecap = "round"; this.hoverStrokeColor = "red"; this.hoverStrokeOpacity = 0.9; this.hoverStrokeWidth = 3.2; this.pointRadius = 6; this.hoverPointRadius = 1; this.hoverPointUnit = "%"; this.pointerEvents = "visiblePainted"; this.cursor = "hand"; this.zIndex = 2; this.hoverZIndex = 100; this.strokeStartArrow = "None"; this.strokeEndArrow = "None"; this.strokeDashStyle = "Solid"; this.strokeArrowLength = 10; this.strokeArrowWidth = 10; this.strokeBGSrc = ""; this.strokeFillType = "Solid"; this.fillBGSrc = ""; this.fillType = "solid"; this.hoverEnabled = true; }
SFeatureStyle.prototype.SetHoverEnabled = function (xWu) { if (xWu != null) { if (xWu == true) { this.hoverEnabled = true; } else { this.hoverEnabled = false; } } }
SFeatureStyle.prototype.GetHoverEnabled = function () { return this.hoverEnabled; }
SFeatureStyle.prototype.SetFillType = function (ywU) { if (ywU != null) { this.fillType = ywU; } }
SFeatureStyle.prototype.SetFillBGSrc = function (hwU) { if (hwU != null) { this.fillBGSrc = hwU; } }
SFeatureStyle.prototype.SetStrokeFillType = function (zLu) { if (zLu != null) { this.strokeFillType = zLu; } }
SFeatureStyle.prototype.SetStrokeBGSrc = function (nlU) { if (nlU != null) { this.strokeBGSrc = nlU; } }
SFeatureStyle.prototype.SetStrokeStartArrow = function (BlU) { if (BlU != null) { this.strokeStartArrow = BlU; } }
SFeatureStyle.prototype.SetStrokeEndArrow = function (ulU) { if (ulU != null) { this.strokeEndArrow = ulU; } }
SFeatureStyle.prototype.SetStrokeDashStyle = function (DlU) { if (DlU != null) { this.strokeDashStyle = DlU; } }
SFeatureStyle.prototype.SetStrokeArrowLength = function (oLu) { if (oLu != null) { this.strokeArrowLength = oLu; } }
SFeatureStyle.prototype.SetStrokeArrowWidth = function (CLu) { if (CLu != null) { this.strokeArrowWidth = CLu; } }
SFeatureStyle.prototype.SetDefaultOptions = function (ELU, glU, klu, MLU, plu, qlU, rlu) { if (ELU != null) { this.fillColor = ELU; } if (glU != null) { this.fillOpacity = glU; } if (klu != null) { this.strokeColor = klu; } if (MLU != null) { this.strokeOpacity = MLU; } if (plu != null) { this.strokeWidth = plu; } if (qlU != null) { this.strokeLinecap = qlU; } if (rlu != null) { this.zIndex = rlu; } }
SFeatureStyle.prototype.SetHoverOptions = function (slU, TLu, VLU, flU, wlu, LLU, Xlu) { if (slU != null) { this.hoverFillColor = slU; } if (TLu != null) { this.hoverFillOpacity = TLu; } if (VLU != null) { this.hoverStrokeColor = VLU; } if (flU != null) { this.hoverStrokeOpacity = flU; } if (wlu != null) { this.hoverStrokeWidth = wlu; } if (LLU != null) { this.hoverStrokeLinecap = LLU; } if (Xlu != null) { this.hoverZIndex = Xlu; } }
SFeatureStyle.prototype.SetFillColor = function (ylU) { if (ylU != null) { this.fillColor = ylU; } }
SFeatureStyle.prototype.GetFillColor = function () { return this.fillColor; }
SFeatureStyle.prototype.SetFillOpacity = function (Hlu) { if (Hlu != null) { this.fillOpacity = Hlu; } }
SFeatureStyle.prototype.GetFillOpacity = function () { return this.fillOpacity; }
SFeatureStyle.prototype.SetHoverFillColor = function (ZXU) { if (ZXU != null) { this.hoverFillColor = ZXU; } }
SFeatureStyle.prototype.GetHoverFillColor = function () { return this.hoverFillColor; }
SFeatureStyle.prototype.SetStrokeColor = function (NXU) { if (NXU != null) { this.strokeColor = NXU; } }
SFeatureStyle.prototype.GetStrokeColor = function () { return this.strokeColor; }
SFeatureStyle.prototype.SetStrokeOpacity = function (bxu) { if (bxu != null) { this.strokeOpacity = bxu; } }
SFeatureStyle.prototype.GetStrokeOpacity = function () { return this.strokeOpacity; }
SFeatureStyle.prototype.SetStrokeWidth = function (uXU) { if (uXU != null) { this.strokeWidth = uXU; } }
SFeatureStyle.prototype.GetStrokeWidth = function () { return this.strokeWidth; }
SFeatureStyle.prototype.SetStrokeLinecap = function (dXu) { if (dXu != null) { this.strokeLinecap = dXu; } }
SFeatureStyle.prototype.GetStrokeLinecap = function () { return this.strokeLinecap; }
SFeatureStyle.prototype.GetHoverStrokeColor = function () { return this.hoverStrokeColor; }
SFeatureStyle.prototype.SetHoverStrokeColor = function (OxU) { if (OxU != null) { this.hoverStrokeColor = OxU; } }
SFeatureStyle.prototype.GetHoverStrokeOpacity = function () { return this.hoverStrokeOpacity; }
SFeatureStyle.prototype.SetHoverStrokeOpacity = function (cxU) { if (cxU != null) { this.hoverStrokeOpacity = cxU; } }
SFeatureStyle.prototype.GetHoverStrokeWidth = function () { return this.hoverStrokeWidth; }
SFeatureStyle.prototype.SetHoverStrokeWidth = function (EXu) { if (EXu != null) { this.hoverStrokeWidth = EXu; } }
SFeatureStyle.prototype.SetZIndex = function (GxU) { if (GxU != null) { this.zIndex = GxU; } }
SFeatureStyle.prototype.SetCursor = function (KXu) { if (KXu != null) { this.cursor = KXu; } }
SFeatureStyle.prototype.GetCursor = function () { return this.cursor; }
SFeatureStyle.prototype.GetZIndex = function () { return this.zIndex; }
SFeatureStyle.prototype.GetHoverZIndex = function () { return this.hoverZIndex; }
SFeatureStyle.prototype.SetHoverZIndex = function (MXu) { if (MXu != null) { this.hoverZIndex = MXu; } }
SFeatureStyle.prototype.SetHoverStrokeOpacity = function (pxu) { if (pxu != null) { this.hoverStrokeOpacity = pxu; } }
SFeatureStyle.prototype.GetHoverStrokeOpacity = function () { return this.hoverStrokeOpacity; }
SFeatureStyle.prototype.SetHoverFillOpacity = function (qxU) { if (qxU != null) { this.hoverFillOpacity = qxU; } }
SFeatureStyle.prototype.GetHoverFillOpacity = function () { return this.hoverFillOpacity; }
function SFeature(rxU, Sxu, tXU, vXU) { this.FGeometry = null; this.FAttributes = null; this.FState = SFeatureState.New; this.style = null; this.FLayer = null; this.FId = SUtil.CreateUid(SClassName.SFeature); this.FEvents = null; this.FGeometry = rxU; this.FState = null; this.FAttributes = {}; if (vXU) { this.FAttributes = SUtil.Extend(this.FAttributes, vXU); } this.style = Sxu ? Sxu : null; this.dom = null; this.FTag = ""; if (tXU) { this.FTag = tXU; } this.FGeometry.FFeatureId = this.FId; }
SFeature.Style = { 'select': { fillColor: "green", fillOpacity: 0.5, hoverFillColor: "white", hoverFillOpacity: 0.8, strokeColor: "#9933FF", strokeOpacity: 0.7, strokeWidth: 3, strokeLinecap: "round", hoverStrokeColor: "#EE2819", hoverStrokeOpacity: 1, hoverStrokeWidth: 0.2, pointRadius: 6, hoverPointRadius: 1, hoverPointUnit: "%", zIndex: 2, pointerEvents: "visiblePainted" }, 'default': { fillColor: "blue", fillOpacity: 0.4, hoverFillColor: "white", hoverFillOpacity: 0.3, strokeColor: "red", strokeOpacity: 0.5, strokeWidth: 3, strokeLinecap: "round", hoverStrokeColor: "red", hoverStrokeOpacity: 1, hoverStrokeWidth: 0.2, pointRadius: 6, hoverPointRadius: 1, hoverPointUnit: "%", zIndex: 2, pointerEvents: "visiblePainted", cursor: "pointer" }, 'temporary': { fillColor: "#ff6245", fillOpacity: 0.2, hoverFillColor: "white", hoverFillOpacity: 0.8, strokeColor: "red", strokeOpacity: 0.7, strokeLinecap: "round", strokeWidth: 3, hoverStrokeColor: "red", hoverStrokeOpacity: 1, hoverStrokeWidth: 0.2, pointRadius: 6, hoverPointRadius: 1, hoverPointUnit: "%", zIndex: 2, pointerEvents: "visiblePainted" }, 'AEE089': { fillColor: "#4ADB03", fillOpacity: 1, hoverFillColor: "white", hoverFillOpacity: 0.3, strokeColor: "#4ADB03", strokeOpacity: 1, strokeWidth: 3, strokeLinecap: "round", hoverStrokeColor: "red", hoverStrokeOpacity: 1, hoverStrokeWidth: 0.2, pointRadius: 6, hoverPointRadius: 1, hoverPointUnit: "%", pointerEvents: "visiblePainted", zIndex: 2, cursor: "pointer" }, 'E10601': { fillColor: "#E10601", fillOpacity: 0.4, hoverFillColor: "white", hoverFillOpacity: 0.3, strokeColor: "red", strokeOpacity: 0.9, strokeWidth: 3, strokeLinecap: "round", hoverStrokeColor: "#E10601", hoverStrokeOpacity: 1, hoverStrokeWidth: 0.2, pointRadius: 6, hoverPointRadius: 1, hoverPointUnit: "%", zIndex: 2, pointerEvents: "visiblePainted", cursor: "pointer" }, 'F7A82B': { fillColor: "#E8771B", fillOpacity: 0.4, hoverFillColor: "white", hoverFillOpacity: 0.3, strokeColor: "#E8771B", strokeOpacity: 0.9, strokeWidth: 3, strokeLinecap: "round", hoverStrokeColor: "red", hoverStrokeOpacity: 1, hoverStrokeWidth: 0.2, pointRadius: 6, hoverPointRadius: 1, hoverPointUnit: "%", zIndex: 2, pointerEvents: "visiblePainted", cursor: "pointer"} }; SFeature.prototype.ClassName = SClassName.SFeature; SFeature.prototype.GetFeatureElement = function () { if (this.FGeometry) return SUtil.GetElement(this.FGeometry.FId); return null; }
SFeature.prototype.GetTag = function () { return this.FTag; }
SFeature.prototype.SetTag = function (fXu) { if (fXu) { this.FTag = fXu; } }
SFeature.prototype.Activate = function () { if (this.FGeometry) { this.dom = this.GetFeatureElement(); if (this.dom != null) { this.FEvents = new SEvents(this, this.dom, null, true); switch (this.FGeometry.ClassName) { case SClassName.SPoint: this.FEvents.AddEventListener("mousedown", this.dom, function () { SGFeatureDftEvts.TriggerEventListener("pointMouseDown"); }); this.FEvents.AddEventListener("mouseover", this.dom, function () { SGFeatureDftEvts.TriggerEventListener("pointMouseOver"); }); break; case SClassName.SCircle: this.FEvents.AddEventListener("mousedown", this.dom, function () { SGFeatureDftEvts.TriggerEventListener("circleMouseDown"); }); this.FEvents.AddEventListener("mouseover", this.dom, function () { SGFeatureDftEvts.TriggerEventListener("circleMouseOver"); }); break; case SClassName.SRectangle: this.FEvents.AddEventListener("mousedown", this.dom, function () { SGFeatureDftEvts.TriggerEventListener("rectMouseDown"); }); this.FEvents.AddEventListener("mouseover", this.dom, function () { SGFeatureDftEvts.TriggerEventListener("rectMouseOver"); }); break; case SClassName.SPolygon: this.FEvents.AddEventListener("mousedown", this.dom, function () { SGFeatureDftEvts.TriggerEventListener("polygonMouseDown"); }); this.FEvents.AddEventListener("mouseover", this.dom, function () { SGFeatureDftEvts.TriggerEventListener("polygonMouseOver"); }); break; } } else { } } }
SFeature.prototype.GetEVTReference = function () { return this.FEvents; }
SFeature.prototype.AddEventListener = function (wXU, lxu, Xxu, yxU) { if (JSecurity.IsValid()) { if (this.FEvents) { this.FEvents.AddEventListener(wXU, lxu, Xxu, yxU); } } }
SFeature.prototype.ReleaseEventListener = function (hXu, zYU, NYU) { if (this.FEvents) { this.FEvents.ReleaseEventListener(hXu, zYU, NYU); } }
SFeature.prototype.GetId = function () { return this.FId; }
SFeature.prototype.GetState = function () { return this.FState; }
SFeature.prototype.SetStyle = function (style) { if (style != null) { this.style = style; var ByU = this.GetFeatureElement(); if (ByU != null) { try { ByU._style = this.style; } catch (evsdsd) { } } }; }
SFeature.prototype.GetStyle = function () { return this.style; }
SFeature.prototype.GetLayer = function () { return this.FLayer; }
SFeature.prototype.GetGeometry = function () { return this.FGeometry; }
SFeature.prototype.SetGeometry = function (uyU) { if (uyU != null) this.FGeometry = uyU; }
SFeature.prototype.Destroy = function () { if (this.FLayer) { this.FLayer.RemoveFeatures(this); this.FLayer = null; } this.FGeometry = null; if (this.FEvents) { this.FEvents.Destroy(); } }
SFeature.prototype.Clone = function () { return new SFeature(this.FGeometry.Clone(), this.FAttributes, this.style); }
SFeature.prototype.AtPoint = function (DYu, oYu, CYU) { var eYU = false; if (this.FGeometry) { eYU = this.FGeometry.AtPoint(DYu, oYu, CYU); } return eYU; }
SFeature.prototype.OnScreen = function (gyU) { var Kyu = false; if (this.FLayer && this.FLayer.FMap) { var mYU = this.FLayer.FMap.GetExtent(); if (gyU) { var Pyu = this.FGeometry.GetBound(); Kyu = mYU.IntersectsBound(Pyu); } else { var qyU = mYU.ToGeometry(); Kyu = qyU.Intersects(this.FGeometry); qyU = null; } mYU = null; } return Kyu; }
SFeature.prototype.SetState = function (ryu) { if (ryu != null) this.FState = ryu; }
SFeature.prototype._DefaultEvent = function (syu) { SEvent.Stop(syu, true); }
function SFeatureState() { }
SFeatureState.Unknown = "Unknown"; SFeatureState.Insert = "Insert"; SFeatureState.Delete = "Delete"; SFeatureState.Update = "Insert"; SFeatureState.New = "New"; function SVectorElement(TYU, Vyu) { this.FRendererRoot = null; this.FRoot = null; this.FXmlns = Vyu; SRenderer.call(this, TYU, Vyu); }
SVectorElement.prototype = new SRenderer();
SVectorElement.prototype.ClassName = SClassName.SVectorElement; SVectorElement.prototype.Destroy = function () { this.Clear(); this.FRendererRoot = null; SRenderer.prototype.Destroy.apply(this, arguments); }
SVectorElement.prototype.Clear = function () { if (this.FRendererRoot) { while (this.FRendererRoot.childNodes.length > 0) { this.FRendererRoot.removeChild(this.FRendererRoot.firstChild); } } }
SVectorElement.prototype.GetNodeType = function (FYu) { }
SVectorElement.prototype.DrawGeometryNode = function (wYU, LYU, xyU) { xyU = xyU || wYU._style; var YYu = { 'isFilled': true, 'isStroked': true }; switch (LYU.ClassName) { case SClassName.SPoint: this.DrawPoint(wYU, LYU); break; case SClassName.SLineString: this.DrawLineString(wYU, LYU); break; case SClassName.SRectangle: this.DrawRectangle(wYU, LYU); break; case SClassName.SLinearRing: this.DrawLineString(wYU, LYU); break; case SClassName.SPolygon: this.DrawPolygon(wYU, LYU); break; case SClassName.SSurface: this.DrawSurface(wYU, LYU); break; case SClassName.SCircle: this.DrawCircle(wYU, LYU, LYU.FRadius); break; default: break; } wYU._style = xyU; wYU._options = YYu; this.SetStyle(wYU, xyU, YYu, LYU); }
SVectorElement.prototype.DrawPoint = function (Hyu, zHU) { }
SVectorElement.prototype.DrawLineString = function (nHU, bhU) { }
SVectorElement.prototype.DrawLinearRing = function (UHu, dHu) { }
SVectorElement.prototype.DrawPolygon = function (OHu, Chu) { }
SVectorElement.prototype.DrawRectangle = function (ehu, ghu) { }
SVectorElement.prototype.DrawCircle = function (kHu, MHU) { }
SVectorElement.prototype.DrawCurve = function (pHu, QHu) { }
SVectorElement.prototype.DrawSurface = function (rhU, shU) { }
SVectorElement.prototype.GetFeatureIdFromEvent = function (THU) { var VHu = THU.target || THU.srcElement; return VHu._featureId; }
SVectorElement.prototype.EraseGeometry = function (fhu) { if ((fhu.ClassName == SClassName.SMultiPoint) || (fhu.ClassName == SClassName.SMultiLineString) || (fhu.ClassName == SClassName.SMultiPolygon)) { for (var i = 0; i < fhu.FComponents.length; i++) { this.EraseGeometry(fhu.FComponents[i]); } } else { var whU = SUtil.GetElement(fhu.FId); if (whU && whU.parentNode) { if (whU.FGeometry) { whU.FGeometry.Destroy(); whU.FGeometry = null; } whU.parentNode.removeChild(whU); } } }
SVectorElement.prototype.NodeFactory = function (lHu, xHu, yhU) { var HHU = SUtil.GetElement(lHu); if (HHU) { if (this.NodeTypeCompare(HHU, xHu) == false) { if (HHU.parentNode != null) HHU.parentNode.removeChild(HHU); HHU = this.NodeFactory(lHu, xHu, yhU); } } else { HHU = this.CreateNode(xHu, lHu); } HHU.style.position = "absolute"; return HHU; }
function SVectorSVG(Zzd) { this.FMaxPixel = 15000; this.FExtentValue = "0"; this.FLocalResolution = null; this.FSvgNode = null; if (!this.Supported()) { return; } SVectorElement.apply(this, [Zzd, "http://www.w3.org/2000/svg"]); this.FSvgNode = this.NodeFactory(this.FRendererRoot.id + '_svg', 'svg'); this.FRendererRoot.appendChild(this.FSvgNode); }
SVectorSVG.prototype = new SVectorElement();
SVectorSVG.prototype.ClassName = SClassName.SVectorSVG; SVectorSVG.prototype.Destroy = function () { SVectorElement.prototype.Destroy.apply(this, arguments); }
SVectorSVG.prototype.Supported = function () { var nzd = "http://www.w3.org/TR/SVG11/feature#"; return (document.implementation && (document.implementation.hasFeature("org.w3c.svg", "1.0") || document.implementation.hasFeature(nzd + "SVG", "1.1") || document.implementation.hasFeature(nzd + "BasicStructure", "1.1"))); }
SVectorSVG.prototype.SetExtent = function (BzD) { SVectorElement.prototype.SetExtent.apply(this, arguments); var UZd = this.GetResolution(); if (!this.FLocalResolution || UZd != this.FLocalResolution) { this.FLeft = -BzD.FLeft / UZd; this.FTop = BzD.FTop / UZd; } var dZD = 0; var oZD = 0; if (this.FLocalResolution && UZd == this.FLocalResolution) { dZD = (this.FLeft) - (-BzD.FLeft / UZd); oZD = (this.FTop) - (BzD.FTop / UZd); } this.FLocalResolution = UZd; var Czd = dZD + " " + oZD + " " + BzD.GetWidth() / UZd + " " + BzD.GetHeight() / UZd; this.FRendererRoot.setAttributeNS(null, "viewBox", Czd); }
SVectorSVG.prototype.SetSize = function (ezD) { SRenderer.prototype.SetSize.apply(this, arguments); this.FRendererRoot.setAttributeNS(null, "width", this.FSize.FW); this.FRendererRoot.setAttributeNS(null, "height", this.FSize.FH); }
SVectorSVG.prototype.GetNodeType = function (Gzd) { var kZd = null; switch (Gzd.ClassName) { case SClassName.SPoint: case SClassName.SCircle: kZd = "circle"; break; case SClassName.SLineString: kZd = "polyline"; break; case SClassName.SLinearRing: kZd = "polygon"; break; case SClassName.SPolygon: case SClassName.SCurve: case SClassName.SSurface: case SClassName.SRectangle: kZd = "path"; break; default: break; } return kZd; }
SVectorSVG.prototype.DrawGeometry = function (Mzd, PzD, qzD) { var Rzd = Mzd.ClassName; if ((Rzd == SClassName.SCollection) || (Rzd == SClassName.SMultiPoint) || (Rzd == SClassName.SMultiLineString) || (Rzd == SClassName.SMultiPolygon)) { for (var i = 0; i < Mzd.FComponents.length; i++) { this.DrawGeometry(Mzd.FComponents[i], PzD, qzD); } return; }; var SZd = this.GetNodeType(Mzd); var tzd = this.NodeFactory(Mzd.FId, SZd, Mzd); tzd._featureId = qzD; tzd._geometryClass = Mzd.ClassName; tzd._style = PzD; this.FSvgNode.appendChild(tzd); this.DrawGeometryNode(tzd, Mzd); }
SVectorSVG.prototype.SetStyle = function (Vzd, fzD, WzD, lzd) { fzD = fzD || Vzd._style; WzD = WzD || Vzd._options; if (Vzd._geometryClass == SClassName.SPoint) { if (fzD.externalGraphic) { var XZd = Vzd.parentNode; var YZD = Vzd.getAttributeNS(null, "id"); var hZd = parseFloat(Vzd.getAttributeNS(null, "cx")); var ZND = parseFloat(Vzd.getAttributeNS(null, "cy")); var NND = Vzd._featureId; var bnd = Vzd._geometryClass; var DNd = Vzd._style; XZd.removeChild(Vzd); var Vzd = this.CreateNode("image", YZD); Vzd._featureId = NND; Vzd._geometryClass = bnd; Vzd._style = DNd; XZd.appendChild(Vzd); if (fzD.graphicWidth && fzD.graphicHeight) { Vzd.setAttributeNS(null, "preserveAspectRatio", "none"); } var width = fzD.graphicWidth || fzD.graphicHeight; var height = fzD.graphicHeight || fzD.graphicWidth; width = width ? width : fzD.pointRadius * 2; height = height ? height : fzD.pointRadius * 2; Vzd.style.zIndex = fzD.zIndex; var cnd = (fzD.graphicXOffset != undefined) ? fzD.graphicXOffset : -(0.5 * width); var eND = (fzD.graphicYOffset != undefined) ? fzD.graphicYOffset : -(0.5 * height); var GnD = fzD.graphicOpacity || fzD.fillOpacity; Vzd.setAttributeNS(null, "pX", (hZd + cnd).toFixed()); Vzd.setAttributeNS(null, "pY", (-ZND + eND).toFixed()); Vzd.setAttributeNS(null, "width", width); Vzd.setAttributeNS(null, "height", height); Vzd.setAttributeNS("http://www.w3.org/1999/xlink", "href", fzD.externalGraphic); Vzd.setAttributeNS(null, "transform", "scale(1,-1)"); Vzd.setAttributeNS(null, "pStyle", "opacity: " + GnD); } else { Vzd.setAttributeNS(null, "r", fzD.pointRadius); } } if (WzD.isFilled) { Vzd.setAttributeNS(null, "fill", fzD.fillColor); Vzd.setAttributeNS(null, "fill-opacity", fzD.fillOpacity); } else { Vzd.setAttributeNS(null, "fill", "none"); } if (WzD.isStroked) { Vzd.setAttributeNS(null, "stroke", fzD.strokeColor); Vzd.setAttributeNS(null, "stroke-opacity", fzD.strokeOpacity); Vzd.setAttributeNS(null, "stroke-width", fzD.strokeWidth); Vzd.setAttributeNS(null, "stroke-linecap", fzD.strokeLinecap); } else { Vzd.setAttributeNS(null, "stroke", "none"); } if (fzD.pointerEvents) { } if (fzD.cursor) { Vzd.setAttributeNS(null, "cursor", fzD.cursor); } Vzd.setAttributeNS(null, "stroke-end", "Classic"); if (fzD.hoverEnabled) { Vzd.onmouseover = SVectorSVG.__FeatureMouseOver; Vzd.onmouseout = SVectorSVG.__FeatureMouseOut; } }
SVectorSVG.prototype.CreateNode = function (Knd, MNd) { var PNd = document.createElementNS(this.FXmlns, Knd); if (MNd) { PNd.setAttributeNS(null, "id", MNd); } return PNd; }
SVectorSVG.prototype.NodeTypeCompare = function (QNd, RnD) { return (RnD == QNd.nodeName); }
SVectorSVG.prototype.DrawPoint = function (SnD, tnD) { var vnd = this.GetResolution(); var FND = SSystem.PointRadius * vnd; this.DrawCircle(SnD, tnD, FND); }
SVectorSVG.prototype.DrawCircle = function (wNd, LND, xNd) { var ynD = this.GetResolution(); var HND = this.FMap.GetMapPxFromLonLat(new SLonLat(LND.FX, LND.FY)); var ZBD = HND.FX; var NBD = HND.FY; var bBD = true; if (ZBD < -this.FMaxPixel || ZBD > this.FMaxPixel) { bBD = false; } if (NBD < -this.FMaxPixel || NBD > this.FMaxPixel) { bBD = false; } var UbD = xNd / ynD; var DbD = UbD * 2; if (bBD) { wNd.setAttributeNS(null, "cx", ZBD); wNd.setAttributeNS(null, "cy", NBD); wNd.setAttributeNS(null, "r", UbD); wNd.parentNode.setAttributeNS(null, "width", DbD * 2); wNd.parentNode.setAttributeNS(null, "height", DbD * 2); wNd.parentNode.style.top = (NBD - DbD) + "px"; wNd.parentNode.style.left = (ZBD - DbD) + "px"; wNd.parentNode.setAttributeNS(null, "viewBox", (ZBD - DbD) + " " + (NBD - DbD) + " " + DbD * 2 + " " + DbD * 2); wNd.parentNode.style.zIndex = "1000"; wNd.parentNode.style.position = "absolute"; } else { wNd.parentNode.removeChild(wNd); } DbD = null; UbD = null; }
SVectorSVG.prototype.DrawLineString = function (obD, CBd) { if (CBd.FComponents.length == 0) return; var ebD = this.GetResolution(); var GBD = CBd.GetBound(); var kbD = this.FMap.GetMapPxFromLonLat(new SLonLat(GBD.FLeft, GBD.FTop)); var MBd = this.FMap.GetSize().FW; var pbD = this.FMap.GetSize().FH; var qBd = GBD.GetWidth() / ebD + MBd; var Rbd = GBD.GetHeight() / ebD + pbD; var SbD = kbD.FY - pbD / 2; var Tbd = kbD.FX - MBd / 2; obD.parentNode.setAttributeNS(null, "width", qBd); obD.parentNode.setAttributeNS(null, "height", Rbd); var VBD = parseInt(this.FMap.FLayerContainerDiv.style.left); var FBd = parseInt(this.FMap.FLayerContainerDiv.style.top); obD.parentNode.style.top = -FBd + "px"; obD.parentNode.style.left = -VBD + "px"; obD.parentNode.setAttributeNS(null, "viewBox", (-VBD) + " " + (-FBd) + " " + qBd + " " + Rbd); obD.setAttributeNS(null, "points", this.GetComponentsString(CBd.FComponents)); }
SVectorSVG.prototype.DrawLinearRing = function (WBD, LBD) { WBD.setAttributeNS(null, "points", this.GetComponentsString(LBD.FComponents)); }
SVectorSVG.prototype.DrawLine = function (xBd, YbD, hbd) { this.SetNodeDimension(xBd, YbD); var zUd = []; zUd.push("m "); for (var i = 0; i < YbD.FComponents.length; i++) { var NuD = this.FMap.GetViewPortPxFromLonLat(new SLonLat(YbD.FComponents[i].FX, YbD.FComponents[i].FY)); var Bud = NuD.FX - this.FMap.FLayerContainerDiv.style.posLeft; var uud = NuD.FY - this.FMap.FLayerContainerDiv.style.posTop; zUd.push(" " + Bud.toFixed() + "," + uud.toFixed() + " l "); } if (hbd) { zUd.push(" pX"); } zUd.push(" e"); xBd.path = zUd.join(""); }
SVectorSVG.prototype.DrawPolygon = function (dUD, oUD) { if (oUD.FComponents.length == 0) return; var cUd = this.GetResolution(); var Eud = oUD.GetBound(); var GUd = this.FMap.GetMapPxFromLonLat(new SLonLat(Eud.FLeft, Eud.FTop)); var kud = this.FMap.GetSize().FW; var MuD = this.FMap.GetSize().FH; var pud = Eud.GetWidth() / cUd + kud; var quD = Eud.GetHeight() / cUd + MuD; dUD.parentNode.setAttributeNS(null, "width", pud); dUD.parentNode.setAttributeNS(null, "height", quD); var RUd = parseInt(this.FMap.FLayerContainerDiv.style.left); var SUd = parseInt(this.FMap.FLayerContainerDiv.style.top); dUD.parentNode.style.top = -SUd + "px"; dUD.parentNode.style.left = -RUd + "px"; dUD.parentNode.style.position = "absolute"; dUD.parentNode.setAttributeNS(null, "viewBox", (-RUd) + " " + (-SUd) + " " + pud + " " + quD); var d = ""; var tUd = true; for (var vud = 0; vud < oUD.FComponents.length; vud++) { var FuD = oUD.FComponents[vud]; d += " M"; for (var i = 0; i < FuD.FComponents.length; i++) { var Wud = this.GetShortString(FuD.FComponents[i]); if (Wud) { d += " " + Wud; } else { tUd = false; } } } d += " z"; if (tUd) { dUD.setAttributeNS(null, "d", d); dUD.setAttributeNS(null, "fill-rule", "evenodd"); } else { dUD.setAttributeNS(null, "d", ""); } }
SVectorSVG.prototype.DrawRectangle = function (luD, xUd) { var yuD = this.GetResolution(); var HuD = this.FMap.GetMapPxFromLonLat(new SLonLat(xUd.FX, xUd.FY)); var zDD = HuD.FX; var ndd = HuD.FY; var BdD = 0; var UdD = 0; var DDD = 70; var width = Math.abs(Math.round(xUd.FWidth / yuD)); var height = Math.abs(Math.round(xUd.FHeight / yuD)); var ODD = width + DDD * 2; var cdD = height + DDD * 2; luD.parentNode.setAttributeNS(null, "width", ODD); luD.parentNode.setAttributeNS(null, "height", cdD); if (xUd.FWidth < 0) { UdD = zDD - width - DDD; } else { UdD = zDD - DDD; } if (xUd.FHeight > 0) { BdD = ndd - height - DDD; } else { BdD = ndd - DDD; } luD.parentNode.style.top = BdD + "px"; luD.parentNode.style.left = UdD + "px"; luD.parentNode.setAttributeNS(null, "viewBox", UdD + " " + BdD + " " + ODD + " " + cdD); var Edd = xUd.FX; var Gdd = xUd.FY; var kDd = xUd.FX + xUd.FWidth; var mDd = xUd.FY + xUd.FHeight; var pDD = []; pDD.push("M"); var qdd = HuD.FX; var RDd = HuD.FY; pDD.push(qdd.toFixed() + " " + RDd.toFixed()); rp1 = this.FMap.GetMapPxFromLonLat(new SLonLat(kDd, Gdd)); qdd = rp1.FX; RDd = rp1.FY; pDD.push(" L" + qdd.toFixed() + "," + RDd.toFixed()); rp1 = this.FMap.GetMapPxFromLonLat(new SLonLat(kDd, mDd)); qdd = rp1.FX; RDd = rp1.FY; pDD.push(" L" + qdd.toFixed() + " " + RDd.toFixed()); rp1 = this.FMap.GetMapPxFromLonLat(new SLonLat(Edd, mDd)); qdd = rp1.FX; RDd = rp1.FY; pDD.push(" L" + qdd.toFixed() + " " + RDd.toFixed() + " Z"); rp1 = null; qdd = null; RDd = null; luD.setAttributeNS(null, "d", pDD.join("")); Edd = null; Gdd = null; kDd = null; mDd = null; luD.style.position = ""; }
SVectorSVG.prototype.DrawCurve = function (SdD, TdD) { var d = null; var vdd = true; for (var i = 0; i < TdD.FComponents.length; i++) { if ((i % 3) == 0 && (i / 3) == 0) { var fDd = this.GetShortString(TdD.FComponents[i]); if (!fDd) { vdd = false; } d = "M " + fDd; } else if ((i % 3) == 1) { var fDd = this.GetShortString(TdD.FComponents[i]); if (!fDd) { vdd = false; } d += " C " + fDd; } else { var fDd = this.GetShortString(TdD.FComponents[i]); if (!fDd) { vdd = false; } d += " " + fDd; } } if (vdd) { SdD.setAttributeNS(null, "d", d); } else { SdD.setAttributeNS(null, "d", ""); } }
SVectorSVG.prototype.DrawSurface = function (WDd, ldD) { var d = null; var XDD = true; for (var i = 0; i < ldD.FComponents.length; i++) { if ((i % 3) == 0 && (i / 3) == 0) { var ydD = this.GetShortString(ldD.FComponents[i]); if (!ydD) { XDD = false; } d = "M " + ydD; } else if ((i % 3) == 1) { var ydD = this.GetShortString(ldD.FComponents[i]); if (!ydD) { XDD = false; } d += " C " + ydD; } else { var ydD = this.GetShortString(ldD.FComponents[i]); if (!ydD) { XDD = false; } d += " " + ydD; } } d += " Z"; if (XDD) { WDd.setAttributeNS(null, "d", d); } else { WDd.setAttributeNS(null, "d", ""); } }
SVectorSVG.prototype.GetComponentsString = function (HDD) { var zoD = []; for (var i = 0; i < HDD.length; i++) { var NOd = this.GetShortString(HDD[i]); if (NOd) { zoD.push(NOd); } } return zoD.join(","); }
SVectorSVG.prototype.GetShortString = function (BOd) { var uoD = this.FMap.GetViewPortPxFromLonLat(new SLonLat(BOd.FX, BOd.FY)); var dOD = uoD.FX - this.FMap.FLayerContainerDiv.offsetLeft; var Ood = uoD.FY - this.FMap.FLayerContainerDiv.offsetTop; if (dOD < -this.FMaxPixel || dOD > this.FMaxPixel) { return false; } if (Ood < -this.FMaxPixel || Ood > this.FMaxPixel) { return false; } var cOd = dOD + "," + Ood; return cOd; }
SVectorSVG.__FeatureMouseOver = function () { try { var eoD = this._style; if (eoD != null) { this.setAttributeNS(null, "stroke", eoD.hoverStrokeColor); this.setAttributeNS(null, "stroke-opacity", eoD.hoverStrokeOpacity); this.setAttributeNS(null, "stroke-width", eoD.hoverStrokeWidth); this.setAttributeNS(null, "fill", eoD.hoverFillColor); this.setAttributeNS(null, "fill-opacity", eoD.hoverFillOpacity); this.style.zIndex = eoD.hoverZIndex; this.style.cursor = eoD.cursor; } } catch (_ex) { } }
SVectorSVG.__FeatureMouseOut = function () { try { var gOd = this._style; if (gOd != null) { this.setAttributeNS(null, "stroke", gOd.strokeColor); this.setAttributeNS(null, "stroke-opacity", gOd.strokeOpacity); this.setAttributeNS(null, "stroke-width", gOd.strokeWidth); this.setAttributeNS(null, "fill", gOd.fillColor); this.setAttributeNS(null, "fill-opacity", gOd.fillOpacity); this.style.zIndex = gOd.zIndex; this.style.cursor = gOd.cursor; } } catch (_ex) { } }
function SVectorVML(kOD) { if (!this.Supported()) { return; } 

if (!document.namespaces.v) {
    document.namespaces.add("v", "urn:schemas-microsoft-com:vml");
    var style = document.createStyleSheet();
    try { 
        //style.addRule('v\\:*', "behavior: url(#default#VML);");
        style.addRule('v\\:shape', "behavior:url(#default#VML);position: absolute; display: inline-block;");
        style.addRule('v\\:rect', "behavior:url(#default#VML);position: absolute; display: inline-block;");
        style.addRule('v\\:fill', "behavior:url(#default#VML);position: absolute; display: inline-block;");
        style.addRule('v\\:stroke', "behavior:url(#default#VML);position: absolute; display: inline-block;");
        style.addRule('v\\:circle', "behavior:url(#default#VML);position: absolute; display: inline-block;");
        style.addRule('v\\:line', "behavior:url(#default#VML);position: absolute; display: inline-block;");
        style.addRule('v\\:oval', "behavior:url(#default#VML);position: absolute; display: inline-block;");
    } catch (evc) { 
    }
} 

SUtil.AddVectorStartUp(); if (JSecurity.IsValid()) { SVectorElement.apply(this, [kOD, "urn:schemas-microsoft-com:vml"]); } }
SVectorVML.prototype = new SVectorElement();
SVectorVML.prototype.ClassName = SClassName.SVectorVML; SVectorVML.prototype.Destroy = function () { SVectorElement.prototype.Destroy.apply(this, arguments); }
SVectorVML.prototype.Supported = function () { try { return document.namespaces; } catch (_goc) { } return false; }
SVectorVML.prototype.SetExtent = function (moD) { }
SVectorVML.prototype.SetSize = function (poD) { SRenderer.prototype.SetSize.apply(this, arguments); this.FRendererRoot.style.width = this.FSize.FW; this.FRendererRoot.style.height = this.FSize.FH; }
SVectorVML.prototype.GetNodeType = function (Qod) { var RoD = null; switch (Qod.ClassName) { case SClassName.SPoint: case SClassName.SCircle: RoD = "v:oval"; break; case SClassName.SRectangle: case SClassName.SLineString: case SClassName.SLinearRing: case SClassName.SPolygon: case SClassName.SCurve: case SClassName.SSurface: RoD = "v:shape"; break; default: break; } return RoD; }
SVectorVML.prototype.DrawGeometry = function (sOd, TOD, vod) { var foD = sOd.ClassName; if ((foD == SClassName.SCollection) || (foD == SClassName.SMultiPoint) || (foD == SClassName.SMultiLineString) || (foD == SClassName.SMultiPolygon)) { for (var i = 0; i < sOd.FComponents.length; i++) { this.DrawGeometry(sOd.FComponents[i], TOD, vod); } return; }; var WOd = this.GetNodeType(sOd); var LOD = this.NodeFactory(sOd.FId, WOd, sOd); LOD._featureId = vod; LOD._geometryClass = sOd.ClassName; LOD._style = TOD; this.FRendererRoot.appendChild(LOD); this.DrawGeometryNode(LOD, sOd); }
SVectorVML.prototype.SetStyle = function (xod, Yod, hoD, ZCD) { Yod = Yod || xod._style; hoD = hoD || xod._options; if (xod._geometryClass == SClassName.SPoint) { if (Yod.externalGraphic) { var ncd = xod.id; var bcd = xod._featureId; var UcD = xod._geometryClass; var dCd = xod._style; this.FRendererRoot.removeChild(xod); var xod = this.CreateNode("v:rect", ncd); var CCd = this.CreateNode("v:fill", ncd + "_image"); xod.appendChild(CCd); xod._featureId = bcd; xod._geometryClass = UcD; xod._style = dCd; this.FRendererRoot.appendChild(xod); CCd.src = Yod.externalGraphic; CCd.type = "frame"; xod.style.flip = "y"; if (!(Yod.graphicWidth && Yod.graphicHeight)) { CCd.aspect = "atmost"; } var width = Yod.graphicWidth || Yod.graphicHeight; var height = Yod.graphicHeight || Yod.graphicWidth; width = width ? width : Yod.pointRadius * 2; height = height ? height : Yod.pointRadius * 2; var ecD = this.GetResolution(); var gCD = (Yod.graphicXOffset != undefined) ? Yod.graphicXOffset : -(0.5 * width); var KCD = (Yod.graphicYOffset != undefined) ? Yod.graphicYOffset : -(0.5 * height); xod.style.left = "0px"; xod.style.top = "0px"; xod.style.width = width; xod.style.height = height; } else { this.DrawPoint(xod, ZCD, Yod.pointRadius); } } var mCD = (hoD.isFilled) ? Yod.fillColor : "none"; xod.fillcolor = mCD; xod.style.zIndex = Yod.zIndex; var pcd = xod.getElementsByTagName("fill"); var CCd = (pcd.length == 0) ? null : pcd[0]; if (!hoD.isFilled) { if (CCd) { xod.removeChild(CCd); } } else { if (!CCd) { CCd = this.CreateNode('v:fill', xod.id + "_fill"); xod.appendChild(CCd); } CCd.type = Yod.fillType; if (Yod.fillBGSrc != null && Yod.fillBGSrc != "") { CCd.src = Yod.fillBGSrc; } if (xod._geometryClass == SClassName.SPoint && Yod.externalGraphic && Yod.graphicOpacity) { CCd.opacity = Yod.graphicOpacity; } else if (Yod.fillOpacity) { CCd.opacity = Yod.fillOpacity; } } var qcd = (hoD.isStroked) ? Yod.strokeColor : "none"; xod.strokecolor = qcd; xod.strokeweight = Yod.strokeWidth; var RcD = xod.getElementsByTagName("stroke"); var sCd = (RcD.length == 0) ? null : RcD[0]; if (!hoD.isStroked) { if (sCd) { xod.removeChild(sCd); } } else { if (!sCd) { sCd = this.CreateNode('v:stroke', xod.id + "_stroke"); xod.appendChild(sCd); } sCd.startarrow = Yod.strokeStartArrow; sCd.endarrow = Yod.strokeEndArrow; sCd.dashstyle = Yod.strokeDashStyle; sCd.arrowlength = Yod.strokeArrowLength; sCd.arrowwidth = Yod.strokeArrowWidth; if (Yod.strokeBGSrc != null && Yod.strokeBGSrc != "") { sCd.src = Yod.strokeBGSrc; } sCd.filltype = Yod.strokeFillType; sCd.opacity = Yod.strokeOpacity; sCd.endcap = !Yod.strokeLinecap || Yod.strokeLinecap == 'butt' ? 'flat' : Yod.strokeLinecap; } var tCd = xod.getElementsByTagName("textpath"); var vcd = (tCd.length == 0) ? null : tCd[0]; if (vcd == null) { vcd = this.CreateNode('v:textpath', xod.id + "_TextBox"); vcd.style.behavior = "url(#default#VML);position: absolute; display: inline-block;"; xod.appendChild(vcd); } vcd.string = "v-text-anchor:middle-center"; vcd.on = "true"; if (Yod.cursor) { xod.style.cursor = Yod.cursor; } if (Yod.hoverEnabled) { xod.onmouseover = SVectorVML.__FeatureMouseOver; xod.onmouseout = SVectorVML.__FeatureMouseOut; } }
SVectorVML.prototype.SetNodeDimension = function (fcd, wCD) { fcd.style.left = "0px"; fcd.style.top = "0px"; fcd.style.position = "absolute"; fcd.style.width = this.FMap.GetSize().FW; fcd.style.height = this.FMap.GetSize().FH; fcd.coordsize = this.FMap.GetSize().FW + " " + this.FMap.GetSize().FH; }
SVectorVML.prototype.CreateNode = function (lcD, xCd) { var yCd = document.createElement(lcD); if (xCd) { yCd.setAttribute('id', xCd); } return yCd; }
SVectorVML.prototype.NodeTypeCompare = function (HcD, ZeD) { var Bed = ZeD; var Ued = Bed.indexOf(":"); if (Ued != -1) { Bed = Bed.substr(Ued + 1); } var deD = HcD.nodeName; Ued = deD.indexOf(":"); if (Ued != -1) { deD = deD.substr(Ued + 1); } return (Bed == deD); }
SVectorVML.prototype.CreateRenderRoot = function () { var OED = this.container.id + "_vmlRoot"; var cED = this.NodeFactory(OED, "div"); cED.style.position = "absolute"; cED.style.top = "0"; cED.style.left = "0"; return cED; }
SVectorVML.prototype.CreateRoot = function () { var Eed = this.container.id + "_root"; var GeD = this.NodeFactory(Eed, "v:group"); return GeD; }
SVectorVML.prototype.DrawPoint = function (kEd, Med, PED) { if (!isNaN(Med.FX) && !isNaN(Med.FY)) { var qEd = this.GetResolution(); if (PED == null) { PED = 1; } var reD = this.FMap.GetViewPortPxFromLonLat(new SLonLat(Med.FX, Med.FY)); kEd.style.left = reD.FX - this.FMap.FLayerContainerDiv.style.posLeft - PED; kEd.style.top = reD.FY - this.FMap.FLayerContainerDiv.style.posTop - PED; kEd.style.position = "absolute"; kEd.style.width = PED * 2; kEd.style.height = PED * 2; kEd.style.zIndex = 1000; } }
SVectorVML.prototype.DrawCircle = function (sEd, ted, VED) { if (!isNaN(ted.FX) && !isNaN(ted.FY)) { var FEd = this.GetResolution(); VED = VED / FEd; var Wed = this.FMap.GetViewPortPxFromLonLat(new SLonLat(ted.FX, ted.FY)); sEd.style.left = Wed.FX - this.FMap.FLayerContainerDiv.style.posLeft - VED; sEd.style.top = Wed.FY - this.FMap.FLayerContainerDiv.style.posTop - VED; sEd.style.position = "absolute"; var LED = VED * 2; sEd.style.width = LED; sEd.style.height = LED; sEd.style.zIndex = 1000; } }
SVectorVML.prototype.DrawLineString = function (xeD, yED) { this.DrawLine(xeD, yED, false); }
SVectorVML.prototype.DrawLinearRing = function (HeD, ZgD) { this.DrawLine(HeD, ZgD, true); }
SVectorVML.prototype.DrawLine = function (ngD, bgD, ugd) { this.SetNodeDimension(ngD, bgD); var DGD = []; DGD.push("m "); for (var i = 0; i < bgD.FComponents.length; i++) { var ogd = this.FMap.GetViewPortPxFromLonLat(new SLonLat(bgD.FComponents[i].FX, bgD.FComponents[i].FY)); var CGd = ogd.FX - this.FMap.FLayerContainerDiv.style.posLeft; var Egd = ogd.FY - this.FMap.FLayerContainerDiv.style.posTop; DGD.push(" " + CGd.toFixed() + "," + Egd.toFixed() + " l "); } if (ugd) { DGD.push(" x"); } DGD.push(" e"); ngD.path = DGD.join(""); }
SVectorVML.prototype.DrawPolygon = function (gGd, kgD) { this.SetNodeDimension(gGd, kgD); var mGD = []; for (var pgd = 0; pgd < kgD.FComponents.length; pgd++) { var qgD = kgD.FComponents[pgd]; mGD.push("m"); for (var i = 0; i < qgD.FComponents.length; i++) { var RGD = this.FMap.GetViewPortPxFromLonLat(new SLonLat(qgD.FComponents[i].FX, qgD.FComponents[i].FY)); var SGd = RGD.FX - this.FMap.FLayerContainerDiv.style.posLeft; var TGD = RGD.FY - this.FMap.FLayerContainerDiv.style.posTop; mGD.push(" " + SGd.toFixed() + "," + TGD.toFixed()); if (i == 0) { mGD.push(" l"); } } mGD.push(" x "); } mGD.push("e"); gGd.path = mGD.join(""); }
SVectorVML.prototype.DrawRectangle = function (VGD, FGD) { this.SetNodeDimension(VGD, FGD); var Wgd = FGD.FX; var Lgd = FGD.FY; var xGD = FGD.FX + FGD.FWidth; var YgD = FGD.FY + FGD.FHeight; var hGD = []; hGD.push("m "); var ZkD = this.FMap.GetViewPortPxFromLonLat(new SLonLat(Wgd, Lgd)); var NKD = ZkD.FX - this.FMap.FLayerContainerDiv.style.posLeft; var BkD = ZkD.FY - this.FMap.FLayerContainerDiv.style.posTop; hGD.push(" " + NKD.toFixed() + "," + BkD.toFixed() + " l "); ZkD = this.FMap.GetViewPortPxFromLonLat(new SLonLat(xGD, Lgd)); NKD = ZkD.FX - this.FMap.FLayerContainerDiv.style.posLeft; BkD = ZkD.FY - this.FMap.FLayerContainerDiv.style.posTop; hGD.push(" " + NKD.toFixed() + "," + BkD.toFixed() + " l "); ZkD = this.FMap.GetViewPortPxFromLonLat(new SLonLat(xGD, YgD)); NKD = ZkD.FX - this.FMap.FLayerContainerDiv.style.posLeft; BkD = ZkD.FY - this.FMap.FLayerContainerDiv.style.posTop; hGD.push(" " + NKD.toFixed() + "," + BkD.toFixed() + " l "); ZkD = this.FMap.GetViewPortPxFromLonLat(new SLonLat(Wgd, YgD)); NKD = ZkD.FX - this.FMap.FLayerContainerDiv.style.posLeft; BkD = ZkD.FY - this.FMap.FLayerContainerDiv.style.posTop; hGD.push(" " + NKD.toFixed() + "," + BkD.toFixed() + " l "); ZkD = null; NKD = null; BkD = null; hGD.push(" x"); hGD.push(" e"); VGD.path = hGD.join(""); Wgd = null; Lgd = null; xGD = null; YgD = null; }
SVectorVML.prototype.DrawCurve = function (Ukd, dkD) { this.SetNodeDimension(Ukd, dkD); var oKD = this.GetResolution(); var cKD = []; for (var i = 0; i < dkD.FComponents.length; i++) { var eKd = this.FMap.GetViewPortPxFromLonLat(new SLonLat(dkD.FComponents[i].FX, dkD.FComponents[i].FY)); var gkD = eKd.FX - this.FMap.FLayerContainerDiv.style.posLeft; var KKD = eKd.FY - this.FMap.FLayerContainerDiv.style.posTop; if ((i % 3) == 0 && (i / 3) == 0) { cKD.push("m"); } else if ((i % 3) == 1) { cKD.push(" c"); } cKD.push(" " + gkD.toFixed() + "," + KKD.toFixed()); } cKD.push(" x e"); Ukd.path = cKD.join(""); }
SVectorVML.prototype.DrawSurface = function (MkD, pkD) { this.SetNodeDimension(MkD, pkD); var QKD = this.GetResolution(); var RKD = []; for (var i = 0; i < pkD.FComponents.length; i++) { var sKd = this.FMap.GetViewPortPxFromLonLat(new SLonLat(pkD.FComponents[i].FX, pkD.FComponents[i].FY)); var TkD = sKd.FX - this.FMap.FLayerContainerDiv.style.posLeft; var vkD = sKd.FY - this.FMap.FLayerContainerDiv.style.posTop; if ((i % 3) == 0 && (i / 3) == 0) { RKD.push("m"); } else if ((i % 3) == 1) { RKD.push(" c"); } RKD.push(" " + TkD + "," + vkD); } RKD.push(" x e"); MkD.path = RKD.join(""); }
SVectorVML.__FeatureMouseOver = function () { try { var Fkd = this._style; if (Fkd != null) { this.style.strokecolor = Fkd.hoverStrokeColor; this.style.strokeweight = Fkd.hoverStrokeWidth; this.fillcolor = Fkd.hoverFillColor; this.style.zIndex = Fkd.hoverZIndex; this.style.cursor = Fkd.cursor; var WkD = this.getElementsByTagName("stroke"); if (WkD) { var LkD = (WkD.length == 0) ? null : WkD[0]; if (LkD) { LkD.opacity = Fkd.hoverStrokeOpacity; } } var xKd = this.getElementsByTagName("fill"); if (xKd) { var ykD = (xKd.length == 0) ? null : xKd[0]; if (ykD) { ykD.opacity = Fkd.hoverFillOpacity; } } } } catch (_ex) { } }
SVectorVML.__FeatureMouseOut = function () { try { var hkd = this._style; if (hkd != null) { this.strokecolor = hkd.strokeColor; this.strokeweight = hkd.strokeWidth; this.fillcolor = hkd.fillColor; this.style.zIndex = hkd.zIndex; this.style.cursor = hkd.cursor; var ZmD = this.getElementsByTagName("stroke"); if (ZmD) { var NmD = (ZmD.length == 0) ? null : ZmD[0]; if (NmD) { NmD.opacity = hkd.strokeOpacity; } } var bMD = this.getElementsByTagName("fill"); if (bMD) { var UMd = (bMD.length == 0) ? null : bMD[0]; if (UMd) { UMd.opacity = hkd.fillOpacity; } } } } catch (_ex) { } }
function SVectorLayer(oMd, CMD) { this.isBaseLayer = false; this.isFixed = false; this.isVector = true; this.features = null; this.selectedFeatures = null; this.reportError = true; this.style = null; this.renderers = ['SVG', 'VML']; this.renderer = null; this.geometryType = null; this.FDrawn = false; var dMD = SFeature.Style['default']; this.style = SUtil.Extend({}, dMD); SLayerBase.apply(this, arguments); if (!this.renderer || !this.renderer.Supported()) { this.AssignRenderer(); } if (!this.renderer || !this.renderer.Supported()) { this.renderer = null; this.DisplayError(); } this.features = []; this.selectedFeatures = []; this.FLayerType = EnumLayerType.LTVectorLayer; SUtil.SetElementZIndex(this.FDiv, SEnumZIndex._ZVectorLayer); }
SVectorLayer.prototype = new SLayerBase();
SVectorLayer.prototype.ClassName = SClassName.SVectorLayer; SVectorLayer.prototype.Destroy = function () { SLayerBase.prototype.Destroy.apply(this, arguments); this.DestroyFeatures(); this.features = null; this.selectedFeatures = null; if (this.renderer) { this.renderer.Destroy(); } this.renderer = null; this.geometryType = null; this.FDrawn = null; }
SVectorLayer.prototype.AssignRenderer = function () { for (var i = 0; i < this.renderers.length; i++) { if (this.renderers[i] == 'VML') { if (SVectorVML.prototype.Supported()) { this.renderer = new SVectorVML(this.FDiv); break; } } else if (this.renderers[i] == 'SVG') { if (SVectorSVG.prototype.Supported()) { this.renderer = new SVectorSVG(this.FDiv); break; } } } }
SVectorLayer.prototype.SetStyle = function (emd, gMd) { var KmD = { 'isFilled': true, 'isStroked': true }; this.renderer.SetStyle(emd, gMd, KmD); }
SVectorLayer.prototype.SetFeatureStyle = function (mmD, pMD) { if (mmD != null) { this.SetStyle(mmD.GetFeatureElement(), pMD); } }
SVectorLayer.prototype.DisplayError = function () { if (this.reportError) { var Qmd = ""; Qmd += this.renderers.join("\n"); } }
SVectorLayer.prototype.SetMap = function (rmd) { SLayerBase.prototype.SetMap.apply(this, arguments); if (!this.renderer) { this.FMap.RemoveLayer(this); } else { this.renderer.FMap = this.FMap; this.renderer.SetSize(this.FMap.GetSize()); } }
SVectorLayer.prototype.OnMapResize = function () { SLayerBase.prototype.OnMapResize.apply(this, arguments); this.renderer.SetSize(this.FMap.GetSize()); }
SVectorLayer.prototype.MoveTo = function (SMD, tMd, Vmd) { SLayerBase.prototype.MoveTo.apply(this, arguments); if (!this.FDrawn || tMd) { this.FDrawn = true; for (var i = 0; i < this.features.length; i++) { var FMD = this.features[i]; this.DrawFeature(FMD); } } }
SVectorLayer.prototype.GetFeatureById = function (WMd) { if (this.features) { for (var u = 0; u < this.features.length; u++) { if (this.features[u].FId == WMd) { return this.features[u]; } } } return null; }
SVectorLayer.prototype.GetFeaturesByTag = function (lmD) { var XmD = []; for (var ymd = 0; ymd < this.features.length; ymd++) { if (this.features[ymd].FTag == lmD) { XmD.push(this.features[ymd]); } } return XmD; }
SVectorLayer.prototype.AddFeatures = function (hmd) { if (!(hmd instanceof Array)) { hmd = [hmd]; } for (var i = 0; i < hmd.length; i++) { var ZpD = hmd[i]; if (this.geometryType && !(ZpD.FGeometry instanceof this.geometryType)) { var NPd = " " + this.geometryType.prototype.ClassName; throw NPd; } this.features.push(ZpD); ZpD.FLayer = this; if (!ZpD.style) { ZpD.style = SUtil.Extend({}, this.style); } this.PreFeatureInsert(ZpD); if (this.FDrawn) { this.DrawFeature(ZpD); } this.OnFeatureInsert(ZpD); } }
SVectorLayer.prototype.AddFeature = function (bpD, UpD) { if (bpD != null) { this.features.push(bpD); bpD.FLayer = this; this.features.push(bpD); this.DrawFeature(bpD, UpD); } }
SVectorLayer.prototype.GetFeatures = function () { return this.features; }
SVectorLayer.prototype.RemoveFeaturesByTag = function (DPd) { this.RemoveFeatures(this.GetFeaturesByTag(DPd)); }
SVectorLayer.prototype.RemoveFeatureById = function (OPD) { this.RemoveFeature(this.GetFeatureById(OPD)); }
SVectorLayer.prototype.RemoveFeature = function (cPD) { this.RemoveFeatures([cPD]); }
SVectorLayer.prototype.RemoveFeatures = function (EpD) { if (!(EpD instanceof Array)) { EpD = [EpD]; } for (var i = EpD.length - 1; i >= 0; i--) { var gPd = EpD[i]; if (gPd != null) { this.features = SUtil.RemoveItem(this.features, gPd); if (gPd.FGeometry) { this.renderer.EraseGeometry(gPd.FGeometry); } if (SUtil.IndexOf(this.selectedFeatures, gPd) != -1) { SUtil.RemoveItem(this.selectedFeatures, gPd); } } } }
SVectorLayer.prototype.DestroyFeatures = function () { this.selectedFeatures = []; if (this.features != undefined) { for (var i = this.features.length - 1; i >= 0; i--) { this.features[i].Destroy(); } } }
SVectorLayer.prototype.ClearFeatures = function () { this.DestroyFeatures(); }
SVectorLayer.prototype.DrawFeature = function (KPd, style) { if (KPd != null) { if (style == null) { if (KPd.style) { style = KPd.style; } else { style = this.style; } } this.renderer.DrawFeature(KPd, style); } }
SVectorLayer.prototype.EraseFeatures = function (mPD) { this.renderer.EraseFeatures(mPD); }
SVectorLayer.prototype.GetFeatureFromEvent = function (pPD) { if (!this.renderer) { return null; } var qPd = this.renderer.GetFeatureIdFromEvent(pPD); return this.GetFeatureById(qPd); }
SVectorLayer.prototype.OnFeatureInsert = function (rpd) { }
SVectorLayer.prototype.PreFeatureInsert = function (SPd) { }
SVectorLayer.prototype.AutoMapArea = function () { }
function SLabel(TPd, vPD, fPd, wPD, LPD) { if (wPD != null) { wPD = wPD; } SOVBase.apply(this, [TPd, vPD, fPd, wPD, null, null, LPD]); this.FCssStyle = "tJLabel"; this.FDiv.className = "tJLabel"; this.FContentDiv.className = "tJLabelContent"; SUtil.SetElementZIndex(this.FDiv, SEnumZIndex.ZLabel); }
SLabel.prototype = new SOVBase();
SLabel.prototype.ClassName = SClassName.SLabel; SLabel.prototype.SetTitle = function (xpD) { if (xpD != null) { } this.SetContentHTML(xpD); }
SLabel.prototype.GetTitle = function () { return this.FContentHTML; }
function SHPoint(ypd, hPD, Zqd, Nqd) { this.FPoint = null; this.FLayer = null; this.FDrawing = false; this.FMouseDown = false; this.FLastDown = null; this.FLastUp = null; this.FTag = Nqd; if (ypd != null) { this.FLayer = ypd.FLayer; } if (Zqd == null) { this.style = SUtil.Extend(SFeature.Style['default'], {}); } else { this.style = Zqd; } SHandler.call(this, ypd, hPD); }
SHPoint.prototype = new SHandler();
SHPoint.prototype.ClassName = SClassName.SHPoint; SHPoint.prototype.GetLayer = function () { return this.FLayer; }
SHPoint.prototype.CreateFeature = function () { this.FPoint = new SFeature(new SPoint(), this.style); }
SHPoint.prototype.DeActivate = function () { if (!SHandler.prototype.DeActivate.apply(this, arguments)) { return false; } if (this.FDrawing) { this.Cancel(); } return true; }
SHPoint.prototype.DestroyFeature = function () { this.FPoint = null; }
SHPoint.prototype.Finalize = function () { this.FLayer.RemoveFeatures([this.FeatureClone()]); this.FLayer.AddFeatures([this.FeatureClone()]); this.CallBack(SDrawEventType.SCompleteMonitor, [this.GeometryClone()]); this.FeatureActivate(); this.FDrawing = false; this.FMouseDown = false; this.FLastDown = null; this.FLastUp = null; }
SHPoint.prototype.FeatureActivate = function () { this.FPoint.Activate(); }
SHPoint.prototype.Cancel = function () { if (this.FLayer.renderer != null) { } this.DestroyFeature(); this.FDrawing = false; this.FMouseDown = false; this.FLastDown = null; this.FLastUp = null; }
SHPoint.prototype.DblClick = function (bqD) { this.CallBack(SDrawEventType.DBClickMonitor, [this.GeometryClone()]); SEvent.Stop(bqD); return false; }
SHPoint.prototype.DrawFeature = function () { this.FLayer.DrawFeature(this.FPoint, this.style); }
SHPoint.prototype.GeometryClone = function () { return this.FPoint.FGeometry.Clone(); }
SHPoint.prototype.FeatureClone = function () { return this.FPoint; }
SHPoint.prototype.MouseDown = function (UQd) { if (!this.CheckModifiers(UQd)) { return true; } if (this.FLastDown && this.FLastDown.Equals(UQd.pXY)) { return true; } if (this.FLastDown == null) { this.CreateFeature(); } this.CallBack(SDrawEventType.MouseDownMonitor, []); this.FLastDown = UQd.pXY; this.FDrawing = true; var Dqd = this.FMap.GetLonLatFromPixel(UQd.pXY); this.FPoint.FGeometry.FX = Dqd.FLon; this.FPoint.FGeometry.FY = Dqd.FLat; this.DrawFeature(); return false; }
SHPoint.prototype.MouseMove = function (OqD) { if (this.FDrawing) { this.CallBack(SDrawEventType.MouseMoveMonitor, [this.GeometryClone()]); var cQd = this.FMap.GetLonLatFromPixel(OqD.pXY); this.FPoint.FGeometry.FX = cQd.FLon; this.FPoint.FGeometry.FY = cQd.FLat; this.FPoint.FGeometry.ClearBound(); this.DrawFeature(); } return false; }
SHPoint.prototype.MouseUp = function (EQd) { if (this.FDrawing) { this.CallBack(SDrawEventType.MouseUpMonitor, [this.GeometryClone()]); this.Finalize(); return false; } else { return true; } }
SHPoint.prototype.Activate = function () { if (this.FActive == false) { this.Register("mousedown", this.MouseDown); this.Register("mouseup", this.MouseUp); this.Register("mousemove", this.MouseMove); this.Register("dblclick", this.DblClick); SHandler.prototype.Activate.apply(this); } this.FActive = true; return true; }
SHPoint.prototype.DeActivate = function () { if (this.FActive == true) { this.UnRegister("mousedown", this.MouseDown); this.UnRegister("mouseup", this.MouseUp); this.UnRegister("mousemove", this.MouseMove); this.UnRegister("dblclick", this.DblClick); SHandler.prototype.DeActivate.apply(this); } this.FActive = false; return true; }
function SHPath(gqD, Kqd, MqD, pQd, qqD) { this.FLine = null; this.FFreehand = qqD; this.FFreehandToggle = 'shiftKey'; SHPoint.call(this, gqD, Kqd, MqD, pQd); }
SHPath.prototype = new SHPoint();
SHPath.prototype.ClassName = SClassName.SHPath; SHPath.prototype.CreateFeature = function () { this.FLine = new SFeature(new SLineString(), this.style, this.FTag); this.FPoint = new SFeature(new SPoint()); }
SHPath.prototype.SetFreehand = function (rQD) { if (rQD != undefined) { this.FFreehand = rQD; } }
SHPath.prototype.DestroyFeature = function () { SHPoint.prototype.DestroyFeature.apply(this); this.FLine = null; }
SHPath.prototype.AddPoint = function () { this.FLine.FGeometry.AddComponent(this.FPoint.FGeometry.Clone(), this.FLine.FGeometry.FComponents.length); }
SHPath.prototype.FreehandMode = function (sQD) { return (this.FFreehandToggle && sQD[this.FFreehandToggle]) ? !this.FFreehand : this.FFreehand; }
SHPath.prototype.ModifyFeature = function () { var Tqd = this.FLine.FGeometry.FComponents.length - 1; if (Tqd >= 0) { this.FLine.FGeometry.FComponents[Tqd].FX = this.FPoint.FGeometry.FX; this.FLine.FGeometry.FComponents[Tqd].FY = this.FPoint.FGeometry.FY; this.FLine.FGeometry.FComponents[Tqd].ClearBound(); } }
SHPath.prototype.DrawFeature = function () { this.FLayer.DrawFeature(this.FLine, this.style); }
SHPath.prototype.GeometryClone = function () { return this.FLine.FGeometry.Clone(); }
SHPath.prototype.FeatureClone = function () { return this.FLine; }
SHPath.prototype.MouseDown = function (Vqd) { if (this.FLastDown && this.FLastDown.Equals(Vqd.pXY)) { return false; } if (this.FLastDown == null) { this.CreateFeature(); } this.FMouseDown = true; this.FLastDown = Vqd.pXY; var fQd = this.FControl.FMap.GetLonLatFromPixel(Vqd.pXY); this.FPoint.FGeometry.FX = fQd.FLon; this.FPoint.FGeometry.FY = fQd.FLat; if ((this.FLastUp == null) || !this.FLastUp.Equals(Vqd.pXY)) { this.AddPoint(); } this.DrawFeature(); this.CallBack(SDrawEventType.MouseDownMonitor, [this.GeometryClone()]); this.FDrawing = true; return false; }
SHPath.prototype.MouseMove = function (WQd) { if (this.FDrawing) { var LQD = this.FMap.GetLonLatFromPixel(WQd.pXY); this.FPoint.FGeometry.FX = LQD.FLon; this.FPoint.FGeometry.FY = LQD.FLat; if (this.FMouseDown && this.FreehandMode(WQd)) { this.AddPoint(); } else { this.ModifyFeature(); } this.DrawFeature(); this.CallBack(SDrawEventType.MouseMoveMonitor, [this.GeometryClone()]); } return true; }
SHPath.prototype.MouseUp = function (xQD) { this.FMouseDown = false; if (this.FDrawing) { if (this.FreehandMode(xQD)) { this.Finalize(); } else { if (this.FLastUp == null) { this.AddPoint(); } this.FLastUp = xQD.pXY; } this.CallBack(SDrawEventType.MouseUpMonitor, [this.GeometryClone()]); return false; } return true; }
SHPath.prototype.DblClick = function (Yqd) { this.CallBack(SDrawEventType.DBClickMonitor, [this.GeometryClone()]); if (!this.FreehandMode(Yqd)) { var hqd = this.FLine.FGeometry.FComponents.length - 1; this.FLine.FGeometry.RemoveComponent(this.FLine.FGeometry.FComponents[hqd]); this.Finalize(); } return false; }
SHPath.prototype.FeatureActivate = function () { this.FLine.Activate(); }
SHPath.prototype.Cancel = function () { this.FLine.FGeometry.FComponents.pop(); this.FLayer.RemoveFeatures([this.FeatureClone()]); this.FLayer.AddFeatures([this.FeatureClone()]); this.DrawFeature(); this.FeatureActivate(); SHPoint.prototype.Cancel.apply(this); }
function SHPolygon(ZRD, nrD, brD, uRD, Drd) { this.FPolygon = null; SHPath.call(this, ZRD, nrD, brD, uRD, Drd); }
SHPolygon.prototype = new SHPath();
SHPolygon.prototype.ClassName = SClassName.SHPolygon; SHPolygon.prototype.CreateFeature = function () { this.FPolygon = new SFeature(new SPolygon(), this.style, this.FTag); this.FLine = new SFeature(new SLinearRing(), this.style, this.FTag); this.FPolygon.FGeometry.AddComponent(this.FLine.FGeometry); this.FPoint = new SFeature(new SPoint()); }
SHPolygon.prototype.DestroyFeature = function () { SHPath.prototype.DestroyFeature.apply(this); this.FPolygon = null; }
SHPolygon.prototype.ModifyFeature = function () { var Ord = this.FLine.FGeometry.FComponents.length - 2; this.FLine.FGeometry.FComponents[Ord].FX = this.FPoint.FGeometry.FX; this.FLine.FGeometry.FComponents[Ord].FY = this.FPoint.FGeometry.FY; this.FLine.FGeometry.FComponents[Ord].ClearBound(); }
SHPolygon.prototype.DrawFeature = function () { this.FLayer.DrawFeature(this.FPolygon, this.style); }
SHPolygon.prototype.GeometryClone = function () { return this.FPolygon.FGeometry.Clone(); }
SHPolygon.prototype.FeatureClone = function () { return this.FPolygon; }
SHPolygon.prototype.DblClick = function (CRd) { this.CallBack(SDrawEventType.DBClickMonitor, [this.GeometryClone()]); if (!this.FreehandMode(CRd)) { var eRD = this.FLine.FGeometry.FComponents.length - 2; this.FLine.FGeometry.RemoveComponent(this.FLine.FGeometry.FComponents[eRD]); this.Finalize(); } return false; }
SHPolygon.prototype.FeatureActivate = function () { this.FPolygon.Activate(); }
function SHRectangle(gRd, KRD, mrd, PrD) { this.FRect = null; this.FComponents = []; this.FLayer = null; this.FDrawing = false; this.FMouseDown = false; this.FLastDown = null; this.FLastUp = null; if (gRd != null) { this.FLayer = gRd.FLayer; } if (mrd) { this.style = mrd; } else { this.style = SUtil.Extend(SFeature.Style['default'], {}); } if (PrD) { this.FTag = PrD; } else { this.FTag = "_rct"; } SHandler.call(this, gRd, KRD); }
SHRectangle.prototype = new SHandler();
SHRectangle.prototype.ClassName = SClassName.SHRectangle; SHRectangle.prototype.CreateFeature = function () { this.FRect = new SFeature(new SRectangle(), this.style, this.FTag); }
SHRectangle.prototype.DestroyFeature = function () { SHPath.prototype.Destroy.apply(this); this.FRect = null; }
SHRectangle.prototype.AddPoint = function () { }
SHRectangle.prototype.ModifyFeature = function () { var QrD = this.FPoint.FGeometry.FX - this.FRect.FGeometry.FX; var rrd = this.FPoint.FGeometry.FY - this.FRect.FGeometry.FY; this.FRect.FGeometry.FWidth = QrD; this.FRect.FGeometry.FHeight = rrd; QrD = null; rrd = null; }
SHRectangle.prototype.DrawFeature = function () { this.FLayer.DrawFeature(this.FRect, this.style); }
SHRectangle.prototype.GeometryClone = function () { return this.FRect.FGeometry.Clone(); }
SHRectangle.prototype.MouseDown = function (srd) { if (this.FLastUp == false) { return; } this.FDrawing = true; this.FMouseDown = true; if (this.FLastDown && this.FLastDown.Equals(srd.pXY)) { return false; } else { this.CreateFeature(); } this.FLastDown = srd.pXY; this.FLastUp = false; var trD = this.FControl.FMap.GetLonLatFromPixel(srd.pXY); this.FRect.FGeometry.FX = trD.FLon; this.FRect.FGeometry.FY = trD.FLat; this.CallBack(SDrawEventType.MouseDownMonitor, [this.GeometryClone()]); this.DrawFeature(); return false; }
SHRectangle.prototype.MouseMove = function (VRd) { if (this.FDrawing) { this.CallBack(SDrawEventType.MouseMoveMonitor, [this.GeometryClone()]); var fRD = this.FMap.GetLonLatFromPixel(VRd.pXY); if (this.FMouseDown) { var wrd = fRD.FLon - this.FRect.FGeometry.FX; var LRD = fRD.FLat - this.FRect.FGeometry.FY; this.FRect.FGeometry.FWidth = wrd; this.FRect.FGeometry.FHeight = LRD; wrd = null; LRD = null; } fRD = null; this.DrawFeature(); } return false; }
SHRectangle.prototype.MouseUp = function (XRD) { this.CallBack(SDrawEventType.MouseUpMonitor, [this.GeometryClone()]); this.Finalize(); return false; }
SHRectangle.prototype.Dblclick = function (yrd) { this.CallBack(SDrawEventType.DBClickMonitor, [this.GeometryClone()]); return false; }
SHRectangle.prototype.FeatureActivate = function () { this.FRect.Activate(); }
SHRectangle.prototype.Activate = function () { if (this.FActive == false) { this.Register("mousedown", this.MouseDown); this.Register("mouseup", this.MouseUp); this.Register("mousemove", this.MouseMove); this.Register("dblclick", this.DblClick); SHandler.prototype.Activate.apply(this); } return true; }
SHRectangle.prototype.DeActivate = function () { if (this.FActive == true) { this.UnRegister("mousedown", this.MouseDown); this.UnRegister("mouseup", this.MouseUp); this.UnRegister("mousemove", this.MouseMove); this.UnRegister("dblclick", this.DblClick); SHandler.prototype.DeActivate.apply(this); } return true; }
SHRectangle.prototype.Finalize = function () { this.FLayer.RemoveFeatures([this.FeatureClone()]); this.FLayer.AddFeatures([this.FeatureClone()]); this.FeatureActivate(); this.CallBack(SDrawEventType.SCompleteMonitor, [this.GeometryClone()]); this.FDrawing = false; this.FMouseDown = false; this.FLastDown = null; this.FLastUp = null; }
SHRectangle.prototype.FeatureClone = function () { return this.FRect; }
function SHCircle(HrD, ZsD, NSd, BSd) { this.FCircle = null; this.FBegin = null; SHPoint.apply(this, arguments); }
SHCircle.prototype = new SHPoint();
SHCircle.prototype.ClassName = SClassName.SHCircle; SHCircle.prototype.CreateFeature = function () { this.FCircle = new SFeature(new SCircle(), this.style, this.FTag); this.FPoint = new SFeature(new SPoint()); }
SHCircle.prototype.DestroyFeature = function () { SHPoint.prototype.Destroy.apply(this); this.FCircle = null; }
SHCircle.prototype.AddPoint = function () { this.FCircle.FGeometry.FX = this.FPoint.FGeometry.FX; this.FCircle.FGeometry.FY = this.FPoint.FGeometry.FY; }
SHCircle.prototype.ModifyFeature = function () { var USd = this.FPoint.FGeometry.FX - this.FCircle.FGeometry.FX; var dsD = this.FPoint.FGeometry.FY - this.FCircle.FGeometry.FY; this.FCircle.FGeometry.FRadius = SPoint.CalcuDistance(new SPoint(this.FCircle.FGeometry.FX, this.FCircle.FGeometry.FY), this.FPoint.FGeometry); }
SHCircle.prototype.DrawFeature = function () { this.FLayer.DrawFeature(this.FCircle, this.style); }
SHCircle.prototype.GeometryClone = function () { return this.FCircle.FGeometry.Clone(); }
SHCircle.prototype.MouseDown = function (OsD) { this.FMouseDown = true; this.FDrawing = true; if (this.FLastDown == null) { this.CreateFeature(); } this.FLastDown = OsD.pXY; if (this.FBegin == null) { this.FBegin = this.FControl.FMap.GetLonLatFromPixel(OsD.pXY); } this.FCircle.FGeometry.FX = this.FBegin.FLon; this.FCircle.FGeometry.FY = this.FBegin.FLat; this.DrawFeature(); return false; }
SHCircle.prototype.MouseMove = function (CsD) { if (this.FDrawing) { this.CallBack(SDrawEventType.MouseMoveMonitor, [this.GeometryClone()]); var ESd = this.FMap.GetLonLatFromPixel(CsD.pXY); if (this.FMouseDown) { var gsD = ESd.FLon - this.FCircle.FGeometry.FX; var ksd = ESd.FLat - this.FCircle.FGeometry.FY; var Msd = new SPoint(this.FCircle.FGeometry.FX, this.FCircle.FGeometry.FY); var PSd = new SPoint(ESd.FLon, ESd.FLat); this.FCircle.FGeometry.FRadius = SPoint.CalcuDistance(Msd, PSd); gsD = null; ksd = null; Msd = null; PSd = null; } ESd = null; this.DrawFeature(); } return true; }
SHCircle.prototype.MouseUp = function (qsd) { this.FMouseDown = false; if (this.FDrawing) { this.CallBack(SDrawEventType.MouseUpMonitor, [this.GeometryClone()]); this.Finalize(); this.FBegin = null; return false; } return true; }
SHCircle.prototype.Dblclick = function (RSD) { this.CallBack(SDrawEventType.DBClickMonitor, [this.GeometryClone()]); this.Finalize(); return false; }
SHCircle.prototype.FeatureActivate = function () { this.FCircle.Activate(); }
SHCircle.prototype.FeatureClone = function () { return this.FCircle; }
function SHRegularPolygon(Ssd, tsD) { this.FSides = 4; this.FRadius = null; this.FSnapAngle = null; this.FSnapToggle = "shiftKey"; this.FPersist = false; this.FAngle = null; this.FFixedRadius = false; this.FFeature = null; this.FLayer = null; this.FOrigin = null; this.style = SUtil.Extend(SFeature.Style['default'], {}); SHandler.apply(this, [Ssd, tsD]); this.FOptions = (options) ? options : new Object(); }
SHRegularPolygon.prototype = new SMDrag();
SHRegularPolygon.prototype.ClassName = SClassName.SHRegularPolygon; SHRegularPolygon.prototype.SetOptions = function (VSD) { SUtil.Extend(this.FOptions, VSD); SUtil.Extend(this, VSD); }
SHRegularPolygon.prototype.Activate = function () { var FSD = false; if (SHandler.prototype.Activate.apply(this, arguments)) { var wsD = { displayInLayerSwitcher: false }; this.FLayer = new SLayerVector(this.ClassName, wsD); this.FMap.AddLayer(this.FLayer); FSD = true; } return FSD; }
SHRegularPolygon.prototype.DeActivate = function () { var lsd = false; if (SDrag.prototype.DeActivate.apply(this, arguments)) { if (this.FDragging) { this.cancel(); } this.FMap.RemoveLayer(this.FLayer, false); this.FLayer.Destroy(); if (this.FFeature) { this.FFeature.Destroy(); } lsd = true; } return lsd; }
SHRegularPolygon.prototype.Down = function (xsD) { this.FFixedRadius = !!(this.FRadius); var YSd = this.FMap.GetLonLatFromPixel(xsD.pXY); this.FOrigin = new SPoint(YSd.FLon, YSd.FLat); if (!this.FFixedRadius) { this.FRadius = this.FMap.GetResolution(); } if (this.FPersist) { this.clear(); } this.FFeature = new SFeature(); this.createGeometry(); this.FLayer.AddFeatures([this.FFeature]); this.FLayer.DrawFeature(this.FFeature, this.style); }
SHRegularPolygon.prototype.Move = function (HSd) { var ZtD = this.FMap.GetLonLatFromPixel(HSd.pXY); var NtD = new SPoint(ZtD.FLon, ZtD.FLat); if (this.FFixedRadius) { this.FOrigin = NtD; } else { this.CalculateAngle(NtD, HSd); this.FRadius = Math.max(this.FMap.GetResolution() / 2, NtD.DistanceTo(this.FOrigin)); } this.ModifyGeometry(); this.FLayer.DrawFeature(this.FFeature, this.style); }
SHRegularPolygon.prototype.Up = function (BTd) { this.Finalize(); }
SHRegularPolygon.prototype.Out = function (uTD) { this.Finalize(); }
SHRegularPolygon.prototype.CreateGeometry = function () { this.FAngle = Math.PI * ((1 / this.FSides) - (1 / 2)); if (this.FSnapAngle) { this.FAngle += this.FSnapAngle * (Math.PI / 180); } this.FFeature.FGeometry = SPolygon.CreateRegularPolygon(this.FOrigin, this.FRadius, this.FSides, this.FSnapAngle); }
SHRegularPolygon.prototype.ModifyGeometry = function () { var dtD, dx, dy, point; var OtD = this.FFeature.FGeometry.FComponents[0]; if (OtD.FComponents.length != (this.FSides + 1)) { this.CreateGeometry(); } for (var i = 0; i < this.FSides; ++i) { point = OtD.FComponents[i]; dtD = this.FAngle + (i * 2 * Math.PI / this.FSides); point.FX = this.FOrigin.FX + (this.FRadius * Math.cos(dtD)); point.FY = this.FOrigin.FY + (this.FRadius * Math.sin(dtD)); point.ClearBound(); } }
SHRegularPolygon.prototype.CalculateAngle = function (CtD, EtD) { var Gtd = Math.atan2(CtD.FY - this.FOrigin.FY, CtD.FX - this.FOrigin.FX); if (this.FSnapAngle && (this.FSnapToggle && !EtD[this.FSnapToggle])) { var ktD = (Math.PI / 180) * this.FSnapAngle; this.FAngle = Math.round(Gtd / ktD) * ktD; } else { this.FAngle = Gtd; } }
SHRegularPolygon.prototype.Cancel = function () { this.Callback("cancel", null); this.Finalize(); }
SHRegularPolygon.prototype.Finalize = function () { this.FOrigin = null; this.FRadius = this.FOptions.FRadius; }
SHRegularPolygon.prototype.Clear = function () { this.FLayer.renderer.Clear(); this.FLayer.DestroyFeatures(); }
SHRegularPolygon.prototype.Callback = function (MtD, ptd) { if (this.Callbacks[MtD]) { this.Callbacks[MtD].apply(this.FControl, [this.FFeature.FGeometry.Clone()]); } if (!this.FPersist && (MtD == "done" || MtD == "cancel")) { this.Clear(); } }
function SPanel() { this.FControls = null; this.FDefaultControl = null; SControlBase.apply(this); this.FControls = []; }
SPanel.prototype = new SControlBase();
SPanel.prototype.ClassName = SClassName.SPanel; SPanel.prototype.Destroy = function () { SControlBase.prototype.Destroy.apply(this, arguments); for (var i = this.FControls.length - 1; i >= 0; i--) { SEvent.StopObservingEle(this.FControls[i].panel_div); this.FControls[i].panel_div = null; } }
SPanel.prototype.Activate = function () { if (SControlBase.prototype.Activate.apply(this, arguments)) { for (var i = 0; i < this.FControls.length; i++) { if (this.FControls[i] == this.FDefaultControl) { this.FControls[i].Activate(); } } this.Redraw(); return true; } else { return false; } }
SPanel.prototype.DeActivate = function () { if (SControlBase.prototype.DeActivate.apply(this, arguments)) { for (var i = 0; i < this.FControls.length; i++) { this.FControls[i].DeActivate(); } this.pRedraw(); return true; } else { return false; } }
SPanel.prototype.Draw = function () { SControlBase.prototype.Draw.apply(this, arguments); for (var i = 0; i < this.FControls.length; i++) { this.FMap.AddControl(this.FControls[i]); this.FControls[i].DeActivate(); } this.Activate(); return this.FDiv; }
SPanel.prototype.Redraw = function () { this.FDiv.innerHTML = ""; if (this.FActive) { for (var i = 0; i < this.FControls.length; i++) { var QtD = this.FControls[i].panel_div; if (this.FControls[i].FActive) { QtD.className = this.FControls[i].FDomClass + "ItemActive"; } else { QtD.className = this.FControls[i].FDomClass + "ItemInactive"; } this.FDiv.appendChild(QtD); } } }
SPanel.prototype.ActivateControl = function (rtD) { if (!this.FActive) { return false; } if (rtD.FType == SControlBaseType.Button) { rtD.Trigger(); return; } if (rtD.FType == SControlBaseType.Toggle) { if (rtD.FActive) { rtD.DeActivate(); } else { rtD.Activate(); } return; } for (var i = 0; i < this.FControls.length; i++) { if (this.FControls[i] == rtD) { rtD.Activate(); } else { if (this.FControls[i].FType != SControlBaseType.Toggle) { this.FControls[i].DeActivate(); } } } this.Redraw(); }
SPanel.prototype.AddControls = function (sTD) { if (!(sTD instanceof Array)) { sTD = [sTD]; } this.FControls = this.FControls.concat(sTD); for (var i = 0; i < sTD.length; i++) { var TtD = document.createElement("div"); var vtD = document.createTextNode(" "); sTD[i].panel_div = TtD; SEvent.Observe(sTD[i].panel_div, "click", SFunction.Bind(this.OnClick, this, sTD[i])); SEvent.Observe(sTD[i].panel_div, "mousedown", SFunction.BindAsEventListener(SEvent.Stop)); } if (this.FMap) { for (var i = 0; i < sTD.length; i++) { this.FMap.AddControl(sTD[i]); sTD[i].DeActivate(); } this.Redraw(); } }
SPanel.prototype.OnClick = function (Ftd, WTd) { SEvent.Stop(WTd ? WTd : window.event); this.ActivateControl(Ftd); }
function SDrawControl(LTD, xTd, YTd, HTd, zVD) { this.FLayer = null; if (YTd) { this.FCallbacks = YTd; } else { this.FCallbacks = []; } this.FFeatureAdded = function () { }; this.FHandlerOptions = null; SControlBase.call(this); this.FCallbacks = this.FCallbacks; this.FLayer = LTD; if (xTd) { this.FHandler = new xTd(this, this.FCallbacks, HTd, zVD); } }
SDrawControl.prototype = new SControlBase(); 
SDrawControl.prototype.ClassName = SClassName.SDrawControl; function SDrawPointControl(NVd, bvd, uvD, DvD) { this.FLayer = null; this.FCallbacks = []; this.FFeatureAdded = function () { }; this.FHandlerOptions = null; SControlBase.call(this, null, DvD); this.FCallbacks = SUtil.Extend({ Complete: this.Complete, DrawMouseDownMonitor: this.DMouseDown }, this.FCallbacks); if (uvD) { this.FCallbacks = SUtil.Extend(uvD, this.FCallbacks); } this.FLayer = NVd; if (bvd) { this.FHandler = new bvd(this, this.FCallbacks); } }
SDrawPointControl.prototype = new SControlBase();
SDrawPointControl.prototype.ClassName = SClassName.SDrawPointControl; SDrawPointControl.prototype.Complete = function (OVd) { return false; }
SDrawPointControl.prototype.DMouseDown = function (CVD) { if (this.FLayer) { this.FLayer.DestroyFeatures(); } }
SDrawPointControl.prototype.GetHandler = function () { return this.FHandler; }
function SMeasure(eVd, GVD, kvD) { SDrawControl.call(this, eVd, GVD, { Complete: this.Complete, DrawMoveMonitor: this.MouseMove }, kvD); this.FLabel = new SLabel(); this.FLabel.SetTag("_m"); this.FLabel.SetIndependent(true); this.FLayer.FMap.AddLabel(this.FLabel); this.FLabel.Hide(); }
SMeasure.prototype = new SDrawControl();
SMeasure.prototype.ClassName = SClassName.SMeasure; SMeasure.prototype.Complete2 = function (mVD) { if (mVD != null) { var PVD = ""; if (mVD.ClassName == SClassName.SPoint) { } else if (mVD.ClassName == SClassName.SRectangle) { } else if (mVD.ClassName == SClassName.SCircle) { } else if (mVD.ClassName == SClassName.SPolygon) { } else if (mVD.ClassName == SClassName.SLineString) { for (var u = 1; u < mVD.FComponents.length; u++) { var QvD = mVD.FComponents[u]; var rVd = Math.round(SPoint.CalcuDistance(QvD, mVD.FComponents[u - 1]) * SSystem.PerMapUnitMi); var SVD = new SLabel(null, new SLonLat(QvD.FX, QvD.FY), null, rVd + SResource.SScale.Mi, true); this.FLayer.FMap.AddLabel(SVD); if (u == mVD.FComponents.length - 1) { PVD += QvD.FX + " " + QvD.FY; } else { PVD += QvD.FX + " " + QvD.FY + ","; } } } } }
SMeasure.prototype.MouseMove = function (tVD) { try { var vvd = tVD.FComponents[tVD.FComponents.length - 1]; this.FLabel.MoveToWithLonLat(new SLonLat(vvd.FX, vvd.FY)); this.FLabel.SetTitle(tVD.CalcuDistance() + SResource.SScale.Mi + SResource.SScale.End); this.FLabel.SetOffset(new SSize(5, 5)); this.FLabel.Show(); } catch (ed) { } }
SMeasure.prototype.Complete = function (fvd) { if (fvd != null) { if (fvd.ClassName == SClassName.SPoint) { } else if (fvd.ClassName == SClassName.SRectangle) { } else if (fvd.ClassName == SClassName.SCircle) { } else if (fvd.ClassName == SClassName.SPolygon) { } else if (fvd.ClassName == SClassName.SLineString) { alert(fvd.CalcuDistance() + SResource.SScale.Mi); this.FLayer.RemoveFeatureById(fvd.GetFeatureId()); if (!this.FLabel) { this.FLabel = new SLabel(); this.FLabel.SetTag("_m"); this.FLabel.SetIndependent(true); this.FLayer.FMap.AddLabel(this.FLabel); } this.FLabel.Hide(); if (this.FHandler) { this.DeActivate(); } } } }
function SToolBar(LVD) { SPanel.apply(this); var wvD = [new SDrawControl(LVD, SHPoint, null, null, 'olControlDrawFeaturePoint'), new SDrawControl(LVD, SHPath, null, null, 'olControlDrawFeaturePath'), new SDrawControl(LVD, SHPolygon, null, null, 'olControlDrawFeaturePolygon'), new SDrawControl(LVD, SHRectangle, null, null, 'olControlDrawFeaturePolygon'), new SDrawControl(LVD, SHCircle, null, null, 'olControlDrawFeaturePolygon'), new SMeasure(LVD, SHPath, null, null, 'olControlDrawFeaturePath')]; for (var i = 0; i < wvD.length; i++) { wvD[i].FFeatureAdded = function (feature) { feature.FState = WState.INSERT; } } this.AddControls(wvD); }
SToolBar.prototype = new SPanel();
SToolBar.prototype.ClassName = SClassName.SToolBar; SToolBar.prototype.Draw = function () { var xVd = SPanel.prototype.Draw.apply(this, arguments); this.ActivateControl(this.FControls[0]); return xVd; }
function SOVMap(yvd, hvd) { SControlBase.call(this); this.FId = "OVMap"; this.qO = null; this.FOVMap = null; this.FSize = new SSize(180, 110); this.FLayer = null; this.FMinRatio = 8; this.FMaxRatio = 16; this.FMapOptions = null; if (yvd != null) { this.FMapOptions = yvd; } if (hvd != null) { this.FLayer = hvd; } }
SOVMap.prototype = new SControlBase();
SOVMap.prototype.ClassName = SClassName.SOVMap; SOVMap.prototype.Destroy = function () { if (!this.mapDiv) { return; } this.mapDiv.removeChild(this.extentRectangle); this.extentRectangle = null; this.rectEvents.Destroy(); this.rectEvents = null; this.FOVMap.Destroy(); this.FOVMap = null; this.qO.removeChild(this.mapDiv); this.mapDiv = null; this.mapDivEvents.Destroy(); this.mapDivEvents = null; this.FDiv.removeChild(this.qO); this.qO = null; this.elementEvents.Destroy(); this.elementEvents = null; this.FMap.FEvents.UnRegister('moveend', this, this.Update); this.FMap.FEvents.UnRegister("changebaselayer", this, this.BaseLayerDraw); SControlBase.prototype.Destroy.apply(this, arguments); }
SOVMap.prototype.Draw = function () { SControlBase.prototype.Draw.apply(this, arguments); if (this.FLayer != null) { this.FLayer.SetMainLayer(true); } else { this.FMap.FEvents.Register("changebaselayer", this, this.BaseLayerDraw); return this.FDiv; } this.qO = document.createElement('div'); this.qO.className = 'tJElement'; this.mapDiv = document.createElement('div'); this.mapDiv.style.width = this.FSize.FW + "px"; this.mapDiv.style.height = this.FSize.FH + "px"; this.mapDiv.style.position = 'relative'; this.mapDiv.style.overflow = 'hidden'; this.mapDiv.className = 'tJMap'; this.mapDiv.FId = SUtil.CreateUid('om'); this.extentRectangle = SUtil.CreateDiv(null, null, null, null, 'absolute', null, 'hidden', 0.6); this.extentRectangle.style.zIndex = 1000; this.extentRectangle.className = "tJMapExtentRectangle"; this.mapDiv.appendChild(this.extentRectangle); this.qO.appendChild(this.mapDiv); this.openImg = document.createElement('img'); this.openImg.src = SUtil.GetImagesLocation() + 'vdown.gif'; this.openImg.className = 'tJOpenImg'; this.openImg.__pM = this; this.openImg.onclick = function () { var zFd = this.__pM; if (zFd) { if (zFd.IsHide()) { zFd.Show(); } else { zFd.Hide(); } } }; this.qO.appendChild(this.openImg); this.FDiv.appendChild(this.qO); this.FMap.FEvents.Register('moveend', this, this.Update); this.elementEvents = new SEvents(this, this.qO); this.elementEvents.Register('mousedown', this, function (e) { SEvent.Stop(e); }); this.elementEvents.Register('click', this, function (e) { SEvent.Stop(e); }); this.elementEvents.Register('dblclick', this, function (e) { SEvent.Stop(e); }); this.rectEvents = new SEvents(this, this.extentRectangle, null, true); this.rectEvents.Register('mouseout', this, this.RectMouseOut); this.rectEvents.Register('mousedown', this, this.RectMouseDown); this.rectEvents.Register('mousemove', this, this.RectMouseMove); this.rectEvents.Register('mouseup', this, this.RectMouseUp); this.rectEvents.Register('click', this, function (e) { SEvent.Stop(e); }); this.rectEvents.Register('dblclick', this, this.RectDblClick); this.mapDivEvents = new SEvents(this, this.mapDiv); this.mapDivEvents.Register('click', this, this.MapDivClick); if (!this.outsideViewport) { this.FDiv.className = "tJVOMap"; } else { this.qO.style.display = ''; } if (this.FMap.GetExtent()) { this.Update(); } return this.FDiv; }
SOVMap.prototype.BaseLayerDraw = function () { this.draw(); this.FMap.FEvents.UnRegister("changebaselayer", this, this.BaseLayerDraw); }
SOVMap.prototype.Show = function () { this.mapDiv.style.display = 'inline'; if (this.openImg) { this.openImg.src = SUtil.GetImagesLocation() + 'vdown.gif'; } }
SOVMap.prototype.Hide = function () { this.mapDiv.style.display = 'none'; if (this.openImg) { this.openImg.src = SUtil.GetImagesLocation() + 'vup.gif'; } }
SOVMap.prototype.IsHide = function () { if (this.mapDiv.style.display == 'none') { return true; } return false; }
SOVMap.prototype.RectMouseOut = function (nFd) { if (this.rectDragStart != null) { if (this.performedRectDrag) { this.RectMouseMove(nFd); var bfd = this.GetRectPxBounds(); if ((bfd.FTop <= 0) || (bfd.FLeft <= 0) || (bfd.FBottom >= this.FSize.FH - this.hComp) || (bfd.FRight >= this.FSize.FW - this.wComp)) { this.UpdateMapToRect(); } else { return; } } document.onselectstart = null; this.rectDragStart = null; } }
SOVMap.prototype.RectMouseDown = function (UFd) { if (!SEvent.IsLeftClick(UFd)) return; this.rectDragStart = UFd.pXY.Clone(); this.performedRectDrag = false; SEvent.Stop(UFd); }
SOVMap.prototype.RectMouseMove = function (DFd) { if (this.rectDragStart != null) { var OFd = this.rectDragStart.FX - DFd.pXY.FX; var CfD = this.rectDragStart.FY - DFd.pXY.FY; var EfD = this.GetRectPxBounds(); var gFD = EfD.FTop; var kFD = EfD.FLeft; var mFD = Math.abs(EfD.GetHeight()); var pfd = EfD.GetWidth(); var qfD = Math.max(0, (gFD - CfD)); qfD = Math.min(qfD, this.FOVMap.FSize.FH - this.hComp - mFD); var Rfd = Math.max(0, (kFD - OFd)); Rfd = Math.min(Rfd, this.FOVMap.FSize.FW - this.wComp - pfd); this.SetRectPxBounds(new SBounds(Rfd, qfD + mFD, Rfd + pfd, qfD)); this.rectDragStart = DFd.pXY.Clone(); this.performedRectDrag = true; SEvent.Stop(DFd); } }
SOVMap.prototype.RectMouseUp = function (sfD) { if (!SEvent.IsLeftClick(sfD)) return; if (this.performedRectDrag) { this.UpdateMapToRect(); this.UpdateOverview(); SEvent.Stop(sfD); } document.onselectstart = null; this.rectDragStart = null; }
SOVMap.prototype.RectDblClick = function (TFd) { this.performedRectDrag = false; SEvent.Stop(TFd); this.UpdateOverview(); }
SOVMap.prototype.MapDivClick = function (VFd) { var FFD = this.GetRectPxBounds(); var WFD = FFD.GetCPixel(); var Lfd = VFd.pXY.FX - WFD.FX; var XfD = VFd.pXY.FY - WFD.FY; var YfD = FFD.FTop; var HFD = FFD.FLeft; var height = Math.abs(FFD.GetHeight()); var width = FFD.GetWidth(); var zwd = Math.max(0, (YfD + XfD)); zwd = Math.min(zwd, this.FOVMap.FSize.FH - height); var NWd = Math.max(0, (HFD + Lfd)); NWd = Math.min(NWd, this.FOVMap.FSize.FW - width); this.SetRectPxBounds(new SBounds(NWd, zwd + height, NWd + width, zwd)); this.UpdateMapToRect(); SEvent.Stop(VFd); }
SOVMap.prototype.MaximizeControl = function (e) { this.qO.style.display = ''; this.ShowToggle(false); if (e != null) { SEvent.Stop(e); } }
SOVMap.prototype.MinimizeControl = function (e) { this.qO.style.display = 'none'; this.ShowToggle(true); if (e != null) { SEvent.Stop(e); } }
SOVMap.prototype.ShowToggle = function (bwd) { this.maximizeDiv.style.display = bwd ? '' : 'none'; this.minimizeDiv.style.display = bwd ? 'none' : ''; }
SOVMap.prototype.Update = function () { if (this.FOVMap == null) { this.CreateMap(); } this.UpdateOverview(); this.UpdateRectToMap(); }
SOVMap.prototype.AutoZoom = function () { var Uwd = this.FMap.GetZoom(); }
SOVMap.prototype.IsSuitableOverview = function () { var DWD = this.FMap.GetExtent(); var oWd = this.FMap.FMaxExtent; var CwD = new SBounds(Math.max(DWD.FLeft, oWd.FLeft), Math.max(DWD.FBottom, oWd.FBottom), Math.min(DWD.FRight, oWd.FRight), Math.min(DWD.FTop, oWd.FTop)); var eWd = this.FOVMap.GetResolution() / this.FMap.GetResolution(); return ((eWd > this.FMinRatio) && (eWd <= this.FMaxRatio) && (this.FOVMap.GetExtent().ContainsBounds(CwD))); }
SOVMap.prototype.UpdateOverview = function () { var gwd = this.FMap.GetResolution(); var KWd = this.FOVMap.GetResolution(); var MwD = KWd / gwd; if (MwD > this.FMaxRatio) { KWd = this.FMinRatio * gwd; } else if (MwD <= this.FMinRatio) { KWd = this.FMaxRatio * gwd; } var pwd = this.FOVMap.GetZoomForResolution(KWd); if (pwd == 0) { pwd = 1; } var QWD = this.FMap.GetZoom(); this.FOVMap.SetCenter(this.FMap.FCenter.Clone(), QWD); this.UpdateRectToMap(); }
SOVMap.prototype.CreateMap = function () { if (this.FMapOptions != null) { this.FOVMap = new SMap(this.mapDiv, this.FMapOptions); this.FLayer.SetMainLayer(true); this.FOVMap.AddLayer(this.FLayer); } this.FOVMap.SetCenter(this.FMap.FCenter.Clone(), 1); this.wComp = parseInt(SElement.GetStyle(this.extentRectangle, 'border-pLeft-width')) + parseInt(SElement.GetStyle(this.extentRectangle, 'border-pRight-width')); this.wComp = (this.wComp) ? this.wComp : 2; this.hComp = parseInt(SElement.GetStyle(this.extentRectangle, 'border-pTop-width')) + parseInt(SElement.GetStyle(this.extentRectangle, 'border-pBottom-width')); this.hComp = (this.hComp) ? this.hComp : 2; }
SOVMap.prototype.UpdateRectToMap = function () { if (this.FMap.FUnits != 'degrees') { if (this.FOVMap.GetProjection() && (this.FMap.GetProjection() != this.FOVMap.GetProjection())) { } } var Rwd = this.GetRectBoundsFromMapBounds(this.FMap.GetExtent()); if (Rwd) { this.SetRectPxBounds(Rwd); } }
SOVMap.prototype.UpdateMapToRect = function () { var SWD = this.GetRectPxBounds(); var tWd = this.GetMapBoundsFromRectBounds(SWD); this.FMap.SetCenter(tWd.GetCenterLonLat(), this.FMap.FZoom); }
SOVMap.prototype.GetRectPxBounds = function () { var Vwd = parseInt(this.extentRectangle.style.top); var FWd = parseInt(this.extentRectangle.style.left); var height = parseInt(this.extentRectangle.style.height); var width = parseInt(this.extentRectangle.style.width); return new SBounds(FWd, Vwd + height, FWd + width, Vwd); }
SOVMap.prototype.SetRectPxBounds = function (wwD) { var lWd = Math.max(wwD.FTop, 0); var xWD = Math.max(wwD.FLeft, 0); var yWd = Math.min(wwD.FTop + Math.abs(wwD.GetHeight()), this.FOVMap.FSize.FH - this.hComp); var hwd = Math.min(wwD.FLeft + wwD.GetWidth(), this.FOVMap.FSize.FW - this.wComp); this.extentRectangle.style.top = parseInt(lWd) + "px"; this.extentRectangle.style.left = parseInt(xWD) + "px"; this.extentRectangle.style.height = parseInt(Math.max(yWd - lWd, 0)) + "px"; this.extentRectangle.style.width = parseInt(Math.max(hwd - xWD, 0)) + "px"; }
SOVMap.prototype.GetRectBoundsFromMapBounds = function (zlD) { var nld = new SLonLat(zlD.FLeft, zlD.FBottom); var bLD = new SLonLat(zlD.FRight, zlD.FTop); var uld = this.GetOverviewPxFromLonLat(nld); var DLd = this.GetOverviewPxFromLonLat(bLD); var Old = null; if (uld && DLd) { Old = new SBounds(uld.FX, uld.FY, DLd.FX, DLd.FY); } return Old; }
SOVMap.prototype.GetMapBoundsFromRectBounds = function (cld) { var eLd = new SPixel(cld.FLeft, cld.FBottom); var GlD = new SPixel(cld.FRight, cld.FTop); var KLD = this.GetLonLatFromOverviewPx(eLd); var MLD = this.GetLonLatFromOverviewPx(GlD); return new SBounds(KLD.FLon, KLD.FLat, MLD.FLon, MLD.FLat); }
SOVMap.prototype.GetLonLatFromOverviewPx = function (Pld) { var QLD = this.FOVMap.FSize; var rLd = this.FOVMap.GetResolution(); var sLd = this.FOVMap.GetExtent().GetCenterLonLat(); var tlD = Pld.FX - (QLD.FW / 2); var vlD = Pld.FY - (QLD.FH / 2); return new SLonLat(sLd.FLon + tlD * rLd, sLd.FLat - vlD * rLd); }
SOVMap.prototype.GetOverviewPxFromLonLat = function (fLD) { var wLD = this.FOVMap.GetResolution(); var lLD = this.FOVMap.GetExtent(); var xLd = null; if (lLD) { xLd = new SPixel(Math.round(1 / wLD * (fLD.FLon - lLD.FLeft)), Math.round(1 / wLD * (lLD.FTop - fLD.FLat))); } return xLd; }
SOVMap.prototype.SetMap = function (yLd) { if (yLd != null) { this.FOVMap = yLd; } }
if (!Function.prototype.Bind) { Function.prototype.Bind = function () { Array.prototype.unshift.apply(arguments, [this]); return SFunction.Bind.apply(null, arguments); } } if (!Function.prototype.BindAsEventListener) { Function.prototype.BindAsEventListener = function (pObj) { return SFunction.BindAsEventListener(this, pObj); } } if (!String.prototype.StartsWith) { String.prototype.StartsWith = function (_sStart) { return SString.StartsWith(this, _sStart); }; }; if (!String.prototype.Contains) { String.prototype.Contains = function (_str) { return SString.Contains(this, _str); }; }; if (!String.prototype.Trim) { String.prototype.Trim = function () { return SString.Trim(this); }; }; if (!String.prototype.Camelize) { String.prototype.Camelize = function () { return SString.Camelize(this); }; }; if (!Number.prototype.LimitSigDigs) { Number.prototype.LimitSigDigs = function (_sig) { return SNumber.LimitSigDigs(this, _sig); }; } GlobeVar.INCHES_PER_UNIT["in"] = GlobeVar.INCHES_PER_UNIT.inches; GlobeVar.INCHES_PER_UNIT["degrees"] = GlobeVar.INCHES_PER_UNIT.dd; GlobeVar.ZIndex.MainLayer = 100; GlobeVar.ZIndex.Overlay = 325; GlobeVar.ZIndex.Popup = 750; GlobeVar.ZIndex.Control = 1000; GlobeVar.ZIndex.GrayDom = 1200; 

SResource.SPopup.TitleText = '标题';
SResource.SPopup.DescriptionText = '描述';
SResource.SPopup.DescriptionText = '确定';
SResource.SScale = function() { };
SResource.SScale.UnitText = '公里';
SResource.SScale.TabName = '比例尺';
SResource.SScale.Mi = '米';
SResource.SScale.GongLi = '公里';
SResource.SScale.End = "双击结束";


var SBrowser = new vn(); SEvent.Observe(window, "unload", SEvent.UnloadCache, false); if (window.SEvent) { SUtil.ApplyDefaults(window.SEvent, SEvent); } else { var SEvent = SEvent; }; ; var SGFeatureDftEvts = new SFeatureDefaultEvents(); SGFeatureDftEvts.AddEventListener("pointMouseDown", null, SGFeatureDftEvts.PointMouseDown); SGFeatureDftEvts.AddEventListener("pointMouseOver", null, SGFeatureDftEvts.PointMouseOver); SGFeatureDftEvts.AddEventListener("rectMouseDown", null, SGFeatureDftEvts.RectMouseDown); SGFeatureDftEvts.AddEventListener("rectMouseOver", null, SGFeatureDftEvts.RectMouseOver); SGFeatureDftEvts.AddEventListener("polygonMouseDown", null, SGFeatureDftEvts.PolygonMouseDown); SGFeatureDftEvts.AddEventListener("polygonMouseOver", null, SGFeatureDftEvts.PolygonMouseOver); ; 
